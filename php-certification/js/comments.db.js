/*
 change:   \\ for \\\
 reg change:   \n for
 reg change:   (q[0-9]+:) for \n$1
 reg change:   ([:0-9a-zA-Z])\\([0-9a-zA-Z][^\\^+]) for $1&#92;$2
 reg change (not):   \t for
 reg change (not):   \s\s+ for \s
 */
var commentsDataBase = {
c37: "<p>    reponse est 4    <br/>    <small><b>amine ismaili alaoui</b> on <i>28 June 2010, at 07:06:01</i></small>    <br/>. . .</p>",
c171: "<p>2 is the best answer<br/>3 would make sense ... but that\'s not the primary benefit<br/>4 I disagree qith you guys ... SAX is not easier ... really not ...    <br/>    <small><b>anonymous</b> on <i>17 September 2012, at 11:09:34</i></small>    <br/>. . .</p>    <p>    I agree. The answer is #1.        <br/>        <small><b>anonymous</b> on <i>28 October 2010, at 10:10:08</i></small>        <br/>    . . .    </p>    <p>    I would say that it\'s 1. as<br/>2. is true because SAX does create a tree model<br/>3. is true because SAX does not need to keep the whole XML in memory<br/>4. is true because SAX calls methods for every open/close tag (SAX only makes it easier to develop own parsers, not to work with XML in general!)        <br/>        <small><b>lathspell</b> on <i>15 July 2010, at 10:07:39</i></small>        <br/>    . . .    </p>    <p>    imho 4<br/>        <br/>        <small><b>LOO</b> on <i>5 April 2010, at 06:04:20</i></small>        <br/>    . . .    </p>",
c178: "<p>as per comment by max k. the answer is 2,3,4,5    <br/>    <small><b>anonymous</b> on <i>19 July 2012, at 05:07:01</i></small>    <br/>. . .</p>    <p>    see http://www.php.net/manual/en/simplexml.examples-basic.php - User comment by Max K. 20-Jun-2010 02:38 (3/4 down page)        <br/>        <small><b>anonymous</b> on <i>28 January 2012, at 02:01:38</i></small>        <br/>    . . .    </p>    <p>    namespace attribute called xmlns: so<br/>2,3,4,5        <br/>        <small><b>shakedko</b> on <i>5 April 2010, at 05:04:41</i></small>        <br/>    . . .    </p>",
c115: "<p>What does it mean \"-- \"?    <br/>    <small><b>anonymous</b> on <i>4 May 2013, at 01:05:23</i></small>    <br/>. . .</p>    <p>    This is syntax error \"--:\", correct comment is \"-- \" folowed by whitespace        <br/>        <small><b>anonymous</b> on <i>3 April 2013, at 06:04:19</i></small>        <br/>    . . .    </p>    <p>    The Answer is: 3.        <br/>        <small><b>anonymous</b> on <i>15 November 2010, at 02:11:38</i></small>        <br/>    . . .    </p>",
c241: "<p>I have 5 apples and 6 oranges<br/>$apples is not registred as a global, so according to the variable scope, $apples et $apples are not the same variable, depending they are in the function or not.    <br/>    <small><b>anonymous</b> on <i>17 September 2012, at 01:09:02</i></small>    <br/>. . .</p>    <p>    I have 5 apples and 6 oranges        <br/>        <small><b>Sveta</b> on <i>26 July 2012, at 09:07:22</i></small>        <br/>    . . .    </p>    <p>    Answer 3., 5 apples and 6 oranges. The apples-variable in the function is the oranges-variable from outside.        <br/>        <small><b>Steph</b> on <i>20 June 2011, at 07:06:21</i></small>        <br/>    . . .    </p>    <p>    3 option        <br/>        <small><b>anonymous</b> on <i>6 August 2010, at 03:08:43</i></small>        <br/>    . . .    </p>    <p>    Answer: option 3        <br/>        <small><b>anonymous</b> on <i>1 April 2010, at 08:04:04</i></small>        <br/>    . . .    </p>",
c162: "<p>Right, all above is valid    <br/>    <small><b>babs</b> on <i>27 June 2012, at 01:06:33</i></small>    <br/>. . .</p>    <p>    all valid (PDO_SQLITE driver also exists http://php.net/manual/en/ref.pdo-sqlite.connection.php)        <br/>        <small><b>anonymous</b> on <i>29 November 2011, at 10:11:05</i></small>        <br/>    . . .    </p>    <p>    SQLite does not support PDO 5        <br/>        <small><b>anonymous</b> on <i>3 October 2011, at 03:10:36</i></small>        <br/>    . . .    </p>    <p>    All of the above are valid        <br/>        <small><b>samsami2um@gmail.com</b> on <i>21 April 2010, at 07:04:28</i></small>        <br/>    . . .    </p>",
c71: "<p>1 & 3 ignore the previous comment, curly braces are allowed.    <br/>    <small><b>anonymous</b> on <i>6 July 2012, at 08:07:27</i></small>    <br/>. . .</p>    <p>    correct question 2 and 4        <br/>        <small><b>anonymous</b> on <i>27 December 2011, at 01:12:53</i></small>        <br/>    . . .    </p>    <p>    1 is not valid because it merely sees the parentheses as the string.<br/>2 is valid.  <br/>3 is not valid because it is using single quotes.  <br/>4 is valid.  <br/>5 is valid, even though it only embeds part of the variable.        <br/>        <small><b>anonymous</b> on <i>18 September 2011, at 08:09:49</i></small>        <br/>    . . .    </p>    <p>    5th example works pretty well. So 1 and 3 are not valid ways.        <br/>        <small><b>anonymous</b> on <i>15 August 2011, at 08:08:36</i></small>        <br/>    . . .    </p>    <p>    1,3 and 5 are NOT valid        <br/>        <small><b>anonymous</b> on <i>20 May 2011, at 11:05:38</i></small>        <br/>    . . .    </p>    <p>    2 and 4        <br/>        <small><b>anonymous</b> on <i>20 May 2011, at 11:05:38</i></small>        <br/>    . . .    </p>    <p>    1 an 3, lisez le cours d\'interpolation de variable.... ;)        <br/>        <small><b>amine ismaili alaoui</b> on <i>30 June 2010, at 12:06:40</i></small>        <br/>    . . .    </p>",
c88: "<p>^([a-z]{5}) matches exactly 5 lower case letters at the start of the string. [1-5]+ matches one or more numbers from 1 to 5. So far this eliminates #2, because of the uppercase H. It eliminates #5 because there are more than 5 lowercase letters at the start of the string. The last part of the regular expression means at least one lowercase letter. #3 and #4 meet all criteria. And that automatically eliminates #1.    <br/>    <small><b>anonymous</b> on <i>6 July 2012, at 11:07:05</i></small>    <br/>. . .</p>    <p>    3 and 4        <br/>        <small><b>anonymous</b> on <i>15 November 2010, at 01:11:44</i></small>        <br/>    . . .    </p>    <p>    3 and 4 wins!        <br/>        <small><b>mhor</b> on <i>23 September 2010, at 09:09:26</i></small>        <br/>    . . .    </p>",
c59: "<p>instead of split() we use preg_split() from 5.3    <br/>    <small><b>Ryan</b> on <i>18 February 2013, at 06:02:51</i></small>    <br/>. . .</p>    <p>    split() is now deprecated as of php 5.3 (the answer is only 4 and 5)        <br/>        <small><b>anonymous</b> on <i>31 July 2011, at 06:07:54</i></small>        <br/>    . . .    </p>    <p>    5. explode()        <br/>        <small><b>thompson</b> on <i>18 February 2011, at 10:02:59</i></small>        <br/>    . . .    </p>    <p>    -- yeah thats kind of the point        <br/>        <small><b>anonymous</b> on <i>5 May 2010, at 07:05:21</i></small>        <br/>    . . .    </p>    <p>    string_split() and array_split() don\'t exist        <br/>        <small><b>Peter</b> on <i>14 April 2010, at 01:04:13</i></small>        <br/>    . . .    </p>",
c163: "<p>answer 1 is correct, without using the try & catch the dsn will be printed on the screen so 1 correct    <br/>    <small><b>shakedko</b> on <i>5 April 2010, at 05:04:54</i></small>    <br/>. . .</p>",
c165: "<p>1,2,4 : http://php.net/manual/en/book.pdo.php check smileaf comment    <br/>    <small><b>Radu</b> on <i>9 May 2013, at 08:05:21</i></small>    <br/>. . .</p>    <p>    1,2,4        <br/>        <small><b>Software Developer Slave</b> on <i>17 July 2012, at 07:07:44</i></small>        <br/>    . . .    </p>    <p>    I think 1,2,4 are correct        <br/>        <small><b>babs</b> on <i>9 July 2012, at 11:07:33</i></small>        <br/>    . . .    </p>    <p>    1,2,4. The constant \"PDO::ATTR_USE_CLASS\" doesn\'t exists.        <br/>        <small><b>Rafael M. Salvioni</b> on <i>30 January 2012, at 12:01:18</i></small>        <br/>    . . .    </p>    <p>    1,4,5 definitely        <br/>        <small><b>Mahesh Gold</b> on <i>17 December 2011, at 07:12:14</i></small>        <br/>    . . .    </p>    <p>    imho 1,4 and 5.        <br/>        <small><b>samhk222</b> on <i>1 September 2011, at 01:09:41</i></small>        <br/>    . . .    </p>    <p>    1,2,4        <br/>        <small><b>Loo</b> on <i>5 April 2010, at 06:04:25</i></small>        <br/>    . . .    </p>",
c23: "<p>Yes Offcoure It will be...Public, Private, Protected.;    <br/>    <small><b>Virat</b> on <i>1 August 2013, at 10:08:36</i></small>    <br/>. . .</p>    <p>    For php 5.3 the answer is all: 1,2,3,4,5        <br/>        <small><b>Gildus</b> on <i>29 September 2012, at 02:09:42</i></small>        <br/>    . . .    </p>    <p>    In PHP 4 just \"1,2,4\" would be correct ... In PHP 5, they all exists ! \"1,2,3,4,5\" would be a correct answer i think        <br/>        <small><b>anonymous</b> on <i>13 September 2012, at 01:09:52</i></small>        <br/>    . . .    </p>    <p>    The correct answer are \"protected\", \"public\" \"private\".<br/>\"static\" and \"final\" do not modify the access/visibilty of a class.        <br/>        <small><b>lathspell</b> on <i>11 July 2010, at 08:07:28</i></small>        <br/>    . . .    </p>",
c200: "<p>I think 4.    <br/>    <small><b>anur</b> on <i>20 April 2013, at 12:04:55</i></small>    <br/>. . .</p>    <p>    i would definitely say 4 is the correct answer        <br/>        <small><b>anonymous</b> on <i>29 June 2011, at 10:06:46</i></small>        <br/>    . . .    </p>    <p>    4. Session data stored in the file system can be read by other scripts on the same shared host        <br/>        <small><b>anonymous</b> on <i>17 March 2010, at 08:03:46</i></small>        <br/>    . . .    </p>",
c28: "<p>When a copy of an object is made by clone operator then __clone method will automaticaly be called if decalred in class.    <br/>    <small><b>Faisal</b> on <i>20 October 2010, at 09:10:33</i></small>    <br/>. . .</p>    <p>    puisqu\'on veut modifier l\'objet durant son clonage on doit utiliser la methode magique __clone(), donc la bonne reponse st number 3        <br/>        <small><b>amine ismaili alaoui</b> on <i>28 June 2010, at 12:06:13</i></small>        <br/>    . . .    </p>",
c143: "<p>#1 and #2 is correct    <br/>    <small><b>vinod kumar</b> on <i>1 July 2013, at 12:07:58</i></small>    <br/>. . .</p>    <p>    php5 use __construct($param) xor MyClass($param), also added private&#92;public&#92;protected methods        <br/>        <small><b>WinterSilence</b> on <i>28 March 2013, at 05:03:26</i></small>        <br/>    . . .    </p>    <p>    2r        <br/>        <small><b>anonymous</b> on <i>6 December 2010, at 02:12:04</i></small>        <br/>    . . .    </p>    <p>    1 & 2 are right answers.        <br/>        <small><b>Faisal</b> on <i>31 October 2010, at 10:10:15</i></small>        <br/>    . . .    </p>    <p>    \"For backwards compatibility, if PHP 5 cannot find a __construct() function for a given class, it will search for the old-style constructor function, by the name of the class. Effectively, it means that the only case that would have compatibility issues is if the class had a method named __construct() which was used for different semantics.\"        <br/>        <small><b>Joro (gmg[at]mail.bg)</b> on <i>30 May 2010, at 08:05:25</i></small>        <br/>    . . .    </p>    <p>    1 & 2 are correct        <br/>        <small><b>shakedko</b> on <i>5 April 2010, at 05:04:06</i></small>        <br/>    . . .    </p>",
c242: "<p>0 is Answer    <br/>    <small><b>anonymous</b> on <i>11 June 2013, at 07:06:17</i></small>    <br/>. . .</p>    <p>    sss        <br/>        <small><b>anonymous</b> on <i>3 June 2013, at 07:06:35</i></small>        <br/>    . . .    </p>    <p>    1 is the correct answer.        <br/>        <small><b>mohit kumar gupta</b> on <i>1 April 2013, at 12:04:54</i></small>        <br/>    . . .    </p>    <p>    The answer is 0 as function b is taking variable by reference and return nothing or null , which is converted to 0 ( type juggling )        <br/>        <small><b>babanesma</b> on <i>19 January 2013, at 10:01:05</i></small>        <br/>    . . .    </p>    <p>    Answer is 0 because function b is not return any value. thats why 0 * 5 = 0        <br/>        <small><b>Yugant Khokhar</b> on <i>26 December 2012, at 12:12:32</i></small>        <br/>    . . .    </p>    <p>    The answer is 36..<br/>        <br/>        <small><b>yugant</b> on <i>26 December 2012, at 12:12:42</i></small>        <br/>    . . .    </p>    <p>    #1. finish        <br/>        <small><b>anonymous</b> on <i>27 October 2012, at 05:10:26</i></small>        <br/>    . . .    </p>    <p>    function a(5)<br/>{<br/>  return (NULL * 6);<br/>}<br/><br/>function b(&5)<br/>{<br/>  ++5; // no return<br/>}<br/>echo a(5); => 0        <br/>        <small><b>anonymous</b> on <i>17 September 2012, at 01:09:47</i></small>        <br/>    . . .    </p>    <p>    jkhjhjhh        <br/>        <small><b>anonymous</b> on <i>25 August 2012, at 02:08:15</i></small>        <br/>    . . .    </p>    <p>    00000000000000000000000000000000        <br/>        <small><b>anonymous</b> on <i>25 August 2012, at 02:08:07</i></small>        <br/>    . . .    </p>    <p>    xcxvx        <br/>        <small><b>anonymous</b> on <i>9 June 2012, at 09:06:42</i></small>        <br/>    . . .    </p>    <p>    1 is correct.  Only variables can be passed by reference, and in this case, a number is being passed (5).        <br/>        <small><b>anonymous</b> on <i>19 September 2011, at 07:09:04</i></small>        <br/>    . . .    </p>    <p>    This one has to be read carefully.  b() takes a reference to $number, so it does increment $number when called.  However, a() tries to use the *return* value from b(); as one is not provided, the default value NULL is returned.  This results in a() trying to calculate \"NULL * $number\", which results in a value of 0.        <br/>        <small><b>juice</b> on <i>12 April 2011, at 10:04:03</i></small>        <br/>    . . .    </p>    <p>    Option 1. is right, because function b() does not return        <br/>        <small><b>ruminir</b> on <i>4 November 2010, at 08:11:00</i></small>        <br/>    . . .    </p>    <p>    0 is the right answer as function b() does not have a return value.  If there is a return statement, the answer will be 36.        <br/>        <small><b>Liju P M</b> on <i>24 July 2010, at 05:07:00</i></small>        <br/>    . . .    </p>    <p>    1 is the correct answer, b($number) doesn\'t return a number so we are trying to return (INT)NULL*6=0*6....        <br/>        <small><b>shakedko</b> on <i>5 April 2010, at 06:04:27</i></small>        <br/>    . . .    </p>",
c166: "<p>#1 is the only one that makes sense.    <br/>    <small><b>anonymous</b> on <i>30 June 2012, at 08:06:16</i></small>    <br/>. . .</p>    <p>    1 is correct.  \"PHP into XML\" documents is key, not the other way around.        <br/>        <small><b>anonymous</b> on <i>19 September 2011, at 02:09:54</i></small>        <br/>    . . .    </p>    <p>    The question is about EMBEDDING php into xml files, but not abount parsing xml data by php. So answer 4 is wrong. The only right answer is 1.        <br/>        <small><b>anonymous</b> on <i>14 August 2011, at 07:08:03</i></small>        <br/>    . . .    </p>    <p>    It has to be 4. 1 is not at all a correct answer        <br/>        <small><b>anonymous</b> on <i>29 June 2011, at 09:06:50</i></small>        <br/>    . . .    </p>    <p>    Correct : 4        <br/>        <small><b>anonymous</b> on <i>20 April 2011, at 01:04:58</i></small>        <br/>    . . .    </p>    <p>    yes, anonymous is right, its 4        <br/>        <small><b>anonymous</b> on <i>24 January 2011, at 01:01:58</i></small>        <br/>    . . .    </p>    <p>    Answer is 4        <br/>        <small><b>anonymous</b> on <i>6 November 2010, at 04:11:22</i></small>        <br/>    . . .    </p>",
c18: "<p>$a is 20 because the by nature of it being defined outside the function it IS a global variable.  The global declaration within the function tells the function to use the global value, rather than the local value of 30.    <br/>    <small><b>jonesy</b> on <i>15 November 2012, at 12:11:27</i></small>    <br/>. . .</p>    <p>    how $a is 20 after declare global        <br/>        <small><b>anonymous</b> on <i>1 November 2012, at 12:11:20</i></small>        <br/>    . . .    </p>    <p>    correct is 120 answer number 1<br/>        <br/>        <small><b>amine ismaili alaoui</b> on <i>27 June 2010, at 07:06:16</i></small>        <br/>    . . .    </p>    <p>    $a = 20;<br/><br/>function myfunction($b) {<br/>$a = 30;<br/><br/>global $a, $c;<br/>return $c = ($b + $a); //40+ 20 (global)<br/>}<br/><br/>print myfunction(40) + $c; //60+60 ($c = global)        <br/>        <small><b>Peter</b> on <i>14 April 2010, at 11:04:01</i></small>        <br/>    . . .    </p>",
c42: "<p>Congratulates customers programmer who claims that 4:)    <br/>    <small><b>pacy</b> on <i>12 November 2012, at 12:11:26</i></small>    <br/>. . .</p>    <p>    5??? O RLY??? :D        <br/>        <small><b>pacy</b> on <i>12 November 2012, at 12:11:11</i></small>        <br/>    . . .    </p>    <p>    i think 5 is the answer ..        <br/>        <small><b>anonymous</b> on <i>16 April 2012, at 08:04:38</i></small>        <br/>    . . .    </p>    <p>    5 is correct.  2 and 3 present tempting answers, but output should be escaped not filtered.        <br/>        <small><b>anonymous</b> on <i>18 September 2011, at 06:09:40</i></small>        <br/>    . . .    </p>    <p>    Filtering all inputs are most IMPORTANT than anything else        <br/>        <small><b>anonymous</b> on <i>29 June 2011, at 07:06:16</i></small>        <br/>    . . .    </p>    <p>    this is an exam on php not js, no matter how you access your php files filtering ALL input is the only way to prevent the user to take control of the server. <br/>https://www.isc2.org/cissp/default.aspx        <br/>        <small><b>anonymous</b> on <i>5 June 2011, at 11:06:30</i></small>        <br/>    . . .    </p>    <p>    yes one of the PHP 10 commandements<br/><br/>rule 1) All input is tainted, so ALWAYS FILTER ALL INPUT<br/>rule 2) All output is risk, so - ALWAYS ESCAPE ALL OUTPUT        <br/>        <small><b>seal</b> on <i>16 May 2011, at 09:05:28</i></small>        <br/>    . . .    </p>    <p>    No matter how careful you are in writing javascript, if you forget to filter output in webforms or any kind of html output, hell is loose, so obviously the correct answer might be 2. 5 is good, but not enough, if you plan to re-embed the data send by a user in a page, it must be filtered at input but also it must be escaped for secure output (again, filtering output, not just form data). The correct answer should be \"Sanitizing all user provided input or any unsafe data before output\"        <br/>        <small><b>iongion</b> on <i>19 January 2011, at 08:01:44</i></small>        <br/>    . . .    </p>    <p>    its an attack from outsider. No use even if we wrote all javascripts so careful :P <br/>So the best option is 5. FILTER ALL INPUTS        <br/>        <small><b>anonymous</b> on <i>11 January 2011, at 02:01:50</i></small>        <br/>    . . .    </p>    <p>    Come on guys, this has nothing to do with input. Filtering output may HELP, but i agree, in general, writing careful javascript.        <br/>        <small><b>Roy</b> on <i>18 December 2010, at 11:12:02</i></small>        <br/>    . . .    </p>    <p>    Come on guys, this is not vague! They want to see if you recognise one of the ten commandments of PHP security best practices. ALLWAYS FILTER ALL INPUT. No input from an external source can be trusted..        <br/>        <small><b>Diz</b> on <i>30 September 2010, at 03:09:41</i></small>        <br/>    . . .    </p>    <p>    Such a vague answer        <br/>        <small><b>anonymous</b> on <i>28 September 2010, at 03:09:15</i></small>        <br/>    . . .    </p>    <p>    la bonne reponse est \"5\", oui on peut ecrire du code qui prend garde du javascript mais le consortum de securite PHP exige qu\'il faut suivre une approche par whitelist et non blackliste ce qui signifie qu\'il faut considÃ©rer toutes les donnee comme invalide Ã  moins qu\'il soit prouvÃ© qu\'elles sont valides (plutÃ´t que de considÃ©rer toutes les<br/>donnÃ©es comme valides, Ã  moins qu\'il soit prouvÃ© qu\'elles sont invalides).        <br/>        <small><b>amine ismaili alaoui</b> on <i>29 June 2010, at 12:06:36</i></small>        <br/>    . . .    </p>    <p>    maybe the 5 is the right answer.        <br/>        <small><b>anonymous</b> on <i>28 May 2010, at 03:05:54</i></small>        <br/>    . . .    </p>    <p>    Sure, you can write careful JS... But if your user ends up writing JS in your forms, you\'re screwed?        <br/>        <small><b>anonymous</b> on <i>17 March 2010, at 09:03:15</i></small>        <br/>    . . .    </p>",
c228: "<p>Use LOCK_EX|LOCK_NB    <br/>    <small><b>anonymous</b> on <i>17 September 2012, at 01:09:02</i></small>    <br/>. . .</p>    <p>    Use LOCK_EX|LOCK_NB instead of LOCK_EX        <br/>        <small><b>Sveta </b> on <i>26 July 2012, at 09:07:42</i></small>        <br/>    . . .    </p>    <p>    It\'s answer 2! Answer 3 is wrong - LOCK_UN would release the lock!        <br/>        <small><b>Steph</b> on <i>16 June 2011, at 12:06:07</i></small>        <br/>    . . .    </p>    <p>    Answer 2) - setting the LOCK_NB bitmask tells PHP to set a non-blocking lock on the stream.  You can then set up a while() loop to keep trying for a lock and/or carry out other tasks.        <br/>        <small><b>juice</b> on <i>12 April 2011, at 11:04:21</i></small>        <br/>    . . .    </p>    <p>    3 is correct check this :http://php.net/manual/en/function.flock.php        <br/>        <small><b>anonymous</b> on <i>6 November 2010, at 09:11:51</i></small>        <br/>    . . .    </p>    <p>    answer 2 is correct        <br/>        <small><b>shakedko</b> on <i>5 April 2010, at 06:04:03</i></small>        <br/>    . . .    </p>",
c66: "<p>1,3,4,5    <br/>    <small><b>kri</b> on <i>22 June 2012, at 08:06:31</i></small>    <br/>. . .</p>    <p>    There is no forward function. The answer is 1,3,4,5.        <br/>        <small><b>narsh</b> on <i>11 June 2012, at 11:06:11</i></small>        <br/>    . . .    </p>    <p>    The question is correct key, prev,current e next<br/>there is no forward function        <br/>        <small><b>Jorge Marinho</b> on <i>27 December 2011, at 01:12:59</i></small>        <br/>    . . .    </p>    <p>    1,3,4,5        <br/>        <small><b>anonymous</b> on <i>24 September 2011, at 10:09:12</i></small>        <br/>    . . .    </p>    <p>    forward does not exist        <br/>        <small><b>iongion</b> on <i>19 January 2011, at 08:01:53</i></small>        <br/>    . . .    </p>    <p>    It\'s key,prev,current,next . there is no forward check php.net on arrays        <br/>        <small><b>Loo</b> on <i>5 April 2010, at 05:04:03</i></small>        <br/>    . . .    </p>",
c153: "<p>#1: does not exist (http://www.sqlite.org/pragma.html).<br/><br/>#2 is DEPRECATED (http://www.sqlite.org/pragma.html#pragma_count_changes)<br/><br/>#3: good<br/><br/>#4: contrast of #3 (wrong answer)<br/><br/>#5:  does not exist (http://www.sqlite.org/pragma.html).<br/><br/>So this question is outdated (as of 2012. oct.), but possibly 2 and 3 were the good answers.    <br/>    <small><b>k</b> on <i>6 October 2012, at 09:10:08</i></small>    <br/>. . .</p>    <p>    #2, #3 because #1 and #5 don\'t exist. (PRAGMA locking_mode = NORMAL | EXCLUSIVE)        <br/>        <small><b>anonymous</b> on <i>22 August 2012, at 10:08:02</i></small>        <br/>    . . .    </p>    <p>    setting temp_store en cache_size could also improve performance.        <br/>        <small><b>Peter</b> on <i>15 April 2010, at 12:04:15</i></small>        <br/>    . . .    </p>    <p>    Options 2 and 3        <br/>        <small><b>anonymous</b> on <i>1 April 2010, at 08:04:35</i></small>        <br/>    . . .    </p>",
c3: "<p>5 is incorect, but 3 seems to be correct    <br/>    <small><b>Krzysz</b> on <i>16 April 2013, at 02:04:27</i></small>    <br/>. . .</p>    <p>    1,3,4,5 are correct        <br/>        <small><b>anonymous</b> on <i>3 January 2013, at 09:01:32</i></small>        <br/>    . . .    </p>    <p>    ${0x0} curly braces used for complex coding in PHP 5.x.<br/><br/>So, @ uses for debugging mostly, & ampersand uses for reference variable, curly braces for complex definition and 4th one is standard simple definition.        <br/>        <small><b>Farhan Wazir</b> on <i>23 December 2012, at 09:12:38</i></small>        <br/>    . . .    </p>    <p>    @$foo is a valid $foo variable with the @ error control operator  attached to it. <br/>&$variable is a valid $variable variable with the & reference operator attached to it.<br/>${0x0} uses a valid curly braces syntax. Anything inside {} will be interpolated. So 0x0 will be interpolated to 0 and stored as a variable with the name 0.        <br/>        <small><b>anonymous</b> on <i>23 October 2012, at 05:10:06</i></small>        <br/>    . . .    </p>    <p>    Correct is 1, 2, 3 and 4        <br/>        <small><b>pgomes</b> on <i>31 July 2012, at 10:07:59</i></small>        <br/>    . . .    </p>    <p>    the question doesn\'t ask which are valid variable names, only which are valid variables. Following this logic, 1,2,3,4 are all valid. But could someone please explain #3..        <br/>        <small><b>anonymous</b> on <i>13 June 2012, at 07:06:39</i></small>        <br/>    . . .    </p>    <p>    1 and 2 are not valid names too, as @ and & does not add up to name in any way. Those are language oparators IMHO        <br/>        <small><b>kikiss</b> on <i>29 May 2012, at 03:05:19</i></small>        <br/>    . . .    </p>    <p>    1,3,4 is valid        <br/>        <small><b>anonymous</b> on <i>2 March 2012, at 08:03:25</i></small>        <br/>    . . .    </p>    <p>    1 2 3 4        <br/>        <small><b>Vinicius</b> on <i>17 October 2011, at 11:10:30</i></small>        <br/>    . . .    </p>    <p>    I tested 1,2,3,4 are valid. 5 is invalid because it start with number 0.        <br/>        <small><b>Alex</b> on <i>28 August 2011, at 04:08:32</i></small>        <br/>    . . .    </p>    <p>    1, 3 and 4 are working for me...        <br/>        <small><b>anonymous</b> on <i>7 July 2011, at 04:07:44</i></small>        <br/>    . . .    </p>    <p>    1,3,4,5        <br/>        <small><b>thompson</b> on <i>26 January 2011, at 09:01:13</i></small>        <br/>    . . .    </p>    <p>    valid PHP variables are option 3 and 4.        <br/>        <small><b>pritisolanki</b> on <i>14 December 2010, at 07:12:26</i></small>        <br/>    . . .    </p>    <p>    $0x0 is not valid option because variables cannot begin with numbers        <br/>        <small><b>anonymous</b> on <i>4 November 2010, at 07:11:33</i></small>        <br/>    . . .    </p>    <p>        <br/>is also not valid<br/>Parse error: syntax error, unexpected \'&\'        <br/>        <small><b>anonymous</b> on <i>30 August 2010, at 01:08:13</i></small>        <br/>    . . .    </p>    <p>    $0x0 is invalid, cause vairbales are not allowed to begin with a number.        <br/>        <small><b>peter</b> on <i>14 April 2010, at 10:04:43</i></small>        <br/>    . . .    </p>",
c15: "<p>Answer is: 5<br/>    <br/>    <small><b>anonymous</b> on <i>7 May 2013, at 03:05:55</i></small>    <br/>. . .</p>    <p>    answer 5 is the correct one because using ==== only if we need to identical the two operands in the same value and type        <br/>        <small><b>sherif sakr </b> on <i>3 October 2011, at 09:10:06</i></small>        <br/>    . . .    </p>    <p>    good question        <br/>        <small><b>Gagan</b> on <i>14 January 2011, at 01:01:30</i></small>        <br/>    . . .    </p>    <p>    Easy! Pption 5        <br/>        <small><b>kater832</b> on <i>18 November 2010, at 07:11:59</i></small>        <br/>    . . .    </p>    <p>    Option 5 is true        <br/>        <small><b>anonymous</b> on <i>4 November 2010, at 08:11:51</i></small>        <br/>    . . .    </p>    <p>    number 5        <br/>        <small><b>amine ismaili alaoui</b> on <i>27 June 2010, at 06:06:38</i></small>        <br/>    . . .    </p>",
c177: "<p>its 1., come on!    <br/>    <small><b>anonymous</b> on <i>15 May 2013, at 05:05:15</i></small>    <br/>. . .</p>    <p>    1 is the correct answer. Do not get confused.        <br/>        <small><b>Rajanikant</b> on <i>2 February 2013, at 02:02:11</i></small>        <br/>    . . .    </p>    <p>    The link posted on 17 July shows #1 not #3 is the answer. The comment by minato is complete nonsense. <br/><br/>        <br/>        <small><b>anonymous</b> on <i>19 July 2012, at 05:07:16</i></small>        <br/>    . . .    </p>    <p>    Answer 3 is correct...:  http://codepad.viper-7.com/IzqRg5        <br/>        <small><b>anonymous</b> on <i>17 July 2012, at 07:07:53</i></small>        <br/>    . . .    </p>    <p>    Answer 1.        <br/>        <small><b>Mark</b> on <i>22 January 2012, at 02:01:19</i></small>        <br/>    . . .    </p>    <p>    the answer is 5 because to create a  node with a value of Hello, World! you need to do this $node=$title->createTextNode(\"Hello, World\"); as far as i know, and i dont see $title-> in any of the answers...        <br/>        <small><b>minato</b> on <i>6 September 2011, at 10:09:56</i></small>        <br/>    . . .    </p>    <p>    Answer 1.        <br/>        <small><b>Alex</b> on <i>30 August 2011, at 09:08:01</i></small>        <br/>    . . .    </p>    <p>    Answer is 1.        <br/>        <small><b>anonymous</b> on <i>20 April 2011, at 12:04:05</i></small>        <br/>    . . .    </p>    <p>    Answer is, see in bottom of page<br/>http://php.net/manual/ru/domdocument.save.php        <br/>        <small><b>anonymous</b> on <i>22 March 2011, at 10:03:15</i></small>        <br/>    . . .    </p>    <p>    Answer is 5.        <br/>        <small><b>Peter</b> on <i>15 April 2010, at 01:04:48</i></small>        <br/>    . . .    </p>    <p>    its suppose to be 1 but they wanted \"Hello, World!\" exclamation mark is missing ...        <br/>        <small><b>shakedko</b> on <i>5 April 2010, at 05:04:11</i></small>        <br/>    . . .    </p>",
c73: "<p>by process of elimination. #3 is right, so #1 can be eliminated. #4 is wrong, so #5 can be eliminated. that leaves #2    <br/>    <small><b>anonymous</b> on <i>6 July 2012, at 08:07:48</i></small>    <br/>. . .</p>    <p>    2 and 3        <br/>        <small><b>amine ismaili alaoui</b> on <i>30 June 2010, at 04:06:05</i></small>        <br/>    . . .    </p>",
c89: "<p>/^[hp1-5]*\-.*/i => MATCH thanks to \'i\' modifier    <br/>    <small><b>anonymous</b> on <i>14 September 2012, at 01:09:33</i></small>    <br/>. . .</p>    <p>    #5 not a match as this is a case sensitive pattern. #1 is case insensitive, that\'s what the \'i\' after the closing delimiter means.        <br/>        <small><b>anonymous</b> on <i>6 July 2012, at 11:07:27</i></small>        <br/>    . . .    </p>    <p>    #1 and #5 match        <br/>        <small><b>babs</b> on <i>27 June 2012, at 09:06:43</i></small>        <br/>    . . .    </p>    <p>    1 is correct        <br/>        <small><b>anonymous</b> on <i>15 November 2010, at 01:11:26</i></small>        <br/>    . . .    </p>    <p>    Answer 1 is correct. 5 only matches lowercase chars.        <br/>        <small><b>lathspell</b> on <i>14 July 2010, at 07:07:03</i></small>        <br/>    . . .    </p>    <p>    5 answer        <br/>        <small><b>anonymous</b> on <i>1 July 2010, at 02:07:24</i></small>        <br/>    . . .    </p>",
c170: "<p>definitely 2 : http://php.net/manual/en/function.xml-set-element-handler.php    <br/>    <small><b>Radu</b> on <i>9 May 2013, at 08:05:55</i></small>    <br/>. . .</p>    <p>    answer #4 is good        <br/>        <small><b>anonymous</b> on <i>18 December 2012, at 01:12:29</i></small>        <br/>    . . .    </p>    <p>    Answer 2 is correct.  xml_set_callback (Answer 1) does not exist.        <br/>        <small><b>anonymous</b> on <i>9 July 2012, at 09:07:53</i></small>        <br/>    . . .    </p>    <p>    Answer #2 - xml_set_element_handler        <br/>        <small><b>Martini</b> on <i>29 September 2010, at 04:09:18</i></small>        <br/>    . . .    </p>    <p>    Option 2 is the answer        <br/>        <small><b>anonymous</b> on <i>1 April 2010, at 08:04:14</i></small>        <br/>    . . .    </p>",
c25: "<p>Answer should be if($obj1 instanceof $obj2)    <br/>    <small><b>anonymous</b> on <i>29 December 2012, at 01:12:48</i></small>    <br/>. . .</p>    <p>    How 2012, actually is the option 3. PHP 5.3.        <br/>        <small><b>Gildus</b> on <i>29 September 2012, at 02:09:14</i></small>        <br/>    . . .    </p>    <p>    Again .. that\'s a difference between PHP4 and PHP5<br/>if($obj1->equals($obj2)) True if same values<br/>if($obj1 == $obj2) True only if same instance<br/><br/>PHP5<br/>if($obj1 == $obj2) True if same values<br/>if($obj1 === $obj2) True only if same instance        <br/>        <small><b>anonymous</b> on <i>13 September 2012, at 01:09:06</i></small>        <br/>    . . .    </p>    <p>    it should be 3, since the manual says comparing objects should be done that way. Instanceof is not wrong, yet the problem is, Instanceof would also say \"true\" if you compare an instance with a normal string that has the same name as the class. So only option 3 is always correct.        <br/>        <small><b>Dennis</b> on <i>7 August 2012, at 09:08:26</i></small>        <br/>    . . .    </p>    <p>    I do source to test, option 4<br/>class object {<br/>    var $a;<br/>    function object($var = 10) {<br/>        $this->a = $var;<br/>    }<br/>}<br/>class other_object {<br/>    var $a;<br/>    function object($var = 20) {<br/>        $this->a = $var;<br/>    }<br/>}<br/><br/>$obj_1 = new object(25);<br/>$obj_2 = new other_object(15);<br/><br/>if($obj_1 instanceof $obj_2)<br/>    echo \"Mesma Classe\";<br/>else<br/>    echo \"Classes Diferentes\";        <br/>        <small><b>anonymous</b> on <i>25 July 2012, at 01:07:51</i></small>        <br/>    . . .    </p>    <p>    http://php.net/manual/en/language.oop5.object-comparison.php<br/>It should be 3<br/>Cant\'t find ->equals        <br/>        <small><b>anonymous</b> on <i>25 July 2012, at 07:07:54</i></small>        <br/>    . . .    </p>    <p>    correct answer should be 3 because both variable having same instance that is the address location of both are the same.        <br/>        <small><b>Mohit Garg</b> on <i>10 July 2012, at 05:07:29</i></small>        <br/>    . . .    </p>    <p>    don\'t be thrown off by previous comment saying 5 is the answer. The answer is 3. no doubt. == only tests equivalence.        <br/>        <small><b>anonymous</b> on <i>25 June 2012, at 08:06:50</i></small>        <br/>    . . .    </p>    <p>    Answer should be 5        <br/>        <small><b>Shahriar</b> on <i>30 January 2012, at 10:01:55</i></small>        <br/>    . . .    </p>    <p>    http://lt.php.net/manual/en/language.oop5.object-comparison.php<br/>RTFM<br/>answer is 3. there is nothing to argue about        <br/>        <small><b>evll</b> on <i>16 January 2012, at 07:01:14</i></small>        <br/>    . . .    </p>    <p>    the CORRECT ANSWER is 3  Same instance of an Object        <br/>        <small><b>anonymous</b> on <i>31 May 2011, at 09:05:10</i></small>        <br/>    . . .    </p>    <p>    3 is correct        <br/>        <small><b>anonymous</b> on <i>27 April 2011, at 10:04:29</i></small>        <br/>    . . .    </p>    <p>    Geez, read the manual, folks. <br/>Not instance of the same ...<br/>but contain the SAME INSTANCE.<br/>Answer is: 3.        <br/>        <small><b>anonymous</b> on <i>31 March 2011, at 05:03:33</i></small>        <br/>    . . .    </p>    <p>    See http://stackoverflow.com/questions/55713/php-how-do-i-check-if-all-public-methods-of-two-classes-return-the-same-values<br/>Example with class cat, so answer is 5        <br/>        <small><b>anonymous</b> on <i>25 March 2011, at 03:03:15</i></small>        <br/>    . . .    </p>    <p>    var_dump( $obj1 instanceof $obj2 ); // bool(true)<br/>var_dump( $obj1 == $obj2 ); // bool(false)<br/>var_dump( $obj1 === $obj2 ); // bool(false)        <br/>        <small><b>wmdn.ru</b> on <i>3 February 2011, at 08:02:25</i></small>        <br/>    . . .    </p>    <p>    class myClass {<br/>  private $a;<br/><br/>  public function __construct( $b ) {<br/>    $this->a = $b;<br/>  }<br/>}<br/><br/>$obj1 = new myClass(10);<br/>$obj2 = new myClass(20);<br/><br/>var_dump( $obj1 instanceof $obj2 );<br/><br/>The question is \"the same instance of an object\". answer is 4        <br/>        <small><b>anonymous</b> on <i>24 January 2011, at 12:01:11</i></small>        <br/>    . . .    </p>    <p>    http://php.net/manual/en/language.oop5.object-comparison.php<br/><br/>Two instances of the same class<br/>o1 == o2 : TRUE<br/>o1 != o2 : FALSE<br/>o1 === o2 : FALSE<br/>o1 !== o2 : TRUE<br/><br/>Two references to the same instance<br/>o1 == o2 : TRUE<br/>o1 != o2 : FALSE<br/>o1 === o2 : TRUE<br/>o1 !== o2 : FALSE<br/><br/>Instances of two different classes<br/>o1 == o2 : FALSE<br/>o1 != o2 : TRUE<br/>o1 === o2 : FALSE<br/>o1 !== o2 : TRUE<br/><br/>looks like 5 )        <br/>        <small><b>anonymous</b> on <i>21 December 2010, at 08:12:05</i></small>        <br/>    . . .    </p>    <p>    Right answer is 3.        <br/>        <small><b>Faisal</b> on <i>20 October 2010, at 01:10:19</i></small>        <br/>    . . .    </p>    <p>    The correct answer is 3. it must be the SAME INSTANCE of an object. If it would only check for two instances that have the same values but are not necessarly the same instance, than the answer would be 5        <br/>        <small><b>Diz</b> on <i>28 September 2010, at 06:09:00</i></small>        <br/>    . . .    </p>    <p>    i tested : correct answer is 5        <br/>        <small><b>anonymous</b> on <i>16 August 2010, at 03:08:22</i></small>        <br/>    . . .    </p>    <p>    http://de.php.net/manual/en/language.oop5.object-comparison.php clearly says that 3. \"===\" is the correct answer. The simple \"==\" would also be true for two different instances which just have the same values in their properties.        <br/>        <small><b>lathspell</b> on <i>11 July 2010, at 08:07:30</i></small>        <br/>    . . .    </p>    <p>    correct answer is number 5        <br/>        <small><b>amine ismaili alaoui</b> on <i>28 June 2010, at 11:06:30</i></small>        <br/>    . . .    </p>    <p>    imho 3 is the correct answer        <br/>        <small><b>anonymous</b> on <i>27 January 2010, at 01:01:02</i></small>        <br/>    . . .    </p>    <p>    this answer makes no sense?  I believe the correct answer is 5        <br/>        <small><b>anonymous</b> on <i>5 January 2010, at 07:01:58</i></small>        <br/>    . . .    </p>",
c113: "<p>Option #1    <br/>    <small><b>anonymous</b> on <i>19 November 2010, at 01:11:03</i></small>    <br/>. . .</p>",
c64: "<p>Answer 1. \"Smith\" is correct. <br/>    <br/>    <small><b>anonymous</b> on <i>20 May 2011, at 11:05:19</i></small>    <br/>. . .</p>    <p>    Answer 1. \"Smith\" is correct.        <br/>        <small><b>lathspell</b> on <i>11 July 2010, at 09:07:06</i></small>        <br/>    . . .    </p>",
c217: "<p>http://php.net/manual/en/wrappers.php.php    <br/>    <small><b>anonymous</b> on <i>28 January 2011, at 07:01:54</i></small>    <br/>. . .</p>    <p>    STDIN is constant the represent the input buffer        <br/>        <small><b>shakedko</b> on <i>5 April 2010, at 06:04:51</i></small>        <br/>    . . .    </p>",
c16: "<p>die and exit terminate the execution while __halt_compiler() Halts the execution of the compiler. so 2 4 and 5 are correct.    <br/>    <small><b>jenish</b> on <i>13 October 2012, at 08:10:16</i></small>    <br/>. . .</p>    <p>    cool        <br/>        <small><b>Cool</b> on <i>8 July 2012, at 10:07:50</i></small>        <br/>    . . .    </p>    <p>    hi        <br/>        <small><b>anonymous</b> on <i>16 February 2012, at 06:02:11</i></small>        <br/>    . . .    </p>    <p>    2, 4 and 5 are all valid: 4) can be used to allow non-PHP data to be embedded below the actual PHP.        <br/>        <small><b>juice</b> on <i>31 January 2011, at 01:01:43</i></small>        <br/>    . . .    </p>    <p>    2., 4., and 5. are the correct answers!<br/>(note that the text says \"Choose 3 answers\")        <br/>        <small><b>lathspell</b> on <i>11 July 2010, at 08:07:41</i></small>        <br/>    . . .    </p>    <p>    2 and 5 are the correct answer        <br/>        <small><b>amine ismaili alaoui</b> on <i>27 June 2010, at 06:06:36</i></small>        <br/>    . . .    </p>",
c227: "<p>STDIN, STDOUT, and STDERR constants in PHP    <br/>    <small><b>Sveta </b> on <i>26 July 2012, at 09:07:18</i></small>    <br/>. . .</p>    <p>    one does not simply use CLI... ;) - 3 is correct.        <br/>        <small><b>anonymous</b> on <i>18 July 2012, at 07:07:54</i></small>        <br/>    . . .    </p>    <p>    #3 is correct        <br/>        <small><b>anonymous</b> on <i>28 October 2010, at 11:10:19</i></small>        <br/>    . . .    </p>    <p>    Option 3 <br/>STDIN, STDOUT, and STDERR constants in PHP 5        <br/>        <small><b>Donia</b> on <i>19 April 2010, at 03:04:24</i></small>        <br/>    . . .    </p>",
c220: "<p>yes,3 is right : <br/>ftp://<br/>ftps://<br/><br/>ftp:// -- ftps:// â€” Accessing FTP(s) URLs<br/>http://www.php.net/manual/en/wrappers.ftp.php    <br/>    <small><b>Radu</b> on <i>9 May 2013, at 11:05:19</i></small>    <br/>. . .</p>    <p>    PHP supports the FTP and FTPS protocols.  It does not support SFTP        <br/>        <small><b>juice</b> on <i>12 April 2011, at 11:04:58</i></small>        <br/>    . . .    </p>    <p>    3 is my answer        <br/>        <small><b>anonymous</b> on <i>6 August 2010, at 03:08:35</i></small>        <br/>    . . .    </p>    <p>    http://www.php.net/manual/en/wrappers.php        <br/>        <small><b>devrsm.net</b> on <i>27 June 2010, at 09:06:12</i></small>        <br/>    . . .    </p>    <p>    it is sftp        <br/>        <small><b>aurimas</b> on <i>17 May 2010, at 12:05:34</i></small>        <br/>    . . .    </p>    <p>    I think ftps:// is a non existing stream wrapper        <br/>        <small><b>anonymous</b> on <i>22 April 2010, at 08:04:32</i></small>        <br/>    . . .    </p>",
c107: "<p>yes it is Answer: 4.    <br/>    <small><b>anonymous</b> on <i>15 November 2010, at 02:11:05</i></small>    <br/>. . .</p>    <p>    Answer 4 is correct        <br/>        <small><b>anonymous</b> on <i>5 November 2010, at 05:11:59</i></small>        <br/>    . . .    </p>",
c77: "<p>I think that the key word of question is \"pattern\". explode doesn\'t work with reg. expr. patterns, preg_split does. By the way \"-=-\" is a valid pattern. It splits string \'a=b\' with array(\'a\' => \'b\'). So my answer is 3.    <br/>    <small><b>ignat</b> on <i>17 October 2012, at 06:10:29</i></small>    <br/>. . .</p>    <p>    ALL FALSE ... so It must be 4 (missing comma is not part of the test apparently)        <br/>        <small><b>anonymous</b> on <i>14 September 2012, at 01:09:58</i></small>        <br/>    . . .    </p>    <p>    if missing comma in the 4th answer is not a misprint, than #2 is ok, otherwise #4 is better answer        <br/>        <small><b>anonymous</b> on <i>6 September 2012, at 06:09:01</i></small>        <br/>    . . .    </p>    <p>    #4 is right asumming the missing comma is a typo. #3 can never be right because the \'-\' on each side is the delimiter, so won\'t be matched.        <br/>        <small><b>anonymous</b> on <i>13 July 2012, at 09:07:09</i></small>        <br/>    . . .    </p>    <p>    #3 is correct answer, and #4 will never be correct because it misses \"comma\" between the pattern and string        <br/>        <small><b>babs</b> on <i>9 July 2012, at 09:07:18</i></small>        <br/>    . . .    </p>    <p>    Correct is 4. In the number 3, the regular expression is wrong. In the number 2, lenght of string is unknown and it maybe have more than \"-=-\" pattern.        <br/>        <small><b>Rafael M. Salvioni</b> on <i>25 January 2012, at 02:01:11</i></small>        <br/>    . . .    </p>    <p>    The lenght of the string is unknown. Let take \'abcde-=-qwerty\'<br/>2: Array ([0] => abcde [1] => -=-qw [2] => erty) -> WRONG.<br/>3: Array ([0] => abcde- [1] => -qwerty) -> much better than 2, but also WRONG.<br/>4: syntax error. But if there will be a comma it is the best answer.<br/>So there is a mistake in answers. The correct answer is 3 or 4, but never 1 and 2.        <br/>        <small><b>anonymous</b> on <i>9 August 2011, at 02:08:25</i></small>        <br/>    . . .    </p>    <p>    Typo in answer #4, but it is the correct one. #2 does not remove the \"-=-\" pattern and #3 leaves both \"-\" since they are used as regex delimiter.        <br/>        <small><b>Martini</b> on <i>29 September 2010, at 02:09:43</i></small>        <br/>    . . .    </p>    <p>    i think 4        <br/>        <small><b>anonymous</b> on <i>16 August 2010, at 05:08:25</i></small>        <br/>    . . .    </p>    <p>    answer 2 is correct<br/>results:<br/>$string = \'abc-=-def\';<br/>2 => Array ( [0] => abc [1] => -=- [2] => def )<br/>3 => Array ( [0] => abc- [1] => -def ) <br/>4 => syntax error missing \',\'        <br/>        <small><b>anonymous</b> on <i>29 July 2010, at 11:07:51</i></small>        <br/>    . . .    </p>    <p>    explode(\"-=-\" $string); is the right answer as preg_split here misses the delimiter(or will mis-interpret \'-\' as delimiter)        <br/>        <small><b>Liju P M</b> on <i>20 July 2010, at 08:07:39</i></small>        <br/>    . . .    </p>    <p>    2. does not return the first element due to the strpos -> WRONG<br/>3. lacks the \"/\" delimiter on both sides of the regex and thus splits just on \"=\" -> WRONG<br/>4. there is a comma missing before $string, else it would be the correct answer -> MAYBE?        <br/>        <small><b>lathspell</b> on <i>11 July 2010, at 10:07:22</i></small>        <br/>    . . .    </p>    <p>    coorect answer is number \"2\"        <br/>        <small><b>amine ismaili alaoui</b> on <i>30 June 2010, at 07:06:05</i></small>        <br/>    . . .    </p>    <p>    The answer is 4. just test the code in PHP file        <br/>        <small><b>anonymous</b> on <i>29 May 2010, at 02:05:53</i></small>        <br/>    . . .    </p>",
c207: "<p>I think - 2    <br/>    <small><b>anur</b> on <i>20 April 2013, at 01:04:18</i></small>    <br/>. . .</p>    <p>    if #3 is eliminated as an answer because it will not work on FAT32, then #1 should be ruled out also because as the manual says (...it can be used on virtually any system (including most Unix derivates..))        <br/>        <small><b>anonymous</b> on <i>20 June 2012, at 08:06:28</i></small>        <br/>    . . .    </p>    <p>    3 is correct.  See the first note at http://es.php.net/manual/en/function.flock.php ... \"flock() uses mandatory locking instead of advisory locking on Windows\".        <br/>        <small><b>anonymous</b> on <i>19 September 2011, at 07:09:27</i></small>        <br/>    . . .    </p>    <p>    PHP supports locking on \"virtually every platform, including Windows\".  So the answer is #2, though it\'s worth noting that some options (e.g. LOCK_NB) may not work on some platforms.        <br/>        <small><b>juice</b> on <i>12 April 2011, at 11:04:35</i></small>        <br/>    . . .    </p>    <p>    i think is 2        <br/>        <small><b>anonymous</b> on <i>7 November 2010, at 06:11:12</i></small>        <br/>    . . .    </p>    <p>    I think 2 is right:<br/>flock() allows you to perform a simple reader/writer model which can be used on virtually every platform (including most Unix derivatives and even Windows).<br/><br/>May only be used on file pointers returned by fopen() for local files, or file pointers pointing to userspace streams that implement the streamWrapper::stream_lock() method.        <br/>        <small><b>anonymous</b> on <i>28 October 2010, at 11:10:15</i></small>        <br/>    . . .    </p>    <p>    i think it is #1        <br/>        <small><b>Martini</b> on <i>29 September 2010, at 05:09:44</i></small>        <br/>    . . .    </p>    <p>    i think i is right        <br/>        <small><b>anonymous</b> on <i>29 May 2010, at 10:05:29</i></small>        <br/>    . . .    </p>    <p>    I think its 1 because the question talks about --> assured to work <-- and flock can\'t work with fat32 (means cant work with windows)        <br/>        <small><b>shakedko</b> on <i>5 April 2010, at 05:04:52</i></small>        <br/>    . . .    </p>",
c233: "<p>    1 is true. In code below is \"$test = null;\" - maybe this is why this code don\'t work.        <br/>        <small><b>anur</b> on <i>20 April 2013, at 05:04:55</i></small>        <br/>    . . .    </p>        <p>        Always; objects are passed by reference in PHP5            <br/>            <small><b>Sveta </b> on <i>26 July 2012, at 09:07:05</i></small>            <br/>        . . .        </p>        <p>        Always Ultra - the PHP doc says:<br/>\"When an object is sent by argument, returned or assigned to another variable, the different variables are not aliases: they hold a copy of the identifier, which points to the same object.\"            <br/>            <small><b>anonymous</b> on <i>18 July 2012, at 07:07:17</i></small>            <br/>        . . .        </p>        <p>        option 1:<br/><br/>function x($a) {<br/>    $a->x = 9;<br/>}<br/><br/>class a {<br/>    public $x;<br/>}<br/><br/><br/>$a = new a();<br/>$a->x = 1;<br/>echo $a->x;<br/>x($a);<br/><br/>output: 19, not 11            <br/>            <small><b>anonymous</b> on <i>18 May 2012, at 11:05:05</i></small>            <br/>        . . .        </p>        <p>        Answer 4. Try this code with and without the \'&\' in the function argument...<br/><br/>class myTest<br/>{<br/>public $test = 1;<br/>}<br/><br/>function testObj(myTest &$test) <br/>{<br/>$test->test = 2;<br/>$test = null;<br/>}<br/><br/>$test = new myTest();<br/>testObj($test);<br/>echo $test->test;            <br/>            <small><b>anonymous</b> on <i>11 February 2012, at 11:02:52</i></small>            <br/>        . . .        </p>        <p>        Answer 4. Read the comments http://www.php.net/manual/en/language.oop5.references.php#101900            <br/>            <small><b>anonymous</b> on <i>18 August 2011, at 01:08:55</i></small>            <br/>        . . .        </p>        <p>        http://www.php.net/manual/en/language.references.pass.php#92348 - answer is 1            <br/>            <small><b>anonymous</b> on <i>5 August 2011, at 08:08:31</i></small>            <br/>        . . .        </p>        <p>        I\'d too say 4. But I\'m not quite sure. At least it definately isn\'t 1.!            <br/>            <small><b>Steph</b> on <i>20 June 2011, at 07:06:17</i></small>            <br/>        . . .        </p>        <p>        1 is not strictly true. See http://php.net/manual/en/language.oop5.references.php<br/>Correct answer is 4 I believe.            <br/>            <small><b>anonymous</b> on <i>21 April 2011, at 10:04:48</i></small>            <br/>        . . .        </p>        <p>        Correct 1. Always, Objects are passed by reference in PHP5            <br/>            <small><b>anonymous</b> on <i>18 November 2010, at 02:11:30</i></small>            <br/>        . . .        </p>        <p>        Always            <br/>            <small><b>anonymous</b> on <i>17 March 2010, at 07:03:32</i></small>            <br/>        . . .        </p>",
c54: "<p>    Answer is 1        <br/>        <small><b>Supriya</b> on <i>29 June 2012, at 06:06:47</i></small>        <br/>    . . .    </p>        <p>        Whatever happened to pride in your work? The number of errors is astonishing and yet every error has been discovered and put in the comments.            <br/>            <small><b>anonymous</b> on <i>12 June 2012, at 05:06:00</i></small>            <br/>        . . .        </p>        <p>        http://codepad.viper-7.com/F4A2qe            <br/>            <small><b>kevin</b> on <i>29 April 2012, at 09:04:09</i></small>            <br/>        . . .        </p>        <p>        actually,this strtoupper is a built in function to transform alpha-num to upper case.the explode function will leave space  betwwen the words. so, the answer is 1            <br/>            <small><b>rwanda</b> on <i>4 November 2011, at 10:11:38</i></small>            <br/>        . . .        </p>        <p>        The answer is #1.  Fix your site!  THE QUICK BROWN FOX JUMPED OVER THE LAZY DOG.            <br/>            <small><b>anonymous</b> on <i>31 July 2011, at 06:07:22</i></small>            <br/>        . . .        </p>        <p>        answer is 1            <br/>            <small><b>anonymous</b> on <i>17 July 2011, at 10:07:36</i></small>            <br/>        . . .        </p>        <p>        1 is the correct answer! Don\'t believe it? Go and try!            <br/>            <small><b>Steph</b> on <i>17 June 2011, at 11:06:20</i></small>            <br/>        . . .        </p>        <p>        Answer is #1, but really? either someone hacked this site or...            <br/>            <small><b>anonymous</b> on <i>6 June 2011, at 12:06:27</i></small>            <br/>        . . .        </p>        <p>        it must be 1<br/>            <br/>            <small><b>anonymous</b> on <i>5 February 2011, at 07:02:04</i></small>            <br/>        . . .        </p>        <p>        \"THE QUICK BROWN FOX JUMPED OVER THE LAZY DOG\" is the right answer!            <br/>            <small><b>Liju P M</b> on <i>16 July 2010, at 10:07:09</i></small>            <br/>        . . .        </p>        <p>        Answer is 1.            <br/>            <small><b>Peter</b> on <i>14 April 2010, at 01:04:24</i></small>            <br/>        . . .        </p>        <p>        I got the same value as the previous commenter (number 2 is correct)            <br/>            <small><b>anonymous</b> on <i>5 January 2010, at 09:01:57</i></small>            <br/>        . . .        </p>        <p>        When i executed this code i obtains THE QUICK BROWN FOX JUMPED OVER THE LAZY DOG. <br/>            <br/>            <small><b>Parmah</b> on <i>5 January 2010, at 09:01:24</i></small>            <br/>        . . .        </p>",
c214: "<p>    http://php.net/manual/en/intro.stream.php<br/>A wrapper is additional code which tells the stream how to handle specific protocols/encodings.        <br/>        <small><b>anonymous</b> on <i>28 January 2011, at 06:01:52</i></small>        <br/>    . . .    </p>        <p>        wrappers is the answer            <br/>            <small><b>anonymous</b> on <i>23 May 2010, at 09:05:10</i></small>            <br/>        . . .        </p>",
c147: "<p>    #5 is right . Plz check http://php.net/manual/en/internals2.opcodes.instanceof.php        <br/>        <small><b>Vinod Kumar</b> on <i>1 July 2013, at 12:07:49</i></small>        <br/>    . . .    </p>        <p>        2 will never be the correct answer, it uses strtolower, so the name will always be lowercase and it tries to match with something with capital letters in.            <br/>            <small><b>Stephan</b> on <i>20 March 2013, at 08:03:46</i></small>            <br/>        . . .        </p>        <p>        == is for equivalent, not identical            <br/>            <small><b>anonymous</b> on <i>19 July 2012, at 04:07:45</i></small>            <br/>        . . .        </p>        <p>        The question is in IDENTICAL copy of the code. get_class() in PHP 4 returns class name in lowercase, but in PHP 5 it returns name as it was declared. So to indentically copy code we must use 2 answer, but NOT 5 one.            <br/>            <small><b>anonymous</b> on <i>14 August 2011, at 05:08:21</i></small>            <br/>        . . .        </p>        <p>        5 is the correct answer for sure            <br/>            <small><b>anonymous</b> on <i>29 June 2011, at 09:06:42</i></small>            <br/>        . . .        </p>        <p>        The correct answer is 2. Original condition will never evaluate to true in PHP4 because get_class() in PHP4 returns class name in lower case letters. So it\'ll never be equal to \'MyClass\'. While 5th condition (myObj instanceof MyClass) will evaluate to true if $myObj is an instance of MyClass which makes code do not perform identical to original. In addition strtolower(get_class()) of PHP5 is identical to get_class() of PHP4.            <br/>            <small><b>anonymous</b> on <i>23 March 2011, at 02:03:08</i></small>            <br/>        . . .        </p>        <p>        5 is a correct answer            <br/>            <small><b>anonymous</b> on <i>15 November 2010, at 09:11:45</i></small>            <br/>        . . .        </p>        <p>        2 is the right answer.            <br/>            <small><b>Faisal</b> on <i>31 October 2010, at 11:10:03</i></small>            <br/>        . . .        </p>        <p>        I think #5. How could forced-lowercase ever match \"MyClass\" including uppercase chars?            <br/>            <small><b>Martini</b> on <i>29 September 2010, at 03:09:20</i></small>            <br/>        . . .        </p>        <p>        In PHP4 is_a() would have been the equivalent to 5. So 2. really seems the correct one.            <br/>            <small><b>lathspell</b> on <i>14 July 2010, at 08:07:35</i></small>            <br/>        . . .        </p>        <p>        Prior to PHP5, get_class returned the class name in lower case letters. So, the answer is 2, if we want to reproduce the function exactly, in my opinion.            <br/>            <small><b>Johnny Appleseed</b> on <i>11 June 2010, at 02:06:10</i></small>            <br/>        . . .        </p>        <p>        5 is the correct answer            <br/>            <small><b>shakedko</b> on <i>5 April 2010, at 05:04:50</i></small>            <br/>        . . .        </p>",
c181: "<p>    I checked it in PHP. Correct is 3        <br/>        <small><b>stnw</b> on <i>15 June 2013, at 07:06:22</i></small>        <br/>    . . .    </p>        <p>        3 is right<br/>5 is wrong because without the trim there are whitespaces in the beginning from the html formatting            <br/>            <small><b>Radu</b> on <i>9 May 2013, at 10:05:30</i></small>            <br/>        . . .        </p>        <p>        a 3            <br/>            <small><b>anonymous</b> on <i>20 April 2013, at 11:04:58</i></small>            <br/>        . . .        </p>        <p>        3 is correct            <br/>            <small><b>zc</b> on <i>4 April 2013, at 04:04:42</i></small>            <br/>        . . .        </p>        <p>        3 is correct ... strip_tags(($p->asXML())) would be rong because it will return \"\nCONTENT\n\"            <br/>            <small><b>anonymous</b> on <i>17 September 2012, at 11:09:10</i></small>            <br/>        . . .        </p>        <p>        I get why #3 is correct, but why is #5 wrong? There is no leading or trailing whitespace            <br/>            <small><b>anonymous</b> on <i>8 July 2012, at 03:07:27</i></small>            <br/>        . . .        </p>        <p>        Answer: 3.            <br/>            <small><b>Alex</b> on <i>30 August 2011, at 09:08:21</i></small>            <br/>        . . .        </p>        <p>        number 3            <br/>            <small><b>anonymous</b> on <i>20 April 2011, at 01:04:30</i></small>            <br/>        . . .        </p>        <p>        answer #3            <br/>            <small><b>Martini</b> on <i>29 September 2010, at 04:09:05</i></small>            <br/>        . . .        </p>        <p>        3 is correct            <br/>            <small><b>shakedko</b> on <i>5 April 2010, at 05:04:30</i></small>            <br/>        . . .        </p>",
c229: "<p>    Your dog doesn\'t know a thing about PHP        <br/>        <small><b>anonymous</b> on <i>19 July 2012, at 05:07:23</i></small>        <br/>    . . .    </p>        <p>        I showed the function to my dog, and he barked 4 times, so Answer Number 4 is correct. (10)            <br/>            <small><b>anonymous</b> on <i>18 July 2012, at 07:07:37</i></small>            <br/>        . . .        </p>        <p>        $apples() returns a value of 5, but this return value is *not* assigned to $apples.  So $apples retains it\'s original value of 10.            <br/>            <small><b>juice</b> on <i>12 April 2011, at 11:04:37</i></small>            <br/>        . . .        </p>        <p>        answer #4 yes, because it\'s not a  parameter            <br/>            <small><b>Martini</b> on <i>29 September 2010, at 06:09:41</i></small>            <br/>        . . .        </p>        <p>        Answer â„–4            <br/>            <small><b>anonymous</b> on <i>23 May 2010, at 09:05:13</i></small>            <br/>        . . .        </p>        <p>        is doesn\'t matter that apple() function exist, because we don\'t really get a return value from it to $apples , so 4            <br/>            <small><b>shakedko </b> on <i>5 April 2010, at 06:04:49</i></small>            <br/>        . . .        </p>",
c47: "<p>    http://shiflett.org/articles/cross-site-request-forgeries        <br/>        <small><b>anonymous</b> on <i>18 September 2011, at 07:09:29</i></small>        <br/>    . . .    </p>        <p>        the correct answer id number 2...            <br/>            <small><b>amine ismaili alaoui</b> on <i>29 June 2010, at 08:06:20</i></small>            <br/>        . . .        </p>",
c44: "<p>    where is the Solveit-button?        <br/>        <small><b>anonymous</b> on <i>5 September 2012, at 11:09:52</i></small>        <br/>    . . .    </p>        <p>        answer is 1.            <br/>            <small><b>anonymous</b> on <i>16 August 2012, at 08:08:52</i></small>            <br/>        . . .        </p>        <p>        Answer 1 is correct. Only trusted var would be _SESSION. People say that 5 might be correct, but _SERVER contains user input like the GET / POST vars which can be manipulated by the client.            <br/>            <small><b>anonymous</b> on <i>8 July 2012, at 03:07:42</i></small>            <br/>        . . .        </p>        <p>        1 is correct.  Some $_SERVER contents can be manipulated.            <br/>            <small><b>anonymous</b> on <i>18 September 2011, at 07:09:16</i></small>            <br/>        . . .        </p>        <p>        I will go with 1) none of the above. The only super global to trust (all though bad programming habit) is the one that is generated by the dev / app ($_SESSIONS) but you will still need to compare. so all other $_XXXXXX cannot be trusted            <br/>            <small><b>seal</b> on <i>16 May 2011, at 09:05:04</i></small>            <br/>        . . .        </p>        <p>        i think it may be 1            <br/>            <small><b>anonymous</b> on <i>5 February 2011, at 06:02:31</i></small>            <br/>        . . .        </p>        <p>        Obviously the answer is 1, $_ENV is mentioned in the docs why it is insecure, $_SERVER is also not secure, for example directly using $_SERVER[\'PHP_SELF\'] can be used by malicious users.            <br/>            <small><b>iongion</b> on <i>19 January 2011, at 08:01:21</i></small>            <br/>        . . .        </p>        <p>        not all $_SERVER values can be trusted, some rely on the header values sent by the browser.            <br/>            <small><b>Roy</b> on <i>18 December 2010, at 11:12:29</i></small>            <br/>        . . .        </p>        <p>        correct is 5            <br/>            <small><b>tranvantriet</b> on <i>19 November 2010, at 04:11:16</i></small>            <br/>        . . .        </p>        <p>        As written in the php documentation $_ENV is not a trusted source. I think the right answer is 1            <br/>            <small><b>anonymous</b> on <i>14 November 2010, at 10:11:07</i></small>            <br/>        . . .        </p>        <p>        answer is 5            <br/>            <small><b>anonymous</b> on <i>31 October 2010, at 08:10:11</i></small>            <br/>        . . .        </p>        <p>        answer is 5            <br/>            <small><b>anonymous</b> on <i>28 October 2010, at 11:10:57</i></small>            <br/>        . . .        </p>        <p>        answer is 1.            <br/>            <small><b>Peter</b> on <i>14 April 2010, at 01:04:10</i></small>            <br/>        . . .        </p>",
c68: "<p>    list        <br/>        <small><b>devrsm.net</b> on <i>27 June 2010, at 09:06:26</i></small>        <br/>    . . .    </p>",
c87: "<p>    #1 is correct answer, right parse_str exists for this task        <br/>        <small><b>babs</b> on <i>9 July 2012, at 09:07:46</i></small>        <br/>    . . .    </p>        <p>        parse_str() exists precisely for this task.            <br/>            <small><b>anonymous</b> on <i>6 July 2012, at 11:07:36</i></small>            <br/>        . . .        </p>        <p>        #1. Obviously.            <br/>            <small><b>anonymous</b> on <i>12 June 2012, at 09:06:00</i></small>            <br/>        . . .        </p>        <p>        http://codepad.viper-7.com/ilVA0N            <br/>            <small><b>kevin</b> on <i>29 April 2012, at 10:04:27</i></small>            <br/>        . . .        </p>        <p>        The correct syntax would be parse_str($string, $arr);<br/>var_dump($arr);<br/>...try it out!            <br/>            <small><b>anonymous</b> on <i>8 February 2012, at 05:02:39</i></small>            <br/>        . . .        </p>        <p>        2 is the answer, i am test it            <br/>            <small><b>anonymous</b> on <i>15 March 2011, at 03:03:02</i></small>            <br/>        . . .        </p>        <p>        2 is the answer, to see the result of parse_str($string, $output), don\'t use echo $output but var_dump($output)            <br/>            <small><b>drab</b> on <i>30 November 2010, at 09:11:29</i></small>            <br/>        . . .        </p>        <p>        i think 3 is the answer.<br/>Put in php parse_str($string, $output), echo $output an see what it gets            <br/>            <small><b>andrei </b> on <i>7 November 2010, at 06:11:21</i></small>            <br/>        . . .        </p>        <p>        2 IS MY ANSWER            <br/>            <small><b>anonymous</b> on <i>16 August 2010, at 05:08:25</i></small>            <br/>        . . .        </p>",
c49: "<p>    http://shiflett.org/articles/session-fixation : Always regenerate the session identifier on the receiving script, regardless of the user\'s state.<br/>So answer is 4: The session key should be regenerated        <br/>        <small><b>anonymous</b> on <i>14 June 2012, at 02:06:01</i></small>        <br/>    . . .    </p>        <p>        la bonne reponse est numero 4, on doit utiliser la fonction session_regenerate_id() pour regenerer une nouvelle cle de session            <br/>            <small><b>amine ismaili alaoui</b> on <i>30 June 2010, at 12:06:22</i></small>            <br/>        . . .        </p>",
c224: "<p>    stream_get_meta_data        <br/>        <small><b>Sveta </b> on <i>26 July 2012, at 09:07:21</i></small>        <br/>    . . .    </p>        <p>        2: http://php.net/manual/de/function.stream-get-meta-data.php            <br/>            <small><b>Steph</b> on <i>16 June 2011, at 12:06:27</i></small>            <br/>        . . .        </p>        <p>        stream_get_meta_data            <br/>            <small><b>anonymous</b> on <i>17 March 2010, at 07:03:03</i></small>            <br/>        . . .        </p>",
c135: "<p>    the php 5.3 exam wont be have questions like this any more (differences between php4 and php5)        <br/>        <small><b>anonymous</b> on <i>9 July 2012, at 07:07:44</i></small>        <br/>    . . .    </p>        <p>        1 and 3 should be the ones            <br/>            <small><b>anonymous</b> on <i>29 June 2011, at 09:06:12</i></small>            <br/>        . . .        </p>        <p>        1 and 3 are correct from php.net docs: <br/>array_intersect_key => (PHP 5 >= 5.1.0)<br/>array_diff_key => (PHP 5 >= 5.1.0)            <br/>            <small><b>@DsarrollandoWeb</b> on <i>9 June 2011, at 04:06:40</i></small>            <br/>        . . .        </p>        <p>        Answer: 1,3 from the php.net            <br/>            <small><b>Loo</b> on <i>5 April 2010, at 06:04:23</i></small>            <br/>        . . .        </p>",
c34: "<p>    2,4,5 are true. absolutely        <br/>        <small><b>pegui</b> on <i>6 December 2012, at 04:12:45</i></small>        <br/>    . . .    </p>        <p>        ** If a particular child class extends from it => FALSE, we can\'t says neither \"if\" or \"how many\" class extends (or implement)another one with the instanceof keyword<br/>** If they are an instance of a particular interface => True Because it can be an instance of a certain Class wich implements a certain Interface (a instanceof b is true for exemple if a extend c, and c implement b )            <br/>            <small><b>anonymous</b> on <i>13 September 2012, at 01:09:48</i></small>            <br/>        . . .        </p>        <p>        ** If they are an abstract class => instanceof only check if it is a instanceof .. therefore this is a wrong answer            <br/>            <small><b>anonymous</b> on <i>13 September 2012, at 01:09:37</i></small>            <br/>        . . .        </p>        <p>        ** If they have a particular parent class => TRUE of course, coz if A insstance of B and B extend C ... A will by instanceof C<br/>** If they are an instance of a particular class => TRUE ... no doubt about that !            <br/>            <small><b>anonymous</b> on <i>13 September 2012, at 01:09:45</i></small>            <br/>        . . .        </p>        <p>        Poorly worded. With instanceof we can check a variable if it is an instance of a class or an interface. But we can\'t check if it is an instance of a variable. Number 1 is wrong because of the wording. Number 2 is right, even though technically instanceof would confirm if the variable is an instance of a class that implements the interface. The interface itself cannot be directly instantiated.            <br/>            <small><b>anonymous</b> on <i>19 July 2012, at 03:07:41</i></small>            <br/>        . . .        </p>        <p>        #1 is wrong you can\'t instanciate an interface hten right answer is 2,4 and 5            <br/>            <small><b>babs</b> on <i>9 July 2012, at 09:07:57</i></small>            <br/>        . . .        </p>        <p>        To me #1 is not wrong, just 2,4,5 are better.            <br/>            <small><b>anonymous</b> on <i>6 July 2012, at 08:07:09</i></small>            <br/>        . . .        </p>        <p>        1, 4, 5 is the correct answer.            <br/>            <small><b>Supriya</b> on <i>29 June 2012, at 06:06:57</i></small>            <br/>        . . .        </p>        <p>        2,4,5. tricky language used meant to trick you into choosing number 1. But instanceof check instances only            <br/>            <small><b>anonymous</b> on <i>25 June 2012, at 08:06:56</i></small>            <br/>        . . .        </p>        <p>        Ca ne peut pas Ãªtre la 2, on n\'instancie pas une interface.<br/>rep: 1,4,5            <br/>            <small><b>babs</b> on <i>21 June 2012, at 11:06:24</i></small>            <br/>        . . .        </p>        <p>        I\'m going with 2,4,5 because typehinting wont give any clues to a class extending the hint or the nature of the class being passed or evaluated. Actually, having put this in writing I am now 100% sure that the answer is 2,4 & 5. Anyone disagree?            <br/>            <small><b>anonymous</b> on <i>8 February 2012, at 04:02:30</i></small>            <br/>        . . .        </p>        <p>        2, 4, 5?            <br/>            <small><b>ing</b> on <i>15 November 2010, at 12:11:47</i></small>            <br/>        . . .        </p>        <p>        je ne suis pas sur mais je crois que les trois bonnes reponse sont 1, 4 et 5, parce que en fait on ne peut pas instancier une interface et on ne peut pas verifier une classe abstraite avec instanceof parce qu\'elle ne sera jamais instancier            <br/>            <small><b>amine ismaili alaoui</b> on <i>28 June 2010, at 07:06:43</i></small>            <br/>        . . .        </p>",
c40: "<p>    2,4        <br/>        <small><b>anonymous</b> on <i>16 August 2010, at 04:08:28</i></small>        <br/>    . . .    </p>        <p>        les bonne reponse sont 2 et 4, parceque tous ce qui n\'est pas interface...            <br/>            <small><b>amine ismaili alaoui</b> on <i>29 June 2010, at 11:06:53</i></small>            <br/>        . . .        </p>",
c195: "<p>    is \"forces column names to a specific case\" and \" Ensuring that all columns are of a particular case\" realy the same? the first alters the column names, while the latter might mean the fetched data itself...        <br/>        <small><b>rob</b> on <i>1 May 2013, at 07:05:51</i></small>        <br/>    . . .    </p>        <p>        yes, the link below confirms #2, not #3.            <br/>            <small><b>anonymous</b> on <i>19 July 2012, at 05:07:49</i></small>            <br/>        . . .        </p>        <p>        According to the URL below, PDO::ATTR_CASE forces column names to a specific case.  So the answer is 2)            <br/>            <small><b>juice</b> on <i>12 April 2011, at 11:04:33</i></small>            <br/>        . . .        </p>        <p>        Ans: 2            <br/>            <small><b>Nur Ahmed</b> on <i>20 March 2011, at 01:03:52</i></small>            <br/>        . . .        </p>        <p>        answer is 3. check http://php.net/manual/en/pdo.setattribute.php            <br/>            <small><b>anonymous</b> on <i>2 December 2010, at 08:12:24</i></small>            <br/>        . . .        </p>        <p>        2 is correct            <br/>            <small><b>shakedko</b> on <i>5 April 2010, at 05:04:28</i></small>            <br/>        . . .        </p>",
c72: "<p>    Its simple when you use isset() construction, its parameter can\'t be method, but only variable. In given answers there is only one answer w/ variable.        <br/>        <small><b>anonymous</b> on <i>6 June 2013, at 06:06:22</i></small>        <br/>    . . .    </p>        <p>        $msg{$i} is the answer.The reason is simple .there are two ways we can split a string into array.a) str_split and b)$msg[0],$msg[1]... will print the string as an array.            <br/>            <small><b>anonymous</b> on <i>5 January 2013, at 12:01:33</i></small>            <br/>        . . .        </p>        <p>        this is hard to answer because it\'s not clear to me what the question is.            <br/>            <small><b>anonymous</b> on <i>6 July 2012, at 08:07:24</i></small>            <br/>        . . .        </p>        <p>        Correct answer is 1. \"$msg{$i}\"            <br/>            <small><b>lathspell</b> on <i>11 July 2010, at 09:07:26</i></small>            <br/>        . . .        </p>",
c26: "<p>    2 is correct<br/><br/>From php.net, http://php.net/manual/en/language.operators.type.php<br/>Type Operators<br/><br/>instanceof is used to determine whether a PHP variable is an instantiated object of a certain class        <br/>        <small><b>Leandro</b> on <i>25 July 2012, at 07:07:16</i></small>        <br/>    . . .    </p>        <p>        instanceof is also an operator            <br/>            <small><b>anonymous</b> on <i>6 September 2011, at 05:09:47</i></small>            <br/>        . . .        </p>        <p>        the correct answer is 2            <br/>            <small><b>anonymous</b> on <i>11 August 2011, at 02:08:31</i></small>            <br/>        . . .        </p>        <p>        the word operator is confusing. if instanceof is an operator than right answer is 2. Because === will check not only the type but also the properties values. which might be different.            <br/>            <small><b>Faisal</b> on <i>20 October 2010, at 01:10:27</i></small>            <br/>        . . .        </p>        <p>        It\'s 2 of course. They are looking for the TYPE of the object. Only instanceof can do that. (from the given options)<br/>instanceof is used to determine whether a PHP variable is an instantiated object of a certain class            <br/>            <small><b>anonymous</b> on <i>28 September 2010, at 07:09:06</i></small>            <br/>        . . .        </p>        <p>        correct answer is 4            <br/>            <small><b>anonymous</b> on <i>16 August 2010, at 03:08:41</i></small>            <br/>        . . .        </p>        <p>        Are the answers sometimes shown in different order? :)<br/>The correct answer is 2. \"instanceof and type-hinting\" because \"===\" does check for identical objects not for the inherited class and \"type-hinting\" is the only thing that may be part of the function declaration.<br/>            <br/>            <small><b>lathspell</b> on <i>11 July 2010, at 08:07:34</i></small>            <br/>        . . .        </p>        <p>        the correct answer is number 5            <br/>            <small><b>amine ismaili alaoui</b> on <i>28 June 2010, at 11:06:04</i></small>            <br/>        . . .        </p>        <p>        The correct answer is NOT 4. \'===\' checks if two variable contain the same INSTANCE of an object whereas instanceof checks if the variable is an instance of a particular class. Ie is of a certain type.            <br/>            <small><b>MeerDanGek</b> on <i>1 June 2010, at 10:06:32</i></small>            <br/>        . . .        </p>        <p>        The first blank refer to \"operator\", so i think that is 4.            <br/>            <small><b>anonymous</b> on <i>28 May 2010, at 03:05:01</i></small>            <br/>        . . .        </p>        <p>        answer is not 4... where do you get that idea?            <br/>            <small><b>anonymous</b> on <i>19 May 2010, at 12:05:54</i></small>            <br/>        . . .        </p>        <p>        answers is 4            <br/>            <small><b>anonymous</b> on <i>23 April 2010, at 07:04:05</i></small>            <br/>        . . .        </p>",
c179: "<p>    1, 3, 4        <br/>        <small><b>zc</b> on <i>4 April 2013, at 04:04:39</i></small>        <br/>    . . .    </p>        <p>        1,3 and 4            <br/>            <small><b>anonymous</b> on <i>29 June 2011, at 09:06:25</i></small>            <br/>        . . .        </p>        <p>        1,3,4            <br/>            <small><b>Nur Ahmed</b> on <i>19 March 2011, at 12:03:58</i></small>            <br/>        . . .        </p>        <p>        1,3,4            <br/>            <small><b>anonymous</b> on <i>12 April 2010, at 05:04:34</i></small>            <br/>        . . .        </p>",
c144: "<p>    #3 is right        <br/>        <small><b>Vinod Kumar</b> on <i>1 July 2013, at 12:07:54</i></small>        <br/>    . . .    </p>        <p>        3 is right, all the other 1,4,5 give syntax errors<br/><br/>still even 3 needs the $a variable instantiated !<br/><br/>code example : <br/><br/>class MyClass {<br/>    <br/>    public function getInstance (){<br/>        return $this;<br/>    }<br/>    <br/>    public function doSomething (){<br/>        echo \"something\";<br/>    }<br/>}<br/>    $a = new Myclass();<br/>    $c = $a->getInstance()->doSomething();<br/><br/>//prints something<br/>            <br/>            <small><b>Radu</b> on <i>9 May 2013, at 07:05:39</i></small>            <br/>        . . .        </p>        <p>        $c = (new MyClass())->getInstance()->doSomething(); in latest versions php            <br/>            <small><b>WinterSilence</b> on <i>28 March 2013, at 05:03:38</i></small>            <br/>        . . .        </p>        <p>        Ð±ÑƒÐ´Ðµ Ð¢Ð Ð˜!            <br/>            <small><b>anonymous</b> on <i>15 September 2012, at 03:09:29</i></small>            <br/>        . . .        </p>        <p>        3 is correct, but $a needs the new MyClass.. http://codepad.viper-7.com/qwOiUH            <br/>            <small><b>anonymous</b> on <i>9 July 2012, at 07:07:17</i></small>            <br/>        . . .        </p>        <p>        3 is correct            <br/>            <small><b>kri</b> on <i>24 June 2012, at 07:06:30</i></small>            <br/>        . . .        </p>        <p>        Tree is correct            <br/>            <small><b>samhk222</b> on <i>1 September 2011, at 01:09:48</i></small>            <br/>        . . .        </p>        <p>        This is testing \"dereferencing returned objects.\" You couldn\'t do this in PHP4. In PHP4, you had to save the returned object as a variable 1st. In PHP 5, you don\'t. So, the answer is 3. By the way, 1, 4, & 5 cause syntax errors. You can\'t cast a variable as an object of a class. Duh, only as an object... and you certainly can\'t do it while calling a method.            <br/>            <small><b>Johnny Appleseed</b> on <i>11 June 2010, at 02:06:13</i></small>            <br/>        . . .        </p>        <p>        I think that 4 is probable correct but variable \'a\' has not been instantiated. A more correct answer would be $c = MyClass::getInstance()->doSomething(). but this depends on MyClass being created as a singleton.            <br/>            <small><b>MeerDanGek</b> on <i>1 June 2010, at 02:06:44</i></small>            <br/>        . . .        </p>        <p>        right answer $c = $a->getInstance()->doSomething();            <br/>            <small><b>samsami2um@gmail.com</b> on <i>17 April 2010, at 04:04:31</i></small>            <br/>        . . .        </p>",
c191: "<p>    1:none of the above - it will returns  \"PHP Catchable fatal error:  Object of class DOMText could not be converted to string\"<br/><br/>needs to escape the $item call in the string to print \"{$item->firstChild->data}\n\";        <br/>        <small><b>rob</b> on <i>1 May 2013, at 07:05:54</i></small>        <br/>    . . .    </p>        <p>        I think too it is 5, but I\'m not sure.            <br/>            <small><b>anur</b> on <i>20 April 2013, at 11:04:41</i></small>            <br/>        . . .        </p>        <p>        it is prints firstChild of an ITEM not a title one.... so my answer is 1.            <br/>            <small><b>ilfate</b> on <i>21 October 2012, at 07:10:26</i></small>            <br/>        . . .        </p>        <p>        the first child of title will be a text node            <br/>            <small><b>anonymous</b> on <i>19 July 2012, at 05:07:28</i></small>            <br/>        . . .        </p>        <p>        i think it\'s 1. \'cause by the way this script is working it should print out first child for every title element in the item element.            <br/>            <small><b>minato</b> on <i>6 September 2011, at 10:09:06</i></small>            <br/>        . . .        </p>        <p>        Answer: 5            <br/>            <small><b>Alex</b> on <i>30 August 2011, at 09:08:35</i></small>            <br/>        . . .        </p>        <p>        it has to be 5, 4 is wrong answer!            <br/>            <small><b>anonymous</b> on <i>29 June 2011, at 10:06:54</i></small>            <br/>        . . .        </p>        <p>        answer #5 yes            <br/>            <small><b>Martini</b> on <i>29 September 2010, at 04:09:45</i></small>            <br/>        . . .        </p>        <p>        I think it\'s 5            <br/>            <small><b>anonymous</b> on <i>22 May 2010, at 06:05:05</i></small>            <br/>        . . .        </p>",
c174: "<p>    1 is the correct answer.        <br/>        <small><b>anonymous</b> on <i>29 June 2011, at 09:06:51</i></small>        <br/>    . . .    </p>        <p>        1 is correct            <br/>            <small><b>shakedko</b> on <i>5 April 2010, at 05:04:55</i></small>            <br/>        . . .        </p>",
c192: "<p>    Yes the can be fetch, fetchAll, fetchColumn and fetchObject. So 123 for this.        <br/>        <small><b>Rajanikant</b> on <i>2 February 2013, at 02:02:37</i></small>        <br/>    . . .    </p>        <p>        123            <br/>            <small><b>anonymous</b> on <i>9 July 2012, at 11:07:28</i></small>            <br/>        . . .        </p>        <p>        Agreed 123            <br/>            <small><b>Roy</b> on <i>18 December 2010, at 11:12:54</i></small>            <br/>        . . .        </p>        <p>        1,2,3<br/>check PDO Statement at php.net            <br/>            <small><b>shakedko</b> on <i>5 April 2010, at 05:04:23</i></small>            <br/>        . . .        </p>",
c99: "<p>    solution is 1        <br/>        <small><b>amine ismaili alaoui</b> on <i>1 July 2010, at 02:07:04</i></small>        <br/>    . . .    </p>",
c30: "<p>    static methods can be accessed by $this in php 5.3 from inside the class using another method.. and it can also be accessed by an object.. but we cannot call any other method or property from inside the static method using $this        <br/>        <small><b>anonymous</b> on <i>18 February 2013, at 06:02:01</i></small>        <br/>    . . .    </p>        <p>        answer 2 is correct, why should 5 be correct? this php mockup test is full of traps..            <br/>            <small><b>anonymous</b> on <i>8 July 2012, at 12:07:21</i></small>            <br/>        . . .        </p>        <p>        if a static method had access to $this, then you wouldn\'t be able to call it statically, since $this refers to an instance.            <br/>            <small><b>infowars.com</b> on <i>6 July 2012, at 08:07:57</i></small>            <br/>        . . .        </p>        <p>        are you sure?            <br/>            <small><b>anonymous</b> on <i>24 June 2012, at 02:06:36</i></small>            <br/>        . . .        </p>        <p>        actually dont bother, what a stupid comment.Please ignore it            <br/>            <small><b>anonymous</b> on <i>1 March 2012, at 04:03:15</i></small>            <br/>        . . .        </p>        <p>        ...explain this then...<br/><br/>class myClass<br/>{<br/>public static $var = \'var\';<br/>static function a()<br/>{<br/>echo \'a\';<br/>}<br/>public function b()<br/>{<br/>echo \'b\';<br/>}<br/>function callStatic()<br/>{<br/>$this->a();<br/>}<br/>}<br/><br/>$a = new myClass();<br/>$a->callStatic();            <br/>            <small><b>anonymous</b> on <i>1 March 2012, at 04:03:56</i></small>            <br/>        . . .        </p>        <p>        static methods are callable without an instance of the object created, the pseudo-variable $this is not available inside the method declared as static            <br/>            <small><b>venki</b> on <i>2 February 2012, at 10:02:30</i></small>            <br/>        . . .        </p>        <p>        #2            <br/>            <small><b>anonymous</b> on <i>5 June 2011, at 11:06:06</i></small>            <br/>        . . .        </p>        <p>        2 is correct            <br/>            <small><b>anonymous</b> on <i>28 April 2011, at 11:04:55</i></small>            <br/>        . . .        </p>        <p>        the pseudo-variable $this is not available inside the method declared as static. So correct answer is 2            <br/>            <small><b>Gagan Charaya</b> on <i>21 January 2011, at 09:01:08</i></small>            <br/>        . . .        </p>        <p>        Answer is 2. read.....<br/> http://php.net/manual/en/language.oop5.static.php            <br/>            <small><b>Faisal</b> on <i>20 October 2010, at 10:10:20</i></small>            <br/>        . . .        </p>        <p>        It is 2. Read the manual on php.net.<br/>Because static methods are callable without an instance of the object created, the pseudo-variable $this is not available inside the method declared as static.<br/>http://php.net/manual/en/language.oop5.static.php<br/>            <br/>            <small><b>Diz</b> on <i>28 September 2010, at 07:09:46</i></small>            <br/>        . . .        </p>        <p>        Number 2(\"Static methods do not provide a reference to $this\") is the correct answer.            <br/>            <small><b>Liju P M</b> on <i>14 July 2010, at 06:07:17</i></small>            <br/>        . . .        </p>        <p>        la bonne reponse est 2            <br/>            <small><b>amine ismaili alaoui</b> on <i>28 June 2010, at 06:06:08</i></small>            <br/>        . . .        </p>        <p>        Correct answer is 2. Static methods CAN be called from within an instance so 1 is wrong.            <br/>            <small><b>MeerDanGek</b> on <i>1 June 2010, at 10:06:21</i></small>            <br/>        . . .        </p>        <p>        Have no idea, but i support with 1.            <br/>            <small><b>anonymous</b> on <i>28 May 2010, at 03:05:01</i></small>            <br/>        . . .        </p>        <p>        NUMBER 2 IS THE CORRECT ANSWER            <br/>            <small><b>anonymous</b> on <i>31 March 2010, at 12:03:21</i></small>            <br/>        . . .        </p>        <p>        imho 1 is the correct answer            <br/>            <small><b>anonymous</b> on <i>27 January 2010, at 01:01:38</i></small>            <br/>        . . .        </p>",
c46: "<p>    2, becuase we don\'t know what the functions scrub_ do! Maybe they filter and sanitize request vars!        <br/>        <small><b>chris</b> on <i>29 July 2013, at 12:07:28</i></small>        <br/>    . . .    </p>        <p>        5 is the final solution!            <br/>            <small><b>Adolf</b> on <i>8 July 2012, at 03:07:06</i></small>            <br/>        . . .        </p>        <p>        5 is correct            <br/>            <small><b>kri</b> on <i>22 June 2012, at 07:06:01</i></small>            <br/>        . . .        </p>        <p>        The potential security Hole is Cross-Site Request Forgery then correct answer is 5            <br/>            <small><b>babs</b> on <i>21 June 2012, at 11:06:55</i></small>            <br/>        . . .        </p>        <p>        alert(\'Maybe a CSRF\');            <br/>            <small><b>anonymous</b> on <i>25 January 2012, at 12:01:08</i></small>            <br/>        . . .        </p>        <p>        ...having said that, better to use $_POST anyway!            <br/>            <small><b>anonymous</b> on <i>25 January 2012, at 11:01:32</i></small>            <br/>        . . .        </p>        <p>        ...It completely depends what the user functions scrub_id() and scrub_quantity() actually do. If they correctly filter/sanitize the incoming data, the CSRF attack is neutralized. I\'m calling \'trick question\' and goinf with 2...this code provides no security hole, resulting code might!            <br/>            <small><b>anonymous</b> on <i>25 January 2012, at 11:01:50</i></small>            <br/>        . . .        </p>        <p>        5 is right answer.....            <br/>            <small><b>anonymous</b> on <i>10 December 2011, at 07:12:13</i></small>            <br/>        . . .        </p>        <p>        5 for god sake, it\'s writen with $_REQUEST ;___; it has to have security hole            <br/>            <small><b>anonymous</b> on <i>13 August 2011, at 12:08:38</i></small>            <br/>        . . .        </p>        <p>        answer 5 is \"final\"            <br/>            <small><b>anonymous</b> on <i>6 June 2011, at 12:06:31</i></small>            <br/>        . . .        </p>        <p>        The Answer is: 5. The use of $_REQUEST gives a HINT as to the answer, but EVEN if $_POST was specified, it is STILL subject to an XSRF attack... because there is NO $_SESSION[\"token\"] == $_POST[\"form_token\"] check in the code to verify the request is being made by an actual browser (w/ active Session) using site form with (same) non-expired token held as hidden var.            <br/>            <small><b>FireSunAndAlsoPuppies</b> on <i>31 March 2011, at 05:03:41</i></small>            <br/>        . . .        </p>        <p>        This is weird, provided the scrub functions sanitize input data, there should not be any except the case when id and quantity do not contain VALID data, valid is different that FILTERED data ... so even after scrubbing your data (what the hell is scrub?!) you might still have incorrect data into your shopping cart. I incline to think is 2 ... bloody scrubbs            <br/>            <small><b>iongion</b> on <i>19 January 2011, at 08:01:05</i></small>            <br/>        . . .        </p>        <p>        answer 2 is totally wrong there is a security hole, and its called XSRF!! answer 5            <br/>            <small><b>anonymous</b> on <i>14 November 2010, at 10:11:22</i></small>            <br/>        . . .        </p>        <p>        There is no security hole in this code, presumably the functions scrub_id() and scrub_quantity() will clean up the user inputs.            <br/>            <small><b>Liju P M</b> on <i>15 July 2010, at 06:07:41</i></small>            <br/>        . . .        </p>        <p>        la bonne reponse est numero 5, parcequ\'il utilise la variable superglobal $_REQUEST....            <br/>            <small><b>amine ismaili alaoui</b> on <i>29 June 2010, at 08:06:49</i></small>            <br/>        . . .        </p>        <p>        so you\'re saying that $_GET, $_POST or $_COOKIE are not forge-able?            <br/>            <small><b>anonymous</b> on <i>19 May 2010, at 12:05:03</i></small>            <br/>        . . .        </p>        <p>        Indeed, you should not just use $_REQUEST but the more specific $_GET or $_POST (or $_COOKIE) so you are certain of the origin of the data...            <br/>            <small><b>anonymous</b> on <i>17 March 2010, at 07:03:17</i></small>            <br/>        . . .        </p>        <p>        answer 2 is wrong, answer 5 is wright            <br/>            <small><b>anonymous</b> on <i>15 March 2010, at 02:03:50</i></small>            <br/>        . . .        </p>",
c80: "<p>    Answer === 2        <br/>        <small><b>anonymous</b> on <i>14 October 2010, at 05:10:44</i></small>        <br/>    . . .    </p>",
c194: "<p>    thats a stupid question, but in the context of a software engineer test, only 2 can be the expected answer.        <br/>        <small><b>rob</b> on <i>1 May 2013, at 07:05:16</i></small>        <br/>    . . .    </p>        <p>        what a shitty question ... i would nevertheless say 2 ...            <br/>            <small><b>anonymous</b> on <i>17 September 2012, at 12:09:03</i></small>            <br/>        . . .        </p>        <p>        it depends on the project... i will select \"1\" if i need something to be done quick and need performance, i wont use any frameworks or design patterns, i just code... if it is for a customer and the code should be clean and easy to maintain, i would select 2.            <br/>            <small><b>anonymous</b> on <i>17 July 2012, at 08:07:38</i></small>            <br/>        . . .        </p>        <p>        dumb answers... what came first, egg or the hen?            <br/>            <small><b>anonymous</b> on <i>9 July 2012, at 11:07:26</i></small>            <br/>        . . .        </p>        <p>        imho, number #1            <br/>            <small><b>samhk222</b> on <i>1 September 2011, at 01:09:39</i></small>            <br/>        . . .        </p>        <p>        I would say performance for sure and then make sure the code is maintainable.            <br/>            <small><b>anonymous</b> on <i>29 June 2011, at 10:06:41</i></small>            <br/>        . . .        </p>        <p>        This is an odd question, as 1 and 2 are effectively duplicated by 3 and 4.  In the general case, I\'d suggest that ensuring the code is maintainable comes before performance, but there\'s a lot of potential exceptions to that rule.            <br/>            <small><b>juice</b> on <i>12 April 2011, at 03:04:36</i></small>            <br/>        . . .        </p>        <p>        I would say #2            <br/>            <small><b>Martini</b> on <i>29 September 2010, at 05:09:19</i></small>            <br/>        . . .        </p>",
c160: "<p>    yap I agree. its number 5.        <br/>        <small><b>yam</b> on <i>19 October 2012, at 01:10:07</i></small>        <br/>    . . .    </p>        <p>        Hello, my name Borat. I like 5.            <br/>            <small><b>Borat</b> on <i>9 July 2012, at 08:07:43</i></small>            <br/>        . . .        </p>        <p>        when you are updating more than one table then you should use transactions.            <br/>            <small><b>anonymous</b> on <i>29 June 2011, at 09:06:00</i></small>            <br/>        . . .        </p>        <p>        answer 5 is correct            <br/>            <small><b>shakedko</b> on <i>5 April 2010, at 05:04:15</i></small>            <br/>        . . .        </p>",
c173: "<p>    3 and 4 are correct. 4 is the best function for doing anything with xml and in SimpleXML there is SimpleXMLElement which can be added to a xml node by addChild.<br/><br/>http://stackoverflow.com/questions/143122/using-simplexml-to-create-an-xml-object-from-scratch        <br/>        <small><b>anonymous</b> on <i>17 July 2012, at 07:07:10</i></small>        <br/>    . . .    </p>        <p>        SimpleXML can be used to create new nodes, as can DOM/DOMDocument.  However, in both cases, it\'s important to note that you\'re editing an in-memory copy of the XML file; to save the data, you have to call the appropriate save() method (e.g. SimpleXML::asXML())            <br/>            <small><b>juice</b> on <i>14 April 2011, at 11:04:14</i></small>            <br/>        . . .        </p>        <p>        http://php.net/manual/en/class.simplexmlelement.php â€” public SimpleXMLElement addChild<br/>http://php.net/manual/en/domdocument.createelement.php<br/>3 & 4?            <br/>            <small><b>anonymous</b> on <i>25 January 2011, at 08:01:16</i></small>            <br/>        . . .        </p>        <p>        1) .DOM<br/>3)  SimpleXML - readonly [Wrong answer]<br/>            <br/>            <small><b>anonymous</b> on <i>3 December 2010, at 04:12:00</i></small>            <br/>        . . .        </p>        <p>        3,4            <br/>            <small><b>shakedko</b> on <i>5 April 2010, at 05:04:35</i></small>            <br/>        . . .        </p>",
c82: "<p>    4 can\'t be correct, doesn\'t refer to $string        <br/>        <small><b>anonymous</b> on <i>8 March 2013, at 06:03:04</i></small>        <br/>    . . .    </p>        <p>        3 & 4 are correct            <br/>            <small><b>Jitu</b> on <i>22 January 2013, at 05:01:01</i></small>            <br/>        . . .        </p>        <p>        Only 3 can be correct            <br/>            <small><b>anonymous</b> on <i>14 September 2012, at 01:09:23</i></small>            <br/>        . . .        </p>        <p>        #5 is wrong for two reasons, first because it needs an echo or print to send the result to the screen. Second, because $oranges, and $apples are in the wrong order.            <br/>            <small><b>anonymous</b> on <i>19 July 2012, at 04:07:50</i></small>            <br/>        . . .        </p>        <p>        I have tested this using php-cli and right answer is 3 only.            <br/>            <small><b>Mohit Garg</b> on <i>13 July 2012, at 04:07:21</i></small>            <br/>        . . .        </p>        <p>        Correct answer is only 3. sprintf function doesn\'t print data, it will return them.            <br/>            <small><b>Rafael M. Salvioni</b> on <i>25 January 2012, at 02:01:24</i></small>            <br/>        . . .        </p>        <p>        You r right, 5th option should be sprintf($string, $apples, $oranges);            <br/>            <small><b>Hasn</b> on <i>15 September 2011, at 01:09:06</i></small>            <br/>        . . .        </p>        <p>        1. str_format() function doesen\'t even exist, unles you define one.<br/>2. print, print\'s parse error.<br/>3. CORRECT<br/>4. just print\'s number 5 <br/>5. sprintf doesent print anything. and beside, the argument\'s passed to it are in wrong order, even if it did worked, it would say \"I have 10 apples and 5 oranges\".            <br/>            <small><b>minato</b> on <i>4 August 2011, at 10:08:32</i></small>            <br/>        . . .        </p>        <p>        printf($string, $apples, $oranges);<br/>print sprintf($string,$apples,$oranges);<br/>So answers are 3 NOT 5            <br/>            <small><b>Gagan Charaya</b> on <i>21 January 2011, at 06:01:54</i></small>            <br/>        . . .        </p>        <p>        sprintf() returns a formated string, so you need to store in a variable first.<br/><br/>$test = sprintf($string,  $apples, $oranges); <br/>print $test;            <br/>            <small><b>anonymous</b> on <i>28 October 2010, at 05:10:31</i></small>            <br/>        . . .        </p>        <p>        1. Call to undefined function<br/>2. Syntax error at ,<br/>3. CORRECT<br/>4. outputs just \"5\" as $apples is the Format String<br/>5. outputs nothing as it just returns the result<br/>-> The \"Choose 2 answers\" is wrong!            <br/>            <small><b>lathspell</b> on <i>14 July 2010, at 07:07:34</i></small>            <br/>        . . .        </p>        <p>        but in 4th answer should be print sprintf($string, $apples, $oranges);            <br/>            <small><b>rdo</b> on <i>18 June 2010, at 03:06:38</i></small>            <br/>        . . .        </p>        <p>        right answers are 3 and 4            <br/>            <small><b>rdo</b> on <i>18 June 2010, at 03:06:51</i></small>            <br/>        . . .        </p>        <p>        5th option should be sprintf($string, $apples, $oranges);            <br/>            <small><b>anonymous</b> on <i>14 May 2010, at 08:05:08</i></small>            <br/>        . . .        </p>",
c86: "<p>    toupper not exists in PHP as a function - is filter. 2 and 5 is correct        <br/>        <small><b>anonymous</b> on <i>15 March 2011, at 03:03:26</i></small>        <br/>    . . .    </p>        <p>        My apologies...its 2 and 5 (not 3 and 5).            <br/>            <small><b>mhor</b> on <i>23 September 2010, at 09:09:59</i></small>            <br/>        . . .        </p>        <p>        3 and 5 wins! (check PHP manual)            <br/>            <small><b>mhor</b> on <i>23 September 2010, at 09:09:07</i></small>            <br/>        . . .        </p>",
c232: "<p>    Its recursive function call , I think I am blind and missed that !        <br/>        <small><b>anonymous</b> on <i>19 March 2013, at 01:03:36</i></small>        <br/>    . . .    </p>        <p>        BartletAnjo            <br/>            <small><b>Sveta </b> on <i>26 July 2012, at 09:07:55</i></small>            <br/>        . . .        </p>        <p>        yes 3, http://php.net/manual/en/function.array-pop.php            <br/>            <small><b>anonymous</b> on <i>31 January 2011, at 07:01:30</i></small>            <br/>        . . .        </p>        <p>        BartletAnjo            <br/>            <small><b>anonymous</b> on <i>17 March 2010, at 07:03:14</i></small>            <br/>        . . .        </p>",
c45: "<p>    If you don\'t ever trust any data from the user, then you will always be filtering it, so 2 and 4 are the same thing in my book.        <br/>        <small><b>anonymous</b> on <i>25 June 2012, at 09:06:03</i></small>        <br/>    . . .    </p>        <p>        number 2. Number 4 is also good, but because 2 is a broader set of number 4, the correct one is 2.            <br/>            <small><b>kri</b> on <i>22 June 2012, at 07:06:37</i></small>            <br/>        . . .        </p>        <p>        Always filter all incoming data give us best security but we need BALANCE, so we can trust data comes from another modules but we must control all user input. So answer is 2: Never trust any data from the user            <br/>            <small><b>anonymous</b> on <i>14 June 2012, at 01:06:10</i></small>            <br/>        . . .        </p>        <p>        I think the correct number 2. It contains the answer number 4.            <br/>            <small><b>Andrey Kovsh</b> on <i>3 June 2012, at 01:06:16</i></small>            <br/>        . . .        </p>        <p>        I incline to think 2, can you filter a FILE (a FILE is data from the user) ? Does this make sense ? ... 2 seems more politically correct            <br/>            <small><b>iongion</b> on <i>19 January 2011, at 08:01:05</i></small>            <br/>        . . .        </p>        <p>        why sets wrong answer by Solve it???<br/>right number 4!!!            <br/>            <small><b>anonymous</b> on <i>26 December 2010, at 09:12:03</i></small>            <br/>        . . .        </p>        <p>        yes the correct answer is number 4            <br/>            <small><b>amine ismaili alaoui</b> on <i>29 June 2010, at 07:06:01</i></small>            <br/>        . . .        </p>        <p>        maybe 4 is the answer..?            <br/>            <small><b>anonymous</b> on <i>31 March 2010, at 10:03:19</i></small>            <br/>        . . .        </p>",
c93: "<p>    The question is about sessions, what is the relation between cookies with the correct answer? ... I do not agree with the question, for me only 5 is correct.        <br/>        <small><b>anonymous</b> on <i>27 May 2013, at 06:05:11</i></small>        <br/>    . . .    </p>        <p>        Haha, I love session_demolish() - sounds sooo great!            <br/>            <small><b>mdix</b> on <i>14 July 2012, at 09:07:17</i></small>            <br/>        . . .        </p>        <p>        2,5 are the right answers. 1,4 don\'t kill the session, only change the session id and name.            <br/>            <small><b>anonymous</b> on <i>14 June 2012, at 03:06:37</i></small>            <br/>        . . .        </p>        <p>        regenerating session id do not destroys session, it changes only id, same with session_name... corect is 2 and 5            <br/>            <small><b>anonymous</b> on <i>4 May 2012, at 11:05:59</i></small>            <br/>        . . .        </p>        <p>        1 and 4            <br/>            <small><b>Mahesh</b> on <i>14 December 2011, at 01:12:39</i></small>            <br/>        . . .        </p>        <p>        2 and 5            <br/>            <small><b>amine ismaili alaoui</b> on <i>1 July 2010, at 02:07:58</i></small>            <br/>        . . .        </p>",
c104: "<p>    1 is correct.  http://us2.php.net/manual/en/function.setrawcookie.php        <br/>        <small><b>anonymous</b> on <i>18 September 2011, at 10:09:20</i></small>        <br/>    . . .    </p>        <p>        i agree number 1 setrawcookie();            <br/>            <small><b>minato</b> on <i>4 August 2011, at 10:08:03</i></small>            <br/>        . . .        </p>        <p>        PHP manual: setrawcookie â€” Send a cookie without urlencoding the cookie value            <br/>            <small><b>@DsarrollandoWeb</b> on <i>4 June 2011, at 12:06:39</i></small>            <br/>        . . .        </p>        <p>        Option 1. Send a cookie without urlencoding the cookie value            <br/>            <small><b>ruminir</b> on <i>19 November 2010, at 01:11:00</i></small>            <br/>        . . .        </p>        <p>        Yes I\'m agree with 1. too!            <br/>            <small><b>anonymous</b> on <i>22 August 2010, at 08:08:09</i></small>            <br/>        . . .        </p>        <p>        the 1 is right            <br/>            <small><b>anonymous</b> on <i>29 May 2010, at 08:05:27</i></small>            <br/>        . . .        </p>        <p>        1 is right: setrawcookie() is exactly the same as setcookie() except that the cookie value will not be automatically urlencoded when sent to the browser. ... from php.net            <br/>            <small><b>Loo</b> on <i>5 April 2010, at 05:04:42</i></small>            <br/>        . . .        </p>",
c57: "<p>    http://codepad.viper-7.com/0XeEkc        <br/>        <small><b>kevin</b> on <i>29 April 2012, at 09:04:11</i></small>        <br/>    . . .    </p>        <p>        Array keys cannot be floats, so 0.001 becomes 0, and then for the next key .1 it also turns to 0 which overwrites the first key.            <br/>            <small><b>anonymous</b> on <i>31 July 2011, at 06:07:40</i></small>            <br/>        . . .        </p>        <p>        I think it will only accept integer not float as key values thats why it was truncated            <br/>            <small><b>sis</b> on <i>20 December 2010, at 05:12:59</i></small>            <br/>        . . .        </p>        <p>        Looks like the decimal is truncated, and since they are both \"0\", it only assigns 0 => \'c\'            <br/>            <small><b>anonymous</b> on <i>28 October 2010, at 04:10:27</i></small>            <br/>        . . .        </p>        <p>        Can any one explain in simple english please?            <br/>            <small><b>Faisal</b> on <i>23 October 2010, at 11:10:55</i></small>            <br/>        . . .        </p>        <p>        the correct answer is number 3, explication: dans un tableau s\'il y on a plusieurs case portant le meme index toujours c\'est le dernier qui sera enregistrer, en fait c\'est ce qui est arrive dans notre cas quand PHP veut executer ce bout de code il commence par tronquer la partie flotante ce qui lui donnera deux case qui ont le meme index \"0\"            <br/>            <small><b>amine ismaili alaoui</b> on <i>30 June 2010, at 01:06:17</i></small>            <br/>        . . .        </p>",
c43: "<p>    magic_quotes_gpc should be disabled to ensure proper using of native database escape string functions..        <br/>        <small><b>Ryan</b> on <i>18 February 2013, at 06:02:39</i></small>        <br/>    . . .    </p>        <p>        wtf, they say \"choose 4 answers\", but shows only one?            <br/>            <small><b>anonymous</b> on <i>5 September 2012, at 11:09:13</i></small>            <br/>        . . .        </p>        <p>        why should I disable magic_quotes_gpc to improve the security? some use the the function for protecting databases of sql injections.. and I also would not disable safe_mode because it will improve security.. so even if I should choose 4 answers, I would only choose 3,4,5            <br/>            <small><b>anonymous</b> on <i>14 July 2012, at 08:07:01</i></small>            <br/>        . . .        </p>        <p>        Exactly how does disabling safe_mode or magic_quotes_gpc improve the outward security of your application? (Forgetting for a moment that they are both deprecated as of PHP 5.3.0) One of them will have to be chosen since the question requires four answers. 3,4,5 are slam-dunk for sure, no need to debate correct choices though in my opinion.            <br/>            <small><b>anonymous</b> on <i>25 June 2012, at 09:06:56</i></small>            <br/>        . . .        </p>        <p>        I agree with, the correct answer is : 1,3,4,5            <br/>            <small><b>babs</b> on <i>21 June 2012, at 11:06:33</i></small>            <br/>        . . .        </p>        <p>        2,3,4, and 5 are correct.  In response to Seal, http://us2.php.net/manual/en/security.magicquotes.php            <br/>            <small><b>anonymous</b> on <i>18 September 2011, at 06:09:53</i></small>            <br/>        . . .        </p>        <p>        2,3,4,5 are right.            <br/>            <small><b>anonymous</b> on <i>5 June 2011, at 11:06:31</i></small>            <br/>        . . .        </p>        <p>        trick question.<br/>the question says - directives should be disabled to improve the outward security...<br/><br/>Note the keyword DISABLED<br/><br/>so I will go with 1, 3, 4, 5,<br/>magic_quotes_gpc - this needs to be enabled to improve outward security. And even then its not 100% because this function only escapes some characters - programmer would still need to escape some special charaters<br/>            <br/>            <small><b>seal</b> on <i>16 May 2011, at 11:05:28</i></small>            <br/>        . . .        </p>        <p>        1/2/3/4            <br/>            <small><b>anonymous</b> on <i>5 February 2011, at 06:02:26</i></small>            <br/>        . . .        </p>        <p>        Roy, display_errors can contain data which can reveal sensitive information about your application, such as information about the setup of your database which could lead to a further security breach such as an sql injection attack.<br/><br/>The correct answers are 2,3,4,5            <br/>            <small><b>Matt</b> on <i>22 January 2011, at 07:01:41</i></small>            <br/>        . . .        </p>        <p>        Everybody knows that \"safe_mode\" gives the false sense of security so it won\'t matter, so the correct answers are 2,3,4,5            <br/>            <small><b>iongion</b> on <i>19 January 2011, at 08:01:21</i></small>            <br/>        . . .        </p>        <p>        I disagree with display errors. i agree it helps debugging. how does that improve security?            <br/>            <small><b>Roy</b> on <i>18 December 2010, at 11:12:12</i></small>            <br/>        . . .        </p>        <p>        cmon, display_errors at least should be one of them.            <br/>            <small><b>anonymous</b> on <i>28 September 2010, at 03:09:33</i></small>            <br/>        . . .        </p>        <p>        I would have said 2/ 3/ 4/ 5/ â†’ http://www.formatix.eu/les-bases-du-php/securiser-application-php            <br/>            <small><b>anonymous</b> on <i>25 August 2010, at 10:08:18</i></small>            <br/>        . . .        </p>        <p>        sure.            <br/>            <small><b>anonymous</b> on <i>28 May 2010, at 03:05:24</i></small>            <br/>        . . .        </p>        <p>        I believe that 2,3,4,5 should be the answer            <br/>            <small><b>anonymous</b> on <i>31 March 2010, at 05:03:38</i></small>            <br/>        . . .        </p>",
c205: "<p>    WTF?!        <br/>        <small><b>anonymous</b> on <i>22 August 2012, at 07:08:56</i></small>        <br/>    . . .    </p>        <p>        i dont want to be a zend engineer, i need only the php cert...            <br/>            <small><b>anonymous</b> on <i>17 July 2012, at 08:07:54</i></small>            <br/>        . . .        </p>        <p>        Yes, it\'s 1,3 and 4. That\'s really tricky, cause as juice mentioned it is a Zend-related question.            <br/>            <small><b>Steph</b> on <i>16 June 2011, at 12:06:22</i></small>            <br/>        . . .        </p>        <p>        Note that this is referring to the internal VM used by the Zend engine, not the PHP language.  Goto, Switch and Call are the new models; the Goto VM runs faster than Switch, which is faster than Call, but takes longer to compile.  See http://devzone.zend.com/article/459            <br/>            <small><b>juice</b> on <i>12 April 2011, at 11:04:11</i></small>            <br/>        . . .        </p>        <p>        1,3,4            <br/>            <small><b>shakedko</b> on <i>5 April 2010, at 05:04:16</i></small>            <br/>        . . .        </p>",
c38: "<p>    When serializing objects, PHP will attempt to call the member function __sleep prior to serialization.        <br/>        <small><b>anonymous</b> on <i>17 August 2011, at 03:08:34</i></small>        <br/>    . . .    </p>        <p>        I think there are no magic methods by the name of __destroy() and __shutdown(). __destruct() is used as class destructor method. __serialize() method is used to serialize and object and when used will automatically invoke the __sleep() method. Answer is 5.            <br/>            <small><b>Faisal</b> on <i>22 October 2010, at 09:10:46</i></small>            <br/>        . . .        </p>        <p>        i think 5            <br/>            <small><b>amine ismaili alaoui</b> on <i>28 June 2010, at 08:06:39</i></small>            <br/>        . . .        </p>",
c183: "<p>    XML-RPC        <br/>        <small><b>anonymous</b> on <i>6 August 2010, at 03:08:01</i></small>        <br/>    . . .    </p>        <p>        Definetly 3., see http://en.wikipedia.org/wiki/XML-RPC            <br/>            <small><b>anonymous</b> on <i>17 July 2010, at 12:07:25</i></small>            <br/>        . . .        </p>        <p>        may be 3            <br/>            <small><b>anonymous</b> on <i>12 April 2010, at 05:04:41</i></small>            <br/>        . . .        </p>",
c215: "<p>    hhh        <br/>        <small><b>anonymous</b> on <i>14 July 2013, at 02:07:46</i></small>        <br/>    . . .    </p>        <p>        You can add \'b\' to mode parameter, but it has to be preceeded by other character. It won\'t work by itself.            <br/>            <small><b>Vasil</b> on <i>13 January 2013, at 02:01:48</i></small>            <br/>        . . .        </p>        <p>        \"b\" is not a valid mode            <br/>            <small><b>Pedro</b> on <i>17 August 2011, at 02:08:20</i></small>            <br/>        . . .        </p>        <p>        there is no access mode \"b\"<br/><br/>http://www.php.net/manual/en/function.fopen.php            <br/>            <small><b>shakedko</b> on <i>5 April 2010, at 06:04:18</i></small>            <br/>        . . .        </p>",
c35: "<p>    you can only have one parent, you can implement more than one interface and have more than one child, so you can save yourself some thinking and choose 4 by elimination        <br/>        <small><b>anonymous</b> on <i>6 July 2012, at 08:07:43</i></small>        <br/>    . . .    </p>        <p>        For me this was hard to answer because the language used is vague. If it would have said it can implement several interfaces, then the answer is obvious. That\'s why I answered through a process of elimination. I certainly hope the real test has clearer verbiage than this.            <br/>            <small><b>anonymous</b> on <i>25 June 2012, at 08:06:28</i></small>            <br/>        . . .        </p>        <p>        Class can have multiple children and interfaces but only one direct parent. So answer is 4: interfaces, parent            <br/>            <small><b>anonymous</b> on <i>13 June 2012, at 02:06:24</i></small>            <br/>        . . .        </p>        <p>        interfaces, parent            <br/>            <small><b>anonymous</b> on <i>7 January 2012, at 02:01:45</i></small>            <br/>        . . .        </p>        <p>        interfaces, parent            <br/>            <small><b>Nikita</b> on <i>24 May 2011, at 11:05:47</i></small>            <br/>        . . .        </p>        <p>        3 children, interface            <br/>            <small><b>anonymous</b> on <i>21 May 2011, at 12:05:24</i></small>            <br/>        . . .        </p>        <p>        so easy            <br/>            <small><b>amine ismaili alaoui</b> on <i>28 June 2010, at 07:06:49</i></small>            <br/>        . . .        </p>",
c134: "<p>    Where is the solve button        <br/>        <small><b>anonymous</b> on <i>6 April 2013, at 12:04:57</i></small>        <br/>    . . .    </p>        <p>        3,5            <br/>            <small><b>WinterSilence</b> on <i>28 March 2013, at 05:03:12</i></small>            <br/>        . . .        </p>        <p>        3 and 5! mysql is not in pecl.            <br/>            <small><b>anonymous</b> on <i>16 July 2012, at 06:07:07</i></small>            <br/>        . . .        </p>        <p>        2,3,5 definitely            <br/>            <small><b>Mahesh Shivananda</b> on <i>14 December 2011, at 07:12:20</i></small>            <br/>        . . .        </p>        <p>        tidy is also a valid PECL package...you can see it in PECL listing...            <br/>            <small><b>anonymous</b> on <i>24 September 2011, at 11:09:21</i></small>            <br/>        . . .        </p>        <p>        Correct answer : 3 , 5            <br/>            <small><b>anonymous</b> on <i>20 April 2011, at 11:04:52</i></small>            <br/>        . . .        </p>        <p>        it will 2 3,5            <br/>            <small><b>anonymous</b> on <i>7 February 2011, at 04:02:12</i></small>            <br/>        . . .        </p>        <p>        dio and w32api is correct check:<br/>http://de3.php.net/manual/de/intro.w32api.php<br/>http://de3.php.net/manual/de/intro.dio.php            <br/>            <small><b>anonymous</b> on <i>19 October 2010, at 08:10:19</i></small>            <br/>        . . .        </p>        <p>        #1 is correct. All comments below are wrong. Check: http://pecl.php.net/packages.php and search for tidy and dio.            <br/>            <small><b>Martini</b> on <i>29 September 2010, at 03:09:24</i></small>            <br/>        . . .        </p>        <p>        1,2,5            <br/>            <small><b>anonymous</b> on <i>21 July 2010, at 08:07:42</i></small>            <br/>        . . .        </p>        <p>        1ï¼Œ2ï¼Œ4 are correct answer.            <br/>            <small><b>anonymous</b> on <i>20 July 2010, at 10:07:27</i></small>            <br/>        . . .        </p>        <p>        Answer: w32api,dio from php.net docs            <br/>            <small><b>Loo</b> on <i>5 April 2010, at 06:04:41</i></small>            <br/>        . . .        </p>",
c155: "<p>    only 2 are correct <br/>http://in3.php.net/manual/en/function.mysqli-connect.php        <br/>        <small><b>pooja khatri</b> on <i>23 May 2013, at 11:05:56</i></small>        <br/>    . . .    </p>        <p>        only 1 is correct : http://www.php.net/manual/en/mysqli.connect-error.php<br/>3 needs the $link as parameter :<br/>http://www.php.net/manual/en/mysqli.error.php            <br/>            <small><b>Radu</b> on <i>9 May 2013, at 08:05:16</i></small>            <br/>        . . .        </p>        <p>        1,3 are both correct. #1 will only return the last connect error, but what if the (!link) returns true for another reason? If this happens, only mysqli_error() will have the string.            <br/>            <small><b>anonymous</b> on <i>19 July 2012, at 04:07:31</i></small>            <br/>        . . .        </p>        <p>        Answer 1 is correct.            <br/>            <small><b>mohit garg</b> on <i>18 July 2012, at 05:07:33</i></small>            <br/>        . . .        </p>        <p>        Answer is Nr 1 - open this site and you will see almost the same code in the sample:<br/><br/>http://php.net/manual/en/mysqli.connect-error.php            <br/>            <small><b>Gandalfs talking left sock</b> on <i>16 July 2012, at 06:07:38</i></small>            <br/>        . . .        </p>        <p>        #3 mysqli_error returns a description of the last error. http://php.net/manual/en/mysqli.error.php            <br/>            <small><b>anonymous</b> on <i>13 July 2012, at 10:07:15</i></small>            <br/>        . . .        </p>        <p>        http://php.net/manual/en/mysqli.connect-error.php            <br/>            <small><b>anonymous</b> on <i>7 July 2012, at 12:07:29</i></small>            <br/>        . . .        </p>        <p>        1 is my answer            <br/>            <small><b>anonymous</b> on <i>17 August 2010, at 02:08:59</i></small>            <br/>        . . .        </p>        <p>        Answer :1 . <br/>Returns the last error message string from the last call to mysqli_connect() ... and the func is void .            <br/>            <small><b>Loo</b> on <i>5 April 2010, at 06:04:48</i></small>            <br/>        . . .        </p>",
c20: "<p>    Answer is 5. <br/>1: 2, 2: 20, 3: 16<br/>Function returns a reference to $three, therefore incrementing $var also increments $three        <br/>        <small><b>anonymous</b> on <i>21 May 2011, at 01:05:47</i></small>        <br/>    . . .    </p>        <p>        Answer = 5<br/>Function returns a reference to $three, therefore incrementing $var also increments $three            <br/>            <small><b>ing</b> on <i>14 November 2010, at 11:11:42</i></small>            <br/>        . . .        </p>        <p>        la fonction _variable() ne retourne que la derniere variable \"$three\" en reference ce qui donne que $three et $var auront le meme contenue si l\'une change son contenue elle se changera sur l\'autre automatiquement donc la bonne reponse est 5.            <br/>            <small><b>amine ismaili alaoui</b> on <i>28 June 2010, at 12:06:34</i></small>            <br/>        . . .        </p>",
c61: "<p>    The correct answer is 3. bcz There is no \"1\" is define as the array value...so there is no chance for the answer 1.        <br/>        <small><b>anonymous</b> on <i>17 October 2012, at 05:10:24</i></small>        <br/>    . . .    </p>        <p>        * sorry, #3 is correct            <br/>            <small><b>ignat</b> on <i>16 October 2012, at 08:10:08</i></small>            <br/>        . . .        </p>        <p>        If you know that array_splice don\'t preserve array keys, #1 and #5 can be rejected at once. #2 is correct.            <br/>            <small><b>Ignat</b> on <i>16 October 2012, at 08:10:17</i></small>            <br/>        . . .        </p>        <p>        #3 is correct. Check here http://codepad.viper-7.com/UePwWM            <br/>            <small><b>anonymous</b> on <i>5 September 2012, at 01:09:51</i></small>            <br/>        . . .        </p>        <p>        ok maybe not for sure, #3            <br/>            <small><b>anonymous</b> on <i>9 July 2012, at 02:07:37</i></small>            <br/>        . . .        </p>        <p>        #1 for sure            <br/>            <small><b>anonymous</b> on <i>9 July 2012, at 02:07:24</i></small>            <br/>        . . .        </p>        <p>        Hello            <br/>            <small><b>Hello</b> on <i>8 July 2012, at 04:07:57</i></small>            <br/>        . . .        </p>        <p>        test            <br/>            <small><b>anonymous</b> on <i>8 July 2012, at 04:07:21</i></small>            <br/>        . . .        </p>        <p>        its #3 !!!            <br/>            <small><b>Adolfs Hitler Web Developer</b> on <i>8 July 2012, at 04:07:58</i></small>            <br/>        . . .        </p>        <p>        $array = array(1 => 0, 2, 3, 4) = array(1 => 0, 2 => 2, 3 => 3, 4 => 4)<br/>count($array) = 4<br/>array_slice($array, 3) = array([0] => 4)<br/>array_merge(array(\'x\'), array_slice($array, 3)) = array([0] => \'x\', [1] => 4)<br/>so we get<br/>array_splice($array, 3, 4, array([0] => \'x\', [1] => 4)); offset=3 so 4 => 4 replaced by array([0] => \'x\', [1] => 4) and keys reset. So finally we have array ([0] => 0, [1] => 2, [2] => 3, [3] => \'x\', [4] => 4)            <br/>            <small><b>anonymous</b> on <i>14 June 2012, at 03:06:53</i></small>            <br/>        . . .        </p>        <p>        I hope the real test isn\'t this hard.            <br/>            <small><b>anonymous</b> on <i>12 June 2012, at 07:06:45</i></small>            <br/>        . . .        </p>        <p>        it\'s #3 on my compiler            <br/>            <small><b>vbhjkfd</b> on <i>21 May 2012, at 03:05:02</i></small>            <br/>        . . .        </p>        <p>        http://codepad.viper-7.com/gNFypu            <br/>            <small><b>kevin</b> on <i>29 April 2012, at 09:04:19</i></small>            <br/>        . . .        </p>        <p>        According the PHP manual, array_slice does not preserve the keys of input array.            <br/>            <small><b>Rafael M. Salvioni</b> on <i>24 January 2012, at 01:01:31</i></small>            <br/>        . . .        </p>        <p>        Its #3 in my compiler            <br/>            <small><b>anonymous</b> on <i>6 June 2011, at 12:06:49</i></small>            <br/>        . . .        </p>        <p>        it must be 3            <br/>            <small><b>anonymous</b> on <i>5 February 2011, at 07:02:38</i></small>            <br/>        . . .        </p>        <p>        answer is #3            <br/>            <small><b>anonymous</b> on <i>22 July 2010, at 06:07:51</i></small>            <br/>        . . .        </p>        <p>        oui, et parceque les cles ne sont pas preserve du tableau $array passe en parametre a la fonction array_splice, donc ces cles seront reinitialise            <br/>            <small><b>amine ismaili alaoui</b> on <i>30 June 2010, at 11:06:57</i></small>            <br/>        . . .        </p>        <p>        i ran this, here\'s the result (answer seems to be #3)<br/>Array<br/>(<br/>    [0] => 0<br/>    [1] => 2<br/>    [2] => 3<br/>    [3] => x<br/>    [4] => 4<br/>)<br/>            <br/>            <small><b>anonymous</b> on <i>5 January 2010, at 09:01:59</i></small>            <br/>        . . .        </p>",
c226: "<p>    Require constructs cause a fatal error if the file can\'t be read        <br/>        <small><b>Sveta </b> on <i>26 July 2012, at 09:07:57</i></small>        <br/>    . . .    </p>        <p>        which book?            <br/>            <small><b>anonymous</b> on <i>19 July 2012, at 05:07:19</i></small>            <br/>        . . .        </p>        <p>        5 is the answer, read the book            <br/>            <small><b>Hasn</b> on <i>16 September 2011, at 07:09:04</i></small>            <br/>        . . .        </p>        <p>        The include() construct will emit a warning if it cannot find a file; this is different behavior from require(), which will emit a fatal error. So the answer is 5            <br/>            <small><b>anonymous</b> on <i>5 August 2011, at 08:08:44</i></small>            <br/>        . . .        </p>        <p>        4 read manual.            <br/>            <small><b>anonymous</b> on <i>20 July 2011, at 02:07:42</i></small>            <br/>        . . .        </p>        <p>        5 is correct            <br/>            <small><b>shakedko</b> on <i>5 April 2010, at 06:04:14</i></small>            <br/>        . . .        </p>",
c7: "<p>    Rediculous, if any of my employees would ever write code like this I would fire him on the spot.        <br/>        <small><b>anonymous</b> on <i>15 June 2013, at 12:06:50</i></small>        <br/>    . . .    </p>        <p>        i guess !!$c === $c            <br/>            <small><b>anonymous</b> on <i>12 June 2013, at 12:06:18</i></small>            <br/>        . . .        </p>        <p>        any body know what !!$c mean <br/>and what different !!$c with ! $c thanks            <br/>            <small><b>anonymous</b> on <i>1 June 2013, at 09:06:06</i></small>            <br/>        . . .        </p>        <p>        this questions is bad, you only need to make the first one true to find the answer is 2. Only one option with true, false, *, *            <br/>            <small><b>anonymous</b> on <i>4 April 2013, at 09:04:38</i></small>            <br/>        . . .        </p>        <p>        2 is the correct answer<br/>because to get the result $number = 3 <br/>1. if-condition: $a && !$b has to be true<br/>2. if-condition: !!$c && !$d has to be true as well<br/>3. if-condition: $d && ($a || $b) has to be false<br/>so $a = true, $b = false, $c = true, $d = false in order to fullfill all the if-conditions            <br/>            <small><b>Lina</b> on <i>26 February 2013, at 04:02:28</i></small>            <br/>        . . .        </p>        <p>        2 is the correct one. because as per 3rd b=true for that it will never go in the first if condition.            <br/>            <small><b>jenish</b> on <i>13 October 2012, at 08:10:08</i></small>            <br/>        . . .        </p>        <p>        The answer correct id option 2            <br/>            <small><b>Gildus</b> on <i>29 September 2012, at 01:09:51</i></small>            <br/>        . . .        </p>        <p>        true,false,true,false            <br/>            <small><b>anonymous</b> on <i>22 September 2012, at 06:09:51</i></small>            <br/>        . . .        </p>        <p>        Bando de viado da porra a resposta certa Ã© a 2            <br/>            <small><b>JoÃ£o Silva</b> on <i>31 July 2012, at 10:07:55</i></small>            <br/>        . . .        </p>        <p>        $a = true;<br/>Answer for above question should be <br/>as given below<br/>$b = false;<br/>$c = true;<br/>$d = false;            <br/>            <small><b>Vaman</b> on <i>23 July 2012, at 12:07:12</i></small>            <br/>        . . .        </p>        <p>        2 is the right answer.            <br/>            <small><b>Mohit Garg</b> on <i>10 July 2012, at 04:07:33</i></small>            <br/>        . . .        </p>        <p>        La respuesta correcta es la nÃºmero 3. No la 2.            <br/>            <small><b>jjyepez</b> on <i>13 June 2012, at 12:06:15</i></small>            <br/>        . . .        </p>        <p>        http://codepad.viper-7.com/7uDqp7            <br/>            <small><b>kevin</b> on <i>27 April 2012, at 06:04:20</i></small>            <br/>        . . .        </p>        <p>        Please correct the answer to option 2            <br/>            <small><b>anonymous</b> on <i>25 April 2012, at 09:04:39</i></small>            <br/>        . . .        </p>        <p>        Ð½Ñƒ Ñ‡Ñ‚Ð¾ Ñ‚Ð°Ðº ÑÐ»Ð¾Ð¶Ð½Ð¾ Ð¸ÑÐ¿Ñ€Ð°Ð²Ð¸Ñ‚ÑŒ? Ð¿Ñ€Ð°Ð²Ð¸Ð»ÑŒÐ½Ñ‹Ð¹ Ð¾Ñ‚Ð²ÐµÑ‚ = 2            <br/>            <small><b>anonymous</b> on <i>20 March 2012, at 11:03:52</i></small>            <br/>        . . .        </p>        <p>        True, False, True, False option is the answer.<br/>Option: 2            <br/>            <small><b>anonymous</b> on <i>16 December 2011, at 11:12:46</i></small>            <br/>        . . .        </p>        <p>        2 is right question.            <br/>            <small><b>Nikolaev V.</b> on <i>9 November 2011, at 09:11:21</i></small>            <br/>        . . .        </p>        <p>        A resposta apontada no exercÃ­cio estÃ¡ incorreta. O certo seria a opÃ§ao 2.            <br/>            <small><b>Diogo Corazolla</b> on <i>6 October 2011, at 07:10:43</i></small>            <br/>        . . .        </p>        <p>        2 is the correct answer            <br/>            <small><b>vijay</b> on <i>29 September 2011, at 09:09:45</i></small>            <br/>        . . .        </p>        <p>        a 2 Ã© a certa            <br/>            <small><b>Alysson Rafael</b> on <i>20 September 2011, at 03:09:48</i></small>            <br/>        . . .        </p>        <p>        a opcao 2 e a correta. a resposta desta questao esta errada.            <br/>            <small><b>rafa.acss</b> on <i>29 August 2011, at 09:08:13</i></small>            <br/>        . . .        </p>        <p>        it\'s wrong. option 2\'s true.            <br/>            <small><b>anonymous</b> on <i>19 July 2011, at 12:07:55</i></small>            <br/>        . . .        </p>        <p>        answer is true false true false<br/>run this program and check it<br/><br/>            <br/>            <small><b>anonymous</b> on <i>7 July 2011, at 04:07:02</i></small>            <br/>        . . .        </p>        <p>        2 has to be the right answer otherwise the code will never go inside this if clause if($a && !$b)            <br/>            <small><b>anonymous</b> on <i>29 June 2011, at 04:06:24</i></small>            <br/>        . . .        </p>        <p>        right answer is #2            <br/>            <small><b>anonymous</b> on <i>24 June 2011, at 01:06:02</i></small>            <br/>        . . .        </p>        <p>        I\'ve tried it: 2. is correct, 3. would return $number = 5            <br/>            <small><b>Steph</b> on <i>17 June 2011, at 01:06:59</i></small>            <br/>        . . .        </p>        <p>        potomy 4to 2 a ne 3 ))))            <br/>            <small><b>Batin</b> on <i>9 June 2011, at 02:06:34</i></small>            <br/>        . . .        </p>        <p>        the correct answer is 2  if(TRUE && !FALSE)            <br/>            <small><b>anonymous</b> on <i>31 May 2011, at 08:05:55</i></small>            <br/>        . . .        </p>        <p>        ÐŸÑ€Ð°Ð²Ð¸Ð»ÑŒÐ½Ñ‹Ð¹ Ð¾Ñ‚Ð²ÐµÑ‚ #2. (Rigth answer #2)            <br/>            <small><b>PROgrammaster</b> on <i>24 May 2011, at 11:05:57</i></small>            <br/>        . . .        </p>        <p>        nikak ne mogu ponyat, pochemu 3?            <br/>            <small><b>anonymous</b> on <i>11 May 2011, at 01:05:29</i></small>            <br/>        . . .        </p>        <p>        The correct answer is 2 run in php 4  and 5            <br/>            <small><b>@DsarrollandoWeb</b> on <i>2 May 2011, at 07:05:35</i></small>            <br/>        . . .        </p>        <p>        a must be true and b must be false in order to pass the first if. c must be true and d must be false in order to pass the second if. but then the third if is never true because d is false... i think it\'s impossibile for $number to be equal with 3.            <br/>            <small><b>anonymous</b> on <i>17 April 2011, at 07:04:26</i></small>            <br/>        . . .        </p>        <p>        A nÃºmero 2 esta correta, pois $a e $b tem que ser true e false, para passar.            <br/>            <small><b>Alfredo</b> on <i>5 April 2011, at 04:04:18</i></small>            <br/>        . . .        </p>        <p>        number 2 is correct not 3            <br/>            <small><b>anonymous</b> on <i>10 March 2011, at 03:03:57</i></small>            <br/>        . . .        </p>        <p>        Only from the first if statement we can guess answer is 2 NOT 3.            <br/>            <small><b>Gagan Charaya</b> on <i>20 January 2011, at 03:01:03</i></small>            <br/>        . . .        </p>        <p>        Only from the first if statement we can guess answer is 2 NOT 3.            <br/>            <small><b>Gagan Charaya</b> on <i>20 January 2011, at 03:01:17</i></small>            <br/>        . . .        </p>        <p>        Only from the first if statement we can guess answer is 2 NOT 3.            <br/>            <small><b>Gagan Charaya</b> on <i>20 January 2011, at 03:01:08</i></small>            <br/>        . . .        </p>        <p>        Only from the first if statement we can guess answer is 2 NOT 3.            <br/>            <small><b>Gagan Charaya</b> on <i>20 January 2011, at 03:01:47</i></small>            <br/>        . . .        </p>        <p>        2 polubomu (:            <br/>            <small><b>anonymous</b> on <i>23 December 2010, at 04:12:31</i></small>            <br/>        . . .        </p>        <p>        why marked 3?            <br/>            <small><b>anonymous</b> on <i>20 December 2010, at 10:12:56</i></small>            <br/>        . . .        </p>        <p>        Yes, the correct answer is 2.            <br/>            <small><b>marius</b> on <i>13 November 2010, at 10:11:07</i></small>            <br/>        . . .        </p>        <p>        I think all above are right and right answer is 2.            <br/>            <small><b>Faisal</b> on <i>19 October 2010, at 11:10:54</i></small>            <br/>        . . .        </p>        <p>        it\'s (2)            <br/>            <small><b>Veresc</b> on <i>13 September 2010, at 09:09:39</i></small>            <br/>        . . .        </p>        <p>        The given answer is wrong, its (2) in fact...            <br/>            <small><b>Liju P M</b> on <i>13 July 2010, at 04:07:05</i></small>            <br/>        . . .        </p>        <p>        yes, it is (2)            <br/>            <small><b>Joro</b> on <i>30 May 2010, at 10:05:18</i></small>            <br/>        . . .        </p>        <p>        Indeed, â„–2 is correct            <br/>            <small><b>Prophet</b> on <i>12 May 2010, at 06:05:03</i></small>            <br/>        . . .        </p>        <p>        this is wrong, right answer is 2 indeed            <br/>            <small><b>anonymous</b> on <i>15 March 2010, at 08:03:31</i></small>            <br/>        . . .        </p>        <p>        this is wrong it\'s (2)            <br/>            <small><b>anonymous</b> on <i>5 January 2010, at 07:01:16</i></small>            <br/>        . . .        </p>",
c167: "<p>    DTD is document type definition,i think here document types mean data with the same name,thus namespaces :-?        <br/>        <small><b>Radu</b> on <i>9 May 2013, at 08:05:53</i></small>        <br/>    . . .    </p>        <p>        the questions says two different document types, not two different namespaces. A zend engineer can be wrong.            <br/>            <small><b>anonymous</b> on <i>13 July 2012, at 10:07:03</i></small>            <br/>        . . .        </p>        <p>        #4 Namespaces is correct answer, because it avoids any potential naming conflicts when two elements of the same<br/>name exist yet contain different types of data            <br/>            <small><b>babs</b> on <i>9 July 2012, at 11:07:31</i></small>            <br/>        . . .        </p>        <p>        i found an answer in internet from a zend engineer, he says that Namespaces is correct answer... now I really don\'t know what should i believe???            <br/>            <small><b>anonymous</b> on <i>9 July 2012, at 09:07:18</i></small>            <br/>        . . .        </p>        <p>        From Wikipedia: \"A Document Type Definition (DTD) is a set of markup declarations that define a document type...\" Note that document type is singular. The way the question is written implies the would be two DTDs in a single XML document. Is this even possible? I think this question is talking about namespaces, but just poorly phrased. I am not an XML expert, if someone has other info please supply a link to your proof so we can settle the answer this question.            <br/>            <small><b>anonymous</b> on <i>30 June 2012, at 08:06:59</i></small>            <br/>        . . .        </p>        <p>        #4 is correct, since it can happen to have any potential naming conflicts            <br/>            <small><b>babs</b> on <i>27 June 2012, at 02:06:55</i></small>            <br/>        . . .        </p>        <p>        DTD            <br/>            <small><b>Mahesh</b> on <i>17 December 2011, at 07:12:06</i></small>            <br/>        . . .        </p>        <p>        The question is badly phrased.  If you\'re trying to validate an XML document, then DTD is the answer, as they can be used to flag up invalid elements.  If you\'re trying to have \"duplicate\" data from multiple sources in a single document, then the answer is namespaces.  I\'d be inclined to think the question is asking about validation and answer DTDs, but it\'s a guess...            <br/>            <small><b>juice</b> on <i>14 April 2011, at 11:04:32</i></small>            <br/>        . . .        </p>        <p>        namespaces?            <br/>            <small><b>anonymous</b> on <i>24 January 2011, at 01:01:05</i></small>            <br/>        . . .        </p>        <p>        DTD            <br/>            <small><b>anonymous</b> on <i>28 October 2010, at 05:10:30</i></small>            <br/>        . . .        </p>        <p>        namespaces            <br/>            <small><b>anonymous</b> on <i>7 January 2010, at 03:01:30</i></small>            <br/>        . . .        </p>",
c172: "<p>    Definitely 2 is the correct answer        <br/>        <small><b>anonymous</b> on <i>29 June 2011, at 09:06:39</i></small>        <br/>    . . .    </p>        <p>        Answer is 2.            <br/>            <small><b>Peter</b> on <i>15 April 2010, at 01:04:22</i></small>            <br/>        . . .        </p>",
c238: "<p>    1dotEach is not a valid function name        <br/>        <small><b>anonymous</b> on <i>17 September 2012, at 01:09:33</i></small>        <br/>    . . .    </p>        <p>        Parse Error: Syntax Error            <br/>            <small><b>Sveta</b> on <i>26 July 2012, at 09:07:04</i></small>            <br/>        . . .        </p>        <p>        SYNTAX ERROR<br/>READY<br/>_            <br/>            <small><b>anonymous</b> on <i>18 July 2012, at 07:07:36</i></small>            <br/>        . . .        </p>        <p>        Option 2. Functions\'names can not start with number            <br/>            <small><b>ruminir</b> on <i>18 November 2010, at 01:11:44</i></small>            <br/>        . . .        </p>        <p>        Option 2.            <br/>            <small><b>anonymous</b> on <i>5 November 2010, at 02:11:11</i></small>            <br/>        . . .        </p>        <p>        Parse Error: Syntax Error            <br/>            <small><b>anonymous</b> on <i>17 March 2010, at 07:03:25</i></small>            <br/>        . . .        </p>",
c76: "<p>    Cryptography Extensions (hash) is not part of the exam BTW. That leaves md5().        <br/>        <small><b>k</b> on <i>6 October 2012, at 08:10:06</i></small>        <br/>    . . .    </p>        <p>        Very confusing question.  \"Determined\" can mean \"set\" as in creating, or \"ascertained\" as in cracking...            <br/>            <small><b>anonymous</b> on <i>18 September 2011, at 08:09:08</i></small>            <br/>        . . .        </p>        <p>        1. \"md5()\" is a correct answer although starting with PHP 5.1.2 there is in fact a hash() function from the Hash extension (which internally uses md5, sha1 or others). I guess the test is just too old :)            <br/>            <small><b>lathspell</b> on <i>11 July 2010, at 09:07:27</i></small>            <br/>        . . .        </p>        <p>        hash() est utilise pour les emprintes numerique donc la reponse est \"4\"            <br/>            <small><b>amine ismaili alaoui</b> on <i>30 June 2010, at 07:06:20</i></small>            <br/>        . . .        </p>",
c109: "<p>    correct answer is 3 .see the details in :http://php.net/manual/en/function.header.php        <br/>        <small><b>mohit garg</b> on <i>15 April 2013, at 06:04:36</i></small>        <br/>    . . .    </p>        <p>        #3 is correct. the function is ob_start            <br/>            <small><b>anonymous</b> on <i>9 July 2012, at 06:07:27</i></small>            <br/>        . . .        </p>        <p>        to comment posted on 29 May 2010: the link you provide does have the answer. But the answer given is output buffering, not header buffering.            <br/>            <small><b>anonymous</b> on <i>14 June 2012, at 03:06:28</i></small>            <br/>        . . .        </p>        <p>        correct answer is 3. You can use output buffering to get around this problem, with the overhead of all of your output to the browser being buffered in the server until you send it. You can do this by calling ob_start() and ob_end_flush() in your script, or setting the output_buffering configuration directive on in your php.ini or server configuration files.            <br/>            <small><b>anonymous</b> on <i>2 December 2010, at 04:12:47</i></small>            <br/>        . . .        </p>        <p>        so, i think that 1. is right, see the details in :http://php.net/manual/en/function.header.php            <br/>            <small><b>anonymous</b> on <i>29 May 2010, at 08:05:49</i></small>            <br/>        . . .        </p>        <p>        While output buffering is active no output is sent from the script (other than headers), instead the output is stored in an internal buffer.<br/><br/>from here:http://php.net/manual/en/function.ob-start.php            <br/>            <small><b>anonymous</b> on <i>29 May 2010, at 08:05:25</i></small>            <br/>        . . .        </p>",
c95: "<p>    2. is correct        <br/>        <small><b>kri</b> on <i>24 June 2012, at 07:06:38</i></small>        <br/>    . . .    </p>        <p>        Doesn\'t this question full under HTML?            <br/>            <small><b>anonymous</b> on <i>12 July 2011, at 11:07:31</i></small>            <br/>        . . .        </p>        <p>        Answer is 2 - see http://onlinetools.org/tricks/using_multiple_select.php            <br/>            <small><b>anonymous</b> on <i>16 March 2011, at 11:03:26</i></small>            <br/>        . . .        </p>        <p>        Answer 2 is correct as only [] makes it an array which can store multiple answers.            <br/>            <small><b>lathspell</b> on <i>14 July 2010, at 08:07:35</i></small>            <br/>        . . .        </p>        <p>        myselectbox \"answer 5\"            <br/>            <small><b>amine ismaili alaoui</b> on <i>1 July 2010, at 02:07:33</i></small>            <br/>        . . .        </p>",
c119: "<p>    4 and 5 - why do people say 1 ? i have never seen an error which contained some session information, not even the session id.        <br/>        <small><b>anonymous</b> on <i>9 July 2012, at 07:07:41</i></small>        <br/>    . . .    </p>        <p>        #1 is a correct statement, as per the note below, but #5 is more correct.            <br/>            <small><b>anonymous</b> on <i>20 June 2012, at 12:06:47</i></small>            <br/>        . . .        </p>        <p>        nowhere does it say in answer #1 that error message will ALWAYS contain sensitive session information. It says it will. And if it will contain sensitive info 1 out of 100 times, that\'s still a correct statement.            <br/>            <small><b>anonymous</b> on <i>14 June 2012, at 03:06:30</i></small>            <br/>        . . .        </p>        <p>        1 is wrong, because error NOT always contains session information.<br/>2 and 3 are nonsence.<br/>4 is right. User shoud not see ugly error messages.<br/>5 is right. Error information can contain passwords or attacker can see web root path, and so on.            <br/>            <small><b>anonymous</b> on <i>14 August 2011, at 04:08:53</i></small>            <br/>        . . .        </p>        <p>        ans is 4 and 5            <br/>            <small><b>Nur Ahmed</b> on <i>19 March 2011, at 05:03:04</i></small>            <br/>        . . .        </p>        <p>        Maybe the question is not very well formulated and they want to know why it is not ok to show errors but it is ok to log them. In this case answers would be 5 and 3<br/>            <br/>            <small><b>Diz</b> on <i>30 September 2010, at 08:09:23</i></small>            <br/>        . . .        </p>        <p>        1. and 5. would be a bit redundant.<br/>I ruled out 1. because they just \"can\" but not always \"will\" and would go instead with 2.            <br/>            <small><b>lathspell</b> on <i>14 July 2010, at 08:07:27</i></small>            <br/>        . . .        </p>        <p>        i think here is 1 and 5, see 4, \"perception of insecurity to the user\" ?            <br/>            <small><b>anonymous</b> on <i>29 May 2010, at 08:05:23</i></small>            <br/>        . . .        </p>",
c136: "<p>    this question is not worth studying if you ask me        <br/>        <small><b>anonymous</b> on <i>13 July 2012, at 10:07:17</i></small>        <br/>    . . .    </p>        <p>        Answer 4, C,C,C - because the $y is referenced to $z            <br/>            <small><b>anonymous</b> on <i>9 July 2012, at 07:07:46</i></small>            <br/>        . . .        </p>        <p>        i got this result<br/><br/>Strict Standards: Only variables should be assigned by reference in C:&#92;xampp&#92;htdocs&#92;OOP&#92;content&#92;dump.php on line 9<br/><br/>Strict Standards: Only variables should be assigned by reference in C:&#92;xampp&#92;htdocs&#92;OOP&#92;content&#92;dump.php on line 9<br/><br/>Strict Standards: Only variables should be assigned by reference in C:&#92;xampp&#92;htdocs&#92;OOP&#92;content&#92;dump.php on line 9<br/>array(3) { [0]=> (1) \"c\" [1]=> (1) \"c\" [2]=> (1) \"c\" }            <br/>            <small><b>anonymous</b> on <i>3 June 2012, at 01:06:11</i></small>            <br/>        . . .        </p>        <p>        no no, it\'s the same result in PHP 4.4.X and PHP 5. So 4 only.            <br/>            <small><b>anonymous</b> on <i>22 January 2012, at 10:01:50</i></small>            <br/>        . . .        </p>        <p>        2 and 4.  The difference in PHP 5 is that the foreach construct now supports by-reference declaration of the value element.  The $z[] =& $y; statement will not pass by reference in PHP 4, and thus, the array will remain unchanged.            <br/>            <small><b>anonymous</b> on <i>19 September 2011, at 12:09:15</i></small>            <br/>        . . .        </p>        <p>        I have checked on php 4.4.9 and php 5.2.11 and result was the same: array(\'c\', \'c\', \'c\')            <br/>            <small><b>anonymous</b> on <i>23 March 2011, at 02:03:58</i></small>            <br/>        . . .        </p>        <p>        Correct Answer: 2 and 4.            <br/>            <small><b>anonymous</b> on <i>15 November 2010, at 02:11:24</i></small>            <br/>        . . .        </p>        <p>        imho 2,4 ... but didn\'t check it            <br/>            <small><b>Loo</b> on <i>5 April 2010, at 06:04:16</i></small>            <br/>        . . .        </p>",
c94: "<p>    The question is NOT asking which function to call if you want to change the session id. It is asking how you change which function is called for generation of the session id. Tricky, and the link on the previous comment is all the proof you need that #1 is the answer.        <br/>        <small><b>anonymous</b> on <i>6 July 2012, at 11:07:32</i></small>        <br/>    . . .    </p>        <p>        1 is the answer.  http://us2.php.net/manual/en/session.configuration.php#ini.session.hash-function            <br/>            <small><b>anonymous</b> on <i>18 September 2011, at 10:09:52</i></small>            <br/>        . . .        </p>        <p>        The question is NOT abount changing session id, but abount FUNCTION to do this. There is no function in PHP that could register custom session handler. So, answer 5 not full. You must not only impement handler, but also \'Set the session id by force using the session_id() function\'. Or you can use INI directive to change function from md5() to sha1().            <br/>            <small><b>anonymous</b> on <i>11 August 2011, at 02:08:12</i></small>            <br/>        . . .        </p>        <p>        3 and 4 are correct            <br/>            <small><b>@DsarrollandoWeb</b> on <i>4 June 2011, at 12:06:06</i></small>            <br/>        . . .        </p>        <p>        3 is the correct answer, it changes the session id            <br/>            <small><b>iongion</b> on <i>19 January 2011, at 08:01:39</i></small>            <br/>        . . .        </p>        <p>        Question is quite confusing...I would agree with lathspell on this...            <br/>            <small><b>Liju P M</b> on <i>21 July 2010, at 04:07:03</i></small>            <br/>        . . .        </p>        <p>        To change the generation function from md5() to sha1() answer 1 would be the easiest. <br/>To change it to any other arbitrary function you would have to generate the id yourself and set it via session_id() i.e. answer 3.<br/>Hard to tell if the question was meant specific or universal...            <br/>            <small><b>lathspell</b> on <i>14 July 2010, at 08:07:50</i></small>            <br/>        . . .        </p>        <p>        the question is about the session ID generation function...the answer is 1            <br/>            <small><b>anonymous</b> on <i>11 April 2010, at 05:04:38</i></small>            <br/>        . . .        </p>        <p>        3 is right : session_id() is used to get or set the session id for the current session ...from php.net            <br/>            <small><b>loo</b> on <i>5 April 2010, at 05:04:48</i></small>            <br/>        . . .        </p>",
c62: "<p>    The array_unshift() function inserts new elements to an array. The new array values will be inserted in the beginning of the array<br/>\"Cat\",1=>\"Dog\");<br/>array_unshift($a,\"Horse\");<br/>print_r($a);<br/>?> <br/>Array ( [0] => Horse [1] => Cat [2] => Dog )        <br/>        <small><b>Gagan Charaya</b> on <i>21 January 2011, at 12:01:11</i></small>        <br/>    . . .    </p>        <p>        number \"4\"            <br/>            <small><b>amine ismaili alaoui</b> on <i>30 June 2010, at 11:06:57</i></small>            <br/>        . . .        </p>",
c33: "<p>    2 is correct        <br/>        <small><b>anonymous</b> on <i>16 August 2010, at 04:08:30</i></small>        <br/>    . . .    </p>        <p>        \"2\" is the correct.            <br/>            <small><b>amine ismaili alaoui</b> on <i>28 June 2010, at 07:06:55</i></small>            <br/>        . . .        </p>",
c118: "<p>    2, 3 and 4 are correct. The key in the 5th is \"executed\" ...        <br/>        <small><b>anonymous</b> on <i>22 April 2013, at 06:04:35</i></small>        <br/>    . . .    </p>        <p>        What with 5?            <br/>            <small><b>anur</b> on <i>19 April 2013, at 06:04:05</i></small>            <br/>        . . .        </p>        <p>        How can anyone hard code shell commands ? <br/>plus<br/>According to \"http://php.net/manual/en/function.escapeshellcmd.php\" , the answer 5 is also correct.            <br/>            <small><b>anonymous</b> on <i>18 March 2013, at 12:03:27</i></small>            <br/>        . . .        </p>        <p>        I would say 245            <br/>            <small><b>Inventor of the Wheel</b> on <i>16 July 2012, at 06:07:58</i></small>            <br/>        . . .        </p>        <p>        This one\'s a bit dubious/ambiguous.<br/><br/>Definitely, 4 & 5. - escapeshellarg() and escapeshellcmd(), respectively.<br/><br/>Most likely: 2,4,5<br/>Then: 3,4, 5<br/>            <br/>            <small><b>BothFireandWind</b> on <i>30 March 2011, at 02:03:21</i></small>            <br/>        . . .        </p>        <p>        Answer: 1. 3. 4.            <br/>            <small><b>anonymous</b> on <i>15 November 2010, at 02:11:48</i></small>            <br/>        . . .        </p>",
c108: "<p>    1 is right : headers_list â€” Returns a list of response headers sent (or ready to send)        <br/>        <small><b>Radu</b> on <i>9 May 2013, at 05:05:28</i></small>        <br/>    . . .    </p>        <p>        The answers provided are incorrect. Answer #1 checks if the \"Location:{$url}\" header was added to the headers list, not if it was sent to the browser. The check if the headers were sent (and trying to set more headers would result in a \"Headers already sent\" error, you can use headers_sent() ).            <br/>            <small><b>Vlad</b> on <i>7 March 2013, at 03:03:35</i></small>            <br/>        . . .        </p>        <p>        we cant choose headers_sent from the answers, the next logical answer would be #1            <br/>            <small><b>anonymous</b> on <i>9 July 2012, at 06:07:25</i></small>            <br/>        . . .        </p>        <p>        #1 is a correct answer. RTFM http://www.php.net/manual/en/function.headers-list.php headers_list() Returns a list of response headers sent (or ready to send). http://www.php.net/manual/en/function.headers-list.php            <br/>            <small><b>anonymous</b> on <i>7 July 2012, at 12:07:34</i></small>            <br/>        . . .        </p>        <p>        These Answers Are Wrong:<br/>http://php.net/manual/en/function.headers-sent.php            <br/>            <small><b>venki</b> on <i>1 February 2012, at 08:02:17</i></small>            <br/>        . . .        </p>        <p>        1. is right here, thought we can use headers_sent() to determine.            <br/>            <small><b>anonymous</b> on <i>29 May 2010, at 08:05:56</i></small>            <br/>        . . .        </p>        <p>        These answers are wrong, the following should be used:<br/><br/>if (!headers_sent()) {<br/>    header(\'Location: http://www.example.com/\');<br/>    exit;<br/>}            <br/>            <small><b>anonymous</b> on <i>31 March 2010, at 06:03:04</i></small>            <br/>        . . .        </p>",
c206: "<p>    1&4:<br/><br/>mode (string) - the type of access required for this stream (see Table 1 of the fopen() reference) <br/><br/>seekable (bool) - whether the current stream can be seeked.<br/>        <br/>        <small><b>Radu</b> on <i>9 May 2013, at 11:05:59</i></small>        <br/>    . . .    </p>        <p>        think that correct answers are 2 and 5. about 5, not all streams can be filtered as I know but some of them can.            <br/>            <small><b>ignat</b> on <i>27 October 2012, at 03:10:01</i></small>            <br/>        . . .        </p>        <p>        Streams are not always seekable. See http://php.net/manual/en/function.stream-get-meta-data.php            <br/>            <small><b>ignat</b> on <i>27 October 2012, at 03:10:41</i></small>            <br/>        . . .        </p>        <p>        1&4. see fseek            <br/>            <small><b>anonymous</b> on <i>8 June 2011, at 05:06:08</i></small>            <br/>        . . .        </p>        <p>        I think 1 & 4            <br/>            <small><b>shakedko</b> on <i>5 April 2010, at 05:04:35</i></small>            <br/>        . . .        </p>",
c209: "<p>    The answer is 2, because the Host request-header was introduced in HTTP/1.1 to facilitate name-based virtual hosting.        <br/>        <small><b>Bert-Jan</b> on <i>20 May 2012, at 10:05:38</i></small>        <br/>    . . .    </p>        <p>        i think the answer is 2 also, because it doesent matter for this script if request is blocking, it\'s default nature is to block unless you set it otherwise. but your HTTP request need\'s to be wellformed, or you\'re s***** ^^\' but that\'s just my opinion ^^            <br/>            <small><b>minato</b> on <i>3 August 2011, at 02:08:29</i></small>            <br/>        . . .        </p>        <p>        fread() and fgets() are functionally the same; fread() is binary safe.  Similarly, fputs() and fwrite are synonyms.  This leaves 1) and 2) as possible answers; 1) is true (the request is blocking) but 2) is also true, as the request string needs a double newline at the end for the server to recognise it as a valid request (e.g. \"GET / HTTP/1.0 \n\n\") - \"\r\n\" is a windows newline, not a double newline.  So I\'d suggest 2) as the answer...            <br/>            <small><b>juice</b> on <i>12 April 2011, at 11:04:19</i></small>            <br/>        . . .        </p>        <p>        I think, it\'s 2. Because HTTP request must be ended with double \"\n\" or \"\r\n\"            <br/>            <small><b>anonymous</b> on <i>11 February 2011, at 05:02:58</i></small>            <br/>        . . .        </p>        <p>        I think the answer is 3. fsockopen() returns a file pointer which may be used together with the other file functions (such as fgets(), fgetss(), fwrite(), fclose(), and feof()). http://www.php.net/manual/en/function.fsockopen.php            <br/>            <small><b>anonymous</b> on <i>28 December 2010, at 08:12:28</i></small>            <br/>        . . .        </p>        <p>        answer is 1            <br/>            <small><b>anonymous</b> on <i>6 August 2010, at 03:08:05</i></small>            <br/>        . . .        </p>        <p>        I believe the answer is 2.            <br/>            <small><b>Donia</b> on <i>19 April 2010, at 04:04:13</i></small>            <br/>        . . .        </p>",
c152: "<p>    #1 and #3 <br/>http://www.sqlite.org/datatype3.html: the database engine may convert values between numeric storage classes (INTEGER and REAL) and TEXT during query execution.        <br/>        <small><b>Vinod Kumar</b> on <i>1 July 2013, at 12:07:24</i></small>        <br/>    . . .    </p>        <p>        1,3            <br/>            <small><b>Loo</b> on <i>5 April 2010, at 06:04:51</i></small>            <br/>        . . .        </p>",
c55: "<p>    911 was an inside job.        <br/>        <small><b>anonymous</b> on <i>12 June 2012, at 05:06:34</i></small>        <br/>    . . .    </p>        <p>        all of this are valid, that\'s what makes php=>PHP            <br/>            <small><b>anonymous</b> on <i>6 June 2011, at 12:06:50</i></small>            <br/>        . . .        </p>        <p>        \"All of these uses are valid\"            <br/>            <small><b>Liju P M</b> on <i>16 July 2010, at 10:07:40</i></small>            <br/>        . . .        </p>        <p>        IMHO 2. \"All of these uses are valid\":<br/>1. yes, with only values<br/>3. yes, with key->value entries<br/>4. yes, using array_shift() and array_pop()<br/>5. yes, with key->value entries (same as 3)            <br/>            <small><b>lathspell</b> on <i>11 July 2010, at 09:07:26</i></small>            <br/>        . . .        </p>        <p>        i think im not sure, if not the correct answer is 3            <br/>            <small><b>amine ismaili alaoui</b> on <i>30 June 2010, at 01:06:52</i></small>            <br/>        . . .        </p>        <p>        correct answer is 5            <br/>            <small><b>amine ismaili alaoui</b> on <i>30 June 2010, at 01:06:46</i></small>            <br/>        . . .        </p>",
c221: "<p>    I don\'t understand this question... but after reading the answers I assume the question should be \"How can you append data to an existing file on the ftp server?\" - so I guess #1 is right...        <br/>        <small><b>anonymous</b> on <i>18 July 2012, at 07:07:46</i></small>        <br/>    . . .    </p>        <p>        Setting the \"w+\" flag on fopen will not work; you need to set the \"overwrite\" stream context option, as per the link below.            <br/>            <small><b>juice</b> on <i>12 April 2011, at 11:04:41</i></small>            <br/>        . . .        </p>        <p>        Yes, it\'s #1            <br/>            <small><b>anonymous</b> on <i>11 February 2011, at 05:02:13</i></small>            <br/>        . . .        </p>        <p>        I believe it\'s options 1 as per http://uk2.php.net/manual/en/context.ftp.php and the overwrite option            <br/>            <small><b>phiali</b> on <i>10 January 2011, at 05:01:43</i></small>            <br/>        . . .        </p>        <p>        number 4            <br/>            <small><b>anonymous</b> on <i>23 May 2010, at 09:05:01</i></small>            <br/>        . . .        </p>",
c85: "<p>    2. strtok        <br/>        <small><b>anonymous</b> on <i>13 May 2013, at 02:05:06</i></small>        <br/>    . . .    </p>        <p>        The answer shud b strtok(), but it have to be called in a loop to get the correct output..            <br/>            <small><b>Ryan</b> on <i>18 February 2013, at 07:02:03</i></small>            <br/>        . . .        </p>        <p>        ALL ANSWER WRONG<br/>var_dump(strsplit($string, \"\t\n\")); //OUTPUTS Fatal error: Call to undefined function strsplit()<br/>var_dump(str_split($string, \"\t\n\")); //OUTPUTS NULL => Warning: str_split() expects parameter 2 to be long, string given  <br/>var_dump(strtok($string, \"\t\n\")); //OUTPUTS string(4) \"John\" <br/>var_dump(strstr($string, \"\t\n\")); //OUTPUTS bool(false) <br/>var_dump(explode(\"\t\n\", $string)); //OUTPUTS array(1) { [0]=> string(19) \"John Mark Ted Larry\" }            <br/>            <small><b>anonymous</b> on <i>14 September 2012, at 01:09:46</i></small>            <br/>        . . .        </p>        <p>        I hope, the answers in real test are better than the answers here.            <br/>            <small><b>anonymous</b> on <i>9 July 2012, at 06:07:28</i></small>            <br/>        . . .        </p>        <p>        The buttons on this test should be renamed \"show the possible right answer\"            <br/>            <small><b>spongebob</b> on <i>12 June 2012, at 09:06:58</i></small>            <br/>        . . .        </p>        <p>        http://codepad.viper-7.com/WmD1bJ            <br/>            <small><b>kevin</b> on <i>29 April 2012, at 10:04:29</i></small>            <br/>        . . .        </p>        <p>        strtok best solution:<br/>http://codepad.viper-7.com/WmD1bJ            <br/>            <small><b>anonymous</b> on <i>29 April 2012, at 10:04:02</i></small>            <br/>        . . .        </p>        <p>        Correct answer 2. RTFM<br/>http://php.net/manual/en/function.strtok.php            <br/>            <small><b>anonymous</b> on <i>23 March 2012, at 04:03:41</i></small>            <br/>        . . .        </p>        <p>        @anonymous<br/>\"tried it out and 4 is correct\"<br/>try it out your ass! I hate morons posting false answers here. 2 is the correct answer, although to fully parse the string the call would have to be placed in a cycle.            <br/>            <small><b>evll</b> on <i>22 March 2012, at 08:03:06</i></small>            <br/>        . . .        </p>        <p>        In my opinion, all answers are wrong. explode function will search by \"\t\n\" sequence and the string have \"\t\" and \"\n\" separated. $string won\'t be parsed and split.            <br/>            <small><b>Rafael M. Salvioni</b> on <i>25 January 2012, at 02:01:04</i></small>            <br/>        . . .        </p>        <p>        tried it out and 4 is correct            <br/>            <small><b>anonymous</b> on <i>10 January 2012, at 08:01:56</i></small>            <br/>        . . .        </p>        <p>        I believe 3 is right ansver            <br/>            <small><b>Mahesh Khan</b> on <i>14 December 2011, at 12:12:17</i></small>            <br/>        . . .        </p>        <p>        4 is correct.  strsplit does not exist.  strtok returns only the first name and dismisses the rest of the string.  strstr never finds an occurrence where \t&#92;n are together, let alone parse the string.  Explode returns a single element array with the names intact and separated by a space, on boundaries formed by the explode delimiter.            <br/>            <small><b>anonymous</b> on <i>18 September 2011, at 09:09:36</i></small>            <br/>        . . .        </p>        <p>        strtok($string, \"\t\n\");            <br/>            <small><b>anonymous</b> on <i>29 July 2010, at 11:07:37</i></small>            <br/>        . . .        </p>        <p>        strtok($string, \"\t\n\"); should be the right answer            <br/>            <small><b>Liju P M</b> on <i>20 July 2010, at 08:07:52</i></small>            <br/>        . . .        </p>        <p>        2 is the right answer            <br/>            <small><b>shakedko</b> on <i>5 April 2010, at 05:04:29</i></small>            <br/>        . . .        </p>        <p>        I think that option 2 is the correct answer            <br/>            <small><b>anonymous</b> on <i>1 April 2010, at 07:04:25</i></small>            <br/>        . . .        </p>",
c41: "<p>    allow_url_include would be a better answer, but it needs allow_url_fopen to work: http://www.php.net/manual/en/filesystem.configuration.php#ini.allow-url-fopen        <br/>        <small><b>anonymous</b> on <i>25 June 2012, at 09:06:12</i></small>        <br/>    . . .    </p>        <p>        Update please, php 5.2 correct is \'allow_url_include\' set  to 0            <br/>            <small><b>anonymous</b> on <i>25 October 2011, at 05:10:07</i></small>            <br/>        . . .        </p>        <p>        reponse \"4\"            <br/>            <small><b>amine ismaili alaoui</b> on <i>29 June 2010, at 11:06:50</i></small>            <br/>        . . .        </p>",
c81: "<p>    answer is 1 : http://php.net/manual/en/function.strcmp.php        <br/>        <small><b>jenish</b> on <i>19 October 2012, at 10:10:29</i></small>        <br/>    . . .    </p>        <p>        php doc says that strcmp is binary safe, so I assume #1 is right.            <br/>            <small><b>Adolf PHP</b> on <i>15 July 2012, at 06:07:07</i></small>            <br/>        . . .        </p>        <p>        According to this question the right answer is \'3\', toveriffy just executes strcmp(1,\'1\') which returns 0 that\'s false in binary comparison since they\'re same Type            <br/>            <small><b>babs</b> on <i>26 June 2012, at 02:06:50</i></small>            <br/>        . . .        </p>        <p>        This question is wrong on the practice exam. The question states two variables, not strings. strcmp and strcasecmp only compare strings, they don\'t offer the same behaviour for other types such as arrays and objects which also can be contained within a variable. The valid answer here is 3.            <br/>            <small><b>Stephen</b> on <i>16 April 2012, at 06:04:32</i></small>            <br/>        . . .        </p>        <p>        Answer is 1<br/>            <br/>            <small><b>Hasn</b> on <i>15 September 2011, at 01:09:10</i></small>            <br/>        . . .        </p>        <p>        I thins answer is 3, for example two variables can be arrays.            <br/>            <small><b>anonymous</b> on <i>1 December 2010, at 11:12:56</i></small>            <br/>        . . .        </p>        <p>        yah, strcmp() is binary safe.            <br/>            <small><b>anonymous</b> on <i>29 May 2010, at 02:05:34</i></small>            <br/>        . . .        </p>        <p>        \"strcmp â€” Binary safe string comparison\"<br/>I think answer is 1            <br/>            <small><b>anonymous</b> on <i>11 April 2010, at 05:04:34</i></small>            <br/>        . . .        </p>",
c53: "<p>    asort()        <br/>        <small><b>anonymous</b> on <i>17 October 2012, at 06:10:50</i></small>        <br/>    . . .    </p>        <p>        yes I agree, this test is a complete fail... good that there is the comment section! asort is the right answer.            <br/>            <small><b>anonymous</b> on <i>8 July 2012, at 04:07:42</i></small>            <br/>        . . .        </p>        <p>        #1 asort()            <br/>            <small><b>anonymous</b> on <i>22 June 2012, at 08:06:00</i></small>            <br/>        . . .        </p>        <p>        MORE WRONG ANSWERS THAN RIGHT ANSWERS WITH THIS TEST, STILL GOOD STUDY BUT IT MAKES YOU WONDER            <br/>            <small><b>anonymous</b> on <i>12 June 2012, at 05:06:22</i></small>            <br/>        . . .        </p>        <p>        only 1 can be right because asort means sort ascendingly using value.            <br/>            <small><b>anonymous</b> on <i>29 June 2011, at 07:06:35</i></small>            <br/>        . . .        </p>        <p>        #1 is right<br/>http://us.php.net/manual/en/function.asort.php            <br/>            <small><b>anonymous</b> on <i>6 June 2011, at 12:06:21</i></small>            <br/>        . . .        </p>        <p>        asort() is the function            <br/>            <small><b>jiril</b> on <i>3 June 2011, at 08:06:59</i></small>            <br/>        . . .        </p>        <p>        it will 1            <br/>            <small><b>anonymous</b> on <i>5 February 2011, at 06:02:38</i></small>            <br/>        . . .        </p>        <p>        1. asort() is correct!            <br/>            <small><b>ruminir</b> on <i>18 November 2010, at 03:11:29</i></small>            <br/>        . . .        </p>        <p>        sort() will sort the array in ascending order but will lose the key associations. ksort() and krsort() will sort the array by keys not values in ascending and descending order respectively. usort() will sort an array by its values using a user-supplied comparison function but lose keys associations. asort() is the right answer.            <br/>            <small><b>Faisal</b> on <i>23 October 2010, at 10:10:09</i></small>            <br/>        . . .        </p>        <p>        #1 is the correct answer            <br/>            <small><b>anonymous</b> on <i>7 September 2010, at 05:09:26</i></small>            <br/>        . . .        </p>        <p>        1 is my answer            <br/>            <small><b>anonymous</b> on <i>16 August 2010, at 04:08:19</i></small>            <br/>        . . .        </p>        <p>        asort() is the right answer!            <br/>            <small><b>Liju P M</b> on <i>16 July 2010, at 07:07:48</i></small>            <br/>        . . .        </p>        <p>        Answer is 1. asort()            <br/>            <small><b>Peter</b> on <i>14 April 2010, at 01:04:11</i></small>            <br/>        . . .        </p>        <p>        ksort() will sort by key, not by value            <br/>            <small><b>anonymous</b> on <i>17 March 2010, at 07:03:54</i></small>            <br/>        . . .        </p>        <p>        think this one should be asort()            <br/>            <small><b>ph</b> on <i>2 February 2010, at 09:02:38</i></small>            <br/>        . . .        </p>",
c97: "<p>    2. $_FILES[\'fieldname\'][\'tmp_name\']        <br/>        <small><b>anonymous</b> on <i>3 September 2010, at 02:09:07</i></small>        <br/>    . . .    </p>",
c27: "<p>    There is nothing wrong with this code, it executes without any problems. The name of the function is a bit odd though, because it does not exactly duplicate an object.        <br/>        <small><b>anonymous</b> on <i>15 June 2013, at 05:06:24</i></small>        <br/>    . . .    </p>        <p>        Clas is not defined and you are asking what is wrong with this code            <br/>            <small><b>Ritika 9988665544</b> on <i>9 April 2013, at 10:04:39</i></small>            <br/>        . . .        </p>        <p>        How to assume that the programmer is trying to _Clone_ the object in the given code?            <br/>            <small><b>anonymous</b> on <i>17 March 2013, at 03:03:40</i></small>            <br/>        . . .        </p>        <p>        there is a lot of mess in this code... MyClass does not exist, setValue is also not existent.. this code is not complete.. -.-            <br/>            <small><b>anonymous</b> on <i>8 July 2012, at 12:07:42</i></small>            <br/>        . . .        </p>        <p>        There\'s nothing \'wrong\' with this code, it might just not do what you expect!            <br/>            <small><b>Adam</b> on <i>23 April 2012, at 07:04:08</i></small>            <br/>        . . .        </p>        <p>        When you assign an object from one variable to another, you do not copy it, but merely assign a handle or reference to it. When actually want to assign a full copy of an existing object to a new variable. This is known as cloning, and is done via the clone operator. i.e. $newObj = clone $obj;            <br/>            <small><b>Faisal</b> on <i>20 October 2010, at 09:10:55</i></small>            <br/>        . . .        </p>        <p>        When you assign an object from one variable to another, you do not copy it, but merely assign a handle or reference to it. Statement $newObj = $obj; will not create a new copy of the object. It will assign the reference of  object to $newObj. to make a duplicate copy use clone operator. i.e $newObj = clone $obj;            <br/>            <small><b>Faisal</b> on <i>20 October 2010, at 09:10:48</i></small>            <br/>        . . .        </p>        <p>        pour cette question, nous devons savoir si ce script sera execute sous PHP4 ou PHP5; s\'il tourne sous PHP4 la bonne reponse sera \"2\", mais s\'il tourne sous PHP5 la bonne reponse sera numero \"4\". on suppose qu\'on execute le script sous PHP5 la bonne reponse est \"4\"            <br/>            <small><b>amine ismaili alaoui</b> on <i>28 June 2010, at 12:06:57</i></small>            <br/>        . . .        </p>",
c48: "<p>    attention to the picture  https://www.owasp.org/index.php/Session_fixation        <br/>        <small><b>anonymous</b> on <i>5 September 2012, at 12:09:19</i></small>        <br/>    . . .    </p>        <p>        If you was enabled <br/>the session.use_only_cookies or session.use_cookies <br/>it can not be.<br/>Even if these directives was disabled, you can simply open request http://www.zend.com/?PHPSESSID=123 <br/>and it does not matter, <br/>because server doesn\'t have session id is 123.<br/>We can not change directly session id and keep previous session data.<br/>Then I think true answer is 1.            <br/>            <small><b>Andrey Kovsh</b> on <i>3 June 2012, at 02:06:38</i></small>            <br/>        . . .        </p>        <p>        How to fixate a session if session didn\'t start??? I think 1.            <br/>            <small><b>Bob</b> on <i>23 November 2011, at 09:11:07</i></small>            <br/>        . . .        </p>        <p>        2 is the correct answer.  See here for further information... http://shiflett.org/articles/session-fixation            <br/>            <small><b>anonymous</b> on <i>18 September 2011, at 07:09:13</i></small>            <br/>        . . .        </p>        <p>        Answer 1            <br/>            <small><b>anonymous</b> on <i>12 May 2011, at 04:05:33</i></small>            <br/>        . . .        </p>        <p>        correct answer is number 2            <br/>            <small><b>amine ismaili alaoui</b> on <i>30 June 2010, at 12:06:15</i></small>            <br/>        . . .        </p>",
c169: "<p>    SAX is the right answer        <br/>        <small><b>anonymous</b> on <i>2 February 2013, at 01:02:50</i></small>        <br/>    . . .    </p>        <p>        Sucks            <br/>            <small><b>anonymous</b> on <i>9 November 2011, at 11:11:47</i></small>            <br/>        . . .        </p>        <p>        sax            <br/>            <small><b>anonymous</b> on <i>6 August 2010, at 02:08:24</i></small>            <br/>        . . .        </p>        <p>        SAX            <br/>            <small><b>anonymous</b> on <i>12 April 2010, at 05:04:45</i></small>            <br/>        . . .        </p>",
c111: "<p>    number 3. p.s. i agree with lathspell about fourth question: uahh...        <br/>        <small><b>minato</b> on <i>4 August 2011, at 10:08:34</i></small>        <br/>    . . .    </p>        <p>        1. is wrong because situations tend to always get out of control *g*<br/>2. is wrong because the data is only secured while transmitted but then stored unencrypted on the users hard drive for any trojans to read<br/>3. the best you can do (except not sending sensitive information via Cookie at all)<br/>4. uahh...            <br/>            <small><b>lathspell</b> on <i>14 July 2010, at 08:07:49</i></small>            <br/>        . . .        </p>        <p>        cookies should never ever contain sensitive data - it\'s 1            <br/>            <small><b>ren</b> on <i>5 July 2010, at 09:07:17</i></small>            <br/>        . . .        </p>        <p>        imho it\'s 2            <br/>            <small><b>Loo</b> on <i>5 April 2010, at 05:04:00</i></small>            <br/>        . . .        </p>",
c234: "<p>    PHP 4 would throw an error<br/>PHP 5 will print 6        <br/>        <small><b>anonymous</b> on <i>17 September 2012, at 01:09:51</i></small>        <br/>    . . .    </p>        <p>        6 - pre-incrementing            <br/>            <small><b>Sveta </b> on <i>26 July 2012, at 09:07:00</i></small>            <br/>        . . .        </p>        <p>        tested in php...:  3            <br/>            <small><b>anonymous</b> on <i>18 July 2012, at 07:07:50</i></small>            <br/>        . . .        </p>        <p>        3 (or 6) for sure.            <br/>            <small><b>anonymous</b> on <i>1 September 2011, at 10:09:52</i></small>            <br/>        . . .        </p>        <p>        PHP 5 supports giving referenced variables a default value, so $variable is set to 5.  Then, as the echo uses a pre-increment call (i.e. ++$variable, not $variable++), $variable is incremented before it\'s used by echo().  So the output is 6.            <br/>            <small><b>juice</b> on <i>12 April 2011, at 10:04:22</i></small>            <br/>        . . .        </p>        <p>        To bad every idiot can give an answer here (I\'m pointing @ anonymous from 26 Nov). You just gave a good answer why is option 3 and not 2 like he said.            <br/>            <small><b>not_anonymous</b> on <i>5 December 2010, at 01:12:01</i></small>            <br/>        . . .        </p>        <p>        Not answer 3. The correct answer is 2 becouse ++$variable and not $variable++            <br/>            <small><b>anonymous</b> on <i>26 November 2010, at 03:11:40</i></small>            <br/>        . . .        </p>        <p>        3 correct            <br/>            <small><b>shakedko</b> on <i>5 April 2010, at 06:04:23</i></small>            <br/>        . . .        </p>",
c231: "<p>    51 right answer since variable is passed by reference so $a.$b == \'5\'.\'1\' == 51        <br/>        <small><b>anonymous</b> on <i>17 September 2012, at 01:09:17</i></small>        <br/>    . . .    </p>        <p>        51.after value will be incremented            <br/>            <small><b>Sveta</b> on <i>26 July 2012, at 09:07:22</i></small>            <br/>        . . .        </p>        <p>        Area 51            <br/>            <small><b>anonymous</b> on <i>9 July 2012, at 03:07:12</i></small>            <br/>        . . .        </p>        <p>        when u run the script you get 51 as answer.            <br/>            <small><b>anonymous</b> on <i>24 September 2011, at 12:09:46</i></small>            <br/>        . . .        </p>        <p>        The use of \".=\" forces PHP to treat $oranges as a string, not a number.  So you get \"5\" . \"1\", or \"51\".  The echo() then uses \"$apples++\"; as this is a post-increment, it means that $apple is incremented *after* the echo() call is finished.  So \"51\" is printed to screen and $apples then holds the (numeric) value of 52.            <br/>            <small><b>juice</b> on <i>12 April 2011, at 10:04:05</i></small>            <br/>        . . .        </p>        <p>        sorry mate, its 51. its to do with the ++ being after the $apples. which echoes the apples then ads one to it afterward.            <br/>            <small><b>Roy</b> on <i>18 December 2010, at 10:12:43</i></small>            <br/>        . . .        </p>        <p>        5 is the correct answer. Ther is no return at the function. so the final value is 5.            <br/>            <small><b>anonymous</b> on <i>6 December 2010, at 03:12:46</i></small>            <br/>        . . .        </p>        <p>        51, 2 correct answer            <br/>            <small><b>shakedko</b> on <i>5 April 2010, at 06:04:40</i></small>            <br/>        . . .        </p>",
c19: "<p>    4. list($string) = func_get_args();<br/>list â€” Assign variables as if they were an array        <br/>        <small><b>anonymous</b> on <i>21 May 2011, at 01:05:57</i></small>        <br/>    . . .    </p>        <p>        func_get_args = \"Returns an array comprising a function\'s argument list\"            <br/>            <small><b>Peter</b> on <i>14 April 2010, at 11:04:01</i></small>            <br/>        . . .        </p>",
c74: "<p>    It is 5 which gives \".net\"<br/>4 gives \"net\"        <br/>        <small><b>anonymous</b> on <i>11 October 2012, at 07:10:32</i></small>        <br/>    . . .    </p>        <p>        it is not clear if the output should be \".net\" or \"net\", but I also took other mockup tests and they want to get the top lever domain only, without the \".\".  If the question would be get the domain of www.example.com would you get \".example\" ? or \"example\"... -.- so yea, NR 4 is true.            <br/>            <small><b>anonymous</b> on <i>8 July 2012, at 04:07:16</i></small>            <br/>        . . .        </p>        <p>        Checked it, the exam never asks you to extract a TLD but instead asks to extract .com, which makes 5. the valid answer            <br/>            <small><b>Stephen</b> on <i>16 April 2012, at 08:04:30</i></small>            <br/>        . . .        </p>        <p>        mhor : why dont you check the zend yellow pages...u aint there man!            <br/>            <small><b>anonymous</b> on <i>8 February 2012, at 04:02:14</i></small>            <br/>        . . .        </p>        <p>        u r right martini :)            <br/>            <small><b>jax</b> on <i>11 January 2011, at 04:01:07</i></small>            <br/>        . . .        </p>        <p>        PHP exam is not about knowing what a TLD is. Read the question, it basically asks how to get \".net\" (including the dot) out of \"john@php.net\". So answer #5 is correct.            <br/>            <small><b>Martini</b> on <i>29 September 2010, at 02:09:37</i></small>            <br/>        . . .        </p>        <p>        haha...why don\'t you check \"TLD\" on wikipedia...based on the site...the TLD of www.example.com is \"com\" (not .com)...so 4 wins!!!            <br/>            <small><b>mhor</b> on <i>23 September 2010, at 09:09:22</i></small>            <br/>        . . .        </p>        <p>        substr($var, strpos($var, \".\")); is the correct answer as we required \".net\", not \"net\"            <br/>            <small><b>Liju P M</b> on <i>20 July 2010, at 06:07:02</i></small>            <br/>        . . .        </p>        <p>        5 is correct, double checked            <br/>            <small><b>anonymous</b> on <i>5 May 2010, at 08:05:45</i></small>            <br/>        . . .        </p>        <p>        answer is 5.  substr($var, strpos($var, \".\") + 1); = \"net\" and not \".net\"            <br/>            <small><b>Peter</b> on <i>14 April 2010, at 02:04:02</i></small>            <br/>        . . .        </p>",
c102: "<p>    yes, 3 is correct        <br/>        <small><b>anonymous</b> on <i>15 November 2010, at 02:11:15</i></small>        <br/>    . . .    </p>        <p>        3 is correct            <br/>            <small><b>amine ismaili alaoui</b> on <i>4 July 2010, at 07:07:55</i></small>            <br/>        . . .        </p>",
c50: "<p>    The right solution is 2 indeed.<br/>For this I have the error:\" syntax error, unexpected \'}\'\"<br/>        <br/>        <small><b>geo039</b> on <i>25 March 2013, at 08:03:38</i></small>        <br/>    . . .    </p>        <p>        This is from PHP Manual.<br/> \"Both square brackets and curly braces can be used interchangeably for accessing array elements (e.g. $array[42] and $array{42} will both do the same thing in the example above).\"<br/>If you can access an element in an array , you can change it too. Try with a quick test and you\'ll find all the given 5 answers are valid.<br/><br/>Here is the code i tried, which worked.<br/><br/>$arr[] = 56;<br/><br/>$arr{2} = \"2t\";<br/><br/>var_dump($arr);            <br/>            <small><b>WRONG ANSWER</b> on <i>17 March 2013, at 07:03:32</i></small>            <br/>        . . .        </p>        <p>        solution 2            <br/>            <small><b>amine ismaili alaoui</b> on <i>30 June 2010, at 12:06:45</i></small>            <br/>        . . .        </p>",
c8: "<p>    ..and it will be throw a warning, because $newstring is not defined before :)        <br/>        <small><b>anonymous</b> on <i>19 June 2013, at 11:06:51</i></small>        <br/>    . . .    </p>        <p>        strlen($string) = 6 so, the for will loop 6 times.<br/>$current = $string[0] = 1;<br/>$count = 1;<br/>while will loop 2 times so $count = 3<br/>$newstring .= \"$count{$current}\"; = \"31\"<br/>and from here you see that the only answer is the first (1)            <br/>            <small><b>Marius</b> on <i>5 February 2013, at 09:02:49</i></small>            <br/>        . . .        </p>        <p>        1 is correct answer            <br/>            <small><b>anonymous</b> on <i>3 January 2013, at 09:01:02</i></small>            <br/>        . . .        </p>        <p>        Never mind! After scouring through PHP\'s string section I noted the complex/curly braces. Obviously the curly braces are delimiting the $count variable and just evaluating the $current variable.            <br/>            <small><b>Marc</b> on <i>20 September 2012, at 05:09:47</i></small>            <br/>        . . .        </p>        <p>        Can someone explain why \"$count{$current}\" is evaluated to \'31\'? In the first loop $count == 3 & $current == 1. I presume $count is casted to a string value using the double quotes around it... however I do not understand why the one is appended... if anything I would assume its trying to retrieve the index character in the string using the curly braces..?            <br/>            <small><b>Marc</b> on <i>20 September 2012, at 05:09:16</i></small>            <br/>        . . .        </p>        <p>        Good way to show that often you can exclude answers pretty fast: strlen($string) is 6, so 1 or 4 can be correct, all others must be false. So now you just have to check if the first number is 3 or 2 => finished.            <br/>            <small><b>mdix</b> on <i>14 July 2012, at 07:07:53</i></small>            <br/>        . . .        </p>        <p>        I check ans is 1            <br/>            <small><b>Nur Ahmed</b> on <i>22 March 2011, at 03:03:45</i></small>            <br/>        . . .        </p>        <p>        Ð¯ Ð´Ð¾Ð¿ÐµÑ€, Ð½Ð°Ð´Ð¾ ÑÐ¼Ð¾Ñ‚Ñ€ÐµÑ‚ÑŒ ÑÑ€Ð°Ð·Ñƒ Ñ†Ð¸ÐºÐ» while Ð¸ ÑÑ‡Ð¸Ñ‚Ð°Ñ‚ÑŒ ÐºÐ°ÐºÐ¾Ðµ Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ðµ Ð±ÑƒÐ´ÐµÑ‚ Ñƒ $count Ð¿Ð¾ÑÐ»Ðµ Ð²Ñ‹Ñ…Ð¾Ð´Ð° Ð¸Ð· while. Ð’ Ð¿ÐµÑ€Ð²Ñ‹Ð¹ Ñ€Ð°Ð· ÑÑ‚Ð¾ Ð±ÑƒÐ´ÐµÑ‚ 3, Ð° Ð² ÑÑ‚Ñ€Ð¾ÐºÑƒ Ð¿Ð¸ÑˆÐµÑ‚ÑÑ Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ñ $count Ð¸ $current ÑÑ‚Ñ€Ð¾ÐºÐ¾Ð²Ð¾Ð³Ð¾ Ñ‚Ð¸Ð¿Ð°.<br/>Ð¢Ð¾ ÐµÑÑ‚ÑŒ Ð² Ð¿ÐµÑ€Ð²ÑƒÑŽ Ð¸Ñ‚ÐµÑ€Ð°Ñ†Ð¸ÑŽ Ð²ÑÐµÐ³Ð¾ Ñ†Ð¸ÐºÐ»Ð° Ð·Ð°Ð¿Ð¸ÑÑŒ Ð±ÑƒÐ´ÐµÑ‚ 3 Ð¸ 1, Ñ‚Ð¾ ÐµÑÑ‚ÑŒ 31. ÐÐ°Ð´ÐµÑŽÑÑŒ, Ñ€ÑƒÑÑÐºÐ¾ÑÐ·Ñ‹Ñ‡Ð½Ñ‹Ð¼ Ð±ÑƒÐ´ÐµÑ‚ Ð¿Ð¾Ð½ÑÑ‚Ð½Ð¾, ÐºÐ°Ðº Ñ€ÐµÑˆÐ¸Ñ‚ÑŒ            <br/>            <small><b>ldanmer</b> on <i>23 February 2011, at 04:02:30</i></small>            <br/>        . . .        </p>        <p>        Just executing while loop once you will get the answer 1            <br/>            <small><b>Gagan Charaya</b> on <i>21 January 2011, at 05:01:29</i></small>            <br/>        . . .        </p>        <p>        the correct answer is 1            <br/>            <small><b>amine ismaili alaoui</b> on <i>27 June 2010, at 06:06:09</i></small>            <br/>        . . .        </p>        <p>        The answer: D            <br/>            <small><b>davidhhuan</b> on <i>28 May 2010, at 03:05:12</i></small>            <br/>        . . .        </p>",
c161: "<p>    1 3 4 5 is correct<br/><br/>http://pear.php.net/package/XML_HTMLSax, http://php.net/manual/de/book.dom.php, http://php.net/manual/de/simplexmlelement.xpath.php, http://www.php.net/manual/en/function.simplexml-load-file.php (Interprets an XML file into an object)        <br/>        <small><b>mahesh</b> on <i>28 April 2013, at 05:04:12</i></small>        <br/>    . . .    </p>        <p>        1, 3, 4, 5.  \"XML to Object mapping\" is a fancy way of describing SimpleXML...            <br/>            <small><b>juice</b> on <i>14 April 2011, at 11:04:13</i></small>            <br/>        . . .        </p>        <p>        there is no such thing FastDOM            <br/>            <small><b>shakedko</b> on <i>5 April 2010, at 05:04:37</i></small>            <br/>        . . .        </p>",
c114: "<p>    3 is ok        <br/>        <small><b>anonymous</b> on <i>17 October 2012, at 08:10:59</i></small>        <br/>    . . .    </p>        <p>        I don\'t know.. 2 or 4 - if strip_tags is used without any extra parameters, 4 would be ok, but if you pass any tags and forget about the \"< p>\" then someone could inject xss.            <br/>            <small><b>Neighbours Dog learning PHP</b> on <i>16 July 2012, at 05:07:46</i></small>            <br/>        . . .        </p>            <p>            3 is right.                <br/>                <small><b>anonymous</b> on <i>10 May 2011, at 09:05:11</i></small>                <br/>            . . .            </p>            <p>            2 is right. in the  tag you can still insert javascript. (like onmouseover or onclick)                <br/>                <small><b>anonymous</b> on <i>8 November 2010, at 09:11:26</i></small>                <br/>            . . .            </p>            <p>            Neahh... perfectly safe                <br/>                <small><b>anonymous</b> on <i>30 September 2010, at 08:09:32</i></small>                <br/>            . . .            </p>",
c239: "<p>        # 5            <br/>            <small><b>saed hassan</b> on <i>18 May 2013, at 09:05:50</i></small>            <br/>        . . .        </p>            <p>            555                <br/>                <small><b>anonymous</b> on <i>15 May 2013, at 07:05:52</i></small>                <br/>            . . .            </p>            <p>            5 is the answer.                <br/>                <small><b>mohit kumar gupta</b> on <i>1 April 2013, at 12:04:08</i></small>                <br/>            . . .            </p>            <p>            error_reporting(E_ALL|E_STRICT);echo $var;  //display an unset variable. A notice will appear.                <br/>                <small><b>anonymous</b> on <i>17 September 2012, at 01:09:02</i></small>                <br/>            . . .            </p>            <p>            I disagree guys ... with the E_STRICT option, PHP will warn you that\'s $count has not been initialized ... right ?                <br/>                <small><b>anonymous</b> on <i>17 September 2012, at 01:09:38</i></small>                <br/>            . . .            </p>            <p>            sharp                <br/>                <small><b>Sveta </b> on <i>26 July 2012, at 09:07:50</i></small>                <br/>            . . .            </p>            <p>            PHP will allow a function to have \"invalid\" default values (i.e. func a( x=1, y=2, z); an error will only be thrown if a caller of the function leaves a parameter out (i.e. $result = a(1, 2)).   So this function call works and the result is \"#\"                <br/>                <small><b>juice</b> on <i>12 April 2011, at 10:04:23</i></small>                <br/>            . . .            </p>            <p>            Option .5                <br/>                <small><b>ruminir</b> on <i>5 November 2010, at 02:11:20</i></small>                <br/>            . . .            </p>            <p>            # (5)                <br/>                <small><b>anonymous</b> on <i>17 March 2010, at 07:03:45</i></small>                <br/>            . . .            </p>",
c60: "<p>        Here is the output for answer 3 <br/><br/>Warning: explode() [function.explode]: Empty delimiter on line 2<br/>bool(false)            <br/>            <small><b>WRONG ANSWER</b> on <i>17 March 2013, at 07:03:52</i></small>            <br/>        . . .        </p>            <p>            by process of elimination.. 5 is wrong because at least one answer is correct. 1 is correct, we can access each character in a string the same way we access indexes in an array. 2 would be correct if the function returned to a variable. 3 gives an error for empty delimiter. 4 is wrong because that constant doesn\'t exist.                <br/>                <small><b>anonymous</b> on <i>25 June 2012, at 10:06:37</i></small>                <br/>            . . .            </p>            <p>            1 give us a variable but all letters in one string. Is it independently?<br/>2 give us an array like 0 => A etc so it\'s that we need<br/>3 give us error: explode function doesn\'t accept empty delimiter<br/>4 is this constant exists? i can\'s find any info about this constant.<br/>5 is incorrect because at least answer 2 is correct<br/>So 100% correct only 2, maybe correct 1.                <br/>                <small><b>anonymous</b> on <i>14 June 2012, at 03:06:28</i></small>                <br/>            . . .            </p>            <p>            2 and 3 results aren\'t stored in a variable. Only #1 does that                <br/>                <small><b>anonymous</b> on <i>12 June 2012, at 05:06:08</i></small>                <br/>            . . .            </p>            <p>            http://codepad.viper-7.com/FOob5P                <br/>                <small><b>kevin</b> on <i>29 April 2012, at 09:04:45</i></small>                <br/>            . . .            </p>            <p>            1,2 is right answer. explode()return warning for empty delimiter in 5.3                <br/>                <small><b>anonymous</b> on <i>24 September 2011, at 10:09:49</i></small>                <br/>            . . .            </p>            <p>            explode function doesn\'t accept empty delimiter - It\'s true.                <br/>                <small><b>karuppaiah</b> on <i>2 December 2010, at 09:12:55</i></small>                <br/>            . . .            </p>            <p>            Yeah.. it\'s an error in the mock test                <br/>                <small><b>Diz</b> on <i>30 September 2010, at 06:09:32</i></small>                <br/>            . . .            </p>            <p>            True comments, however I got this question in a real mock exam and I had to choose 3... weird                <br/>                <small><b>Martini</b> on <i>30 September 2010, at 11:09:45</i></small>                <br/>            . . .            </p>            <p>            just 1 and 2 are the correct answer                <br/>                <small><b>amine ismaili alaoui</b> on <i>30 June 2010, at 01:06:34</i></small>                <br/>            . . .            </p>            <p>            explode function doesn\'t accept empty delimiter                <br/>                <small><b>Prophet</b> on <i>13 May 2010, at 07:05:44</i></small>                <br/>            . . .            </p>",
c2: "<p>        guys, really shouldn\'t be encouraging short tags in this day and age.            <br/>            <small><b>Ged</b> on <i>20 June 2013, at 10:06:35</i></small>            <br/>        . . .        </p>            <p>            1,3,4,5 correct                <br/>                <small><b>anonymous</b> on <i>23 March 2013, at 06:03:40</i></small>                <br/>            . . .            </p>            <p>            Except number 2 all are correct.                <br/>                <small><b>anonymous</b> on <i>28 January 2013, at 02:01:44</i></small>                <br/>            . . .            </p>            <p>            Simples!                <br/>                <small><b>anonymous</b> on <i>11 January 2013, at 05:01:38</i></small>                <br/>            . . .            </p>            <p>            jjj                <br/>                <small><b>anonymouskljj</b> on <i>15 December 2012, at 06:12:20</i></small>                <br/>            . . .            </p>            <p>            The question is what tags are acceptable.<br/>Only 4 is acceptable, the others (except 2) are supported, but in my opinion not acceptable.                <br/>                <small><b>Lennaert Ekelmans</b> on <i>23 January 2012, at 02:01:29</i></small>                <br/>            . . .            </p>            <p>            correct answer is 1 3 4 5                <br/>                <small><b>zizka</b> on <i>7 January 2012, at 12:01:16</i></small>                <br/>            . . .            </p>            <p>            number 2 is not correct                <br/>                <small><b>anonymous</b> on <i>29 June 2011, at 03:06:18</i></small>                <br/>            . . .            </p>            <p>            2. is not correct                <br/>                <small><b>ruminir</b> on <i>4 November 2010, at 07:11:23</i></small>                <br/>            . . .            </p>            <p>            2 is not correct...all other tags work for php.                <br/>                <small><b>stephenC</b> on <i>16 June 2010, at 02:06:49</i></small>                <br/>            . . .            </p>            <p>                <% are ASP tags.<br/><br/>ASP-style tags are not enabled by default. To use these tags, either build PHP with the --enable-asp-tags option or enable asp_tags in the PHP configuration file.                    <br/>                    <small><b>Peter</b> on <i>14 April 2010, at 10:04:53</i></small>                    <br/>                . . .                </p>",
c197: "<p>            3 and 4 are the correct asnwers                <br/>                <small><b>anonymous</b> on <i>27 October 2010, at 05:10:18</i></small>                <br/>            . . .            </p>                <p>                http://es.php.net/manual-lookup.php?pattern=backtrace=en                    <br/>                    <small><b>devrsm.net</b> on <i>27 June 2010, at 09:06:44</i></small>                    <br/>                . . .                </p>",
c92: "<p>            answer 2 : session_set_save_handler() sets the user-level session storage functions which are used for storing and retrieving data associated with a session. This is most useful when a storage method other than those supplied by PHP sessions is preferred. i.e. Storing the session data in a local database.                <br/>                <small><b>Radu</b> on <i>9 May 2013, at 05:05:14</i></small>                <br/>            . . .            </p>                <p>                2 isn\'t wrong, 3 is just a more complete answer.                    <br/>                    <small><b>anonymous</b> on <i>14 June 2012, at 03:06:13</i></small>                    <br/>                . . .                </p>                <p>                3 is correct according to the documentation of session_set_save_handler()                    <br/>                    <small><b>lathspell</b> on <i>14 July 2010, at 07:07:01</i></small>                    <br/>                . . .                </p>                <p>                focntion 2                    <br/>                    <small><b>amine ismaili alaoui</b> on <i>1 July 2010, at 02:07:45</i></small>                    <br/>                . . .                </p>",
c230: "<p>            func_get_arg(2);                <br/>                <small><b>Sveta</b> on <i>26 July 2012, at 09:07:52</i></small>                <br/>            . . .            </p>                <p>                #4                    <br/>                    <small><b>anonymous</b> on <i>13 July 2012, at 10:07:31</i></small>                    <br/>                . . .                </p>                <p>                the only way to do this is by using assembler and accessing the memory directly. by mov.                    <br/>                    <small><b>anonymous</b> on <i>9 July 2012, at 03:07:50</i></small>                    <br/>                . . .                </p>                <p>                answer is 4<br/>have a look <br/>http://php.net/manual/en/function.func-get-arg.php                    <br/>                    <small><b>Has</b> on <i>18 September 2011, at 01:09:10</i></small>                    <br/>                . . .                </p>                <p>                4, func_get_arg() start counting with 0                    <br/>                    <small><b>shakedko</b> on <i>5 April 2010, at 06:04:20</i></small>                    <br/>                . . .                </p>",
c83: "<p>            I think #1 also!                <br/>                <small><b>anonymous</b> on <i>13 May 2013, at 02:05:41</i></small>                <br/>            . . .            </p>                <p>                tested on cli answer is 1                    <br/>                    <small><b>mohit garg</b> on <i>15 April 2013, at 05:04:35</i></small>                    <br/>                . . .                </p>                <p>                Agree with Ryan, answer should be 1, php 5.3                    <br/>                    <small><b>Stephan</b> on <i>20 March 2013, at 07:03:32</i></small>                    <br/>                . . .                </p>                <p>                Answer shud b 1.. run the code and check the page source..                    <br/>                    <small><b>Ryan</b> on <i>18 February 2013, at 07:02:29</i></small>                    <br/>                . . .                </p>                <p>                Sorry. This website has incorrect special chars escaping                    <br/>                    <small><b>nymous</b> on <i>7 October 2012, at 08:10:57</i></small>                    <br/>                . . .                </p>                <p>                Real output:<br/>string(78) \"bI like PHP  I think it is cool/b\"<br/>bI like \'PHP\'  I think it is cool/bint(1)                    <br/>                    <small><b>nymous</b> on <i>7 October 2012, at 08:10:12</i></small>                    <br/>                . . .                </p>                <p>                var_dump(htmlentities($string, ENT_QUOTES)) produce *** string(78) \"I like \'PHP\' & I think it is \"cool\"  ***<br/>var_dump(print htmlspecialchars($string)) produce *** I like \'PHP\' & I think it is \"cool\"int(1) ***<br/><br/>Again that question is not right, and contains a error;<br/><br/>If there was no \"print\" function in the second vardump, then answer will be 4 since the htmlentities does not convert quotes thanks to the ENT_QUOTES parameter ...                    <br/>                    <small><b>anonymous</b> on <i>14 September 2012, at 01:09:47</i></small>                    <br/>                . . .                </p>                <p>                #1, test it in php. ;)                    <br/>                    <small><b>When the Sofa met the Coach</b> on <i>15 July 2012, at 06:07:43</i></small>                    <br/>                . . .                </p>                <p>                If #1 were reworded to say the htmlentities() call will translate the single quotes, while the htmlspecialchars() call will not, then #1 would be the correct answer. Otherwise, all answers are wrong.                    <br/>                    <small><b>anonymous</b> on <i>9 July 2012, at 06:07:52</i></small>                    <br/>                . . .                </p>                <p>                It mustn\'t have a print in \"var_dump(print htmlspecialchars($string))\", then without this print \"var_dump(htmlspecialchars($string),ENT_QUOTES)\" produces the same result so the right answer is \"4\"                    <br/>                    <small><b>babs</b> on <i>27 June 2012, at 08:06:56</i></small>                    <br/>                . . .                </p>                <p>                #1, htmlspecialchars() does not translate the quotes.                    <br/>                    <small><b>anonymous</b> on <i>12 June 2012, at 09:06:04</i></small>                    <br/>                . . .                </p>                <p>                I guess the difference in string length is dur to print in htmlspecialchars, if it is removed both strings give 78 as length.so ans is 4                    <br/>                    <small><b>anonymous</b> on <i>2 June 2012, at 05:06:32</i></small>                    <br/>                . . .                </p>                <p>                output:<br/><br/>string(78) \"bI like PHP  I think it is cool/b\"<br/><br/>and<br/><br/>bI like \'PHP\'  I think it is cool/bint(1)<br/><br/>as you can see it\'s not the same. Answer is 1 quotes are not translated by htmlspecialchars()                    <br/>                    <small><b>anonymous</b> on <i>19 February 2012, at 11:02:02</i></small>                    <br/>                . . .                </p>                <p>                did test, and as human being the result seems to be the same, therefore answer 4.but I do not understand why the string length is not the same:<br/>I like \'PHP\' & I think it is \"cool\" length:78I like \'PHP\' & I think it is \"cool\" length:68<br/>78 vs 68?<br/>Can anyone tell me this secret                    <br/>                    <small><b>anonymous</b> on <i>16 October 2011, at 09:10:12</i></small>                    <br/>                . . .                </p>                <p>                Answer is 1, see the example code source                    <br/>                    <small><b>vachtang</b> on <i>17 August 2010, at 08:08:23</i></small>                    <br/>                . . .                </p>                <p>                1. *is* the correct answer:<br/>string(78) \"bI like PHP  I think it is cool/b\"<br/><br/>string(68) \"bI like \'PHP\'  I think it is cool/b\"<br/><br/>(the print inside the var_dump is wrong but that probably does not matter here)                    <br/>                    <small><b>lathspell</b> on <i>14 July 2010, at 07:07:00</i></small>                    <br/>                . . .                </p>                <p>                i agree with 4.                    <br/>                    <small><b>anonymous</b> on <i>29 May 2010, at 07:05:08</i></small>                    <br/>                . . .                </p>                <p>                i think the answer is 4                    <br/>                    <small><b>jo</b> on <i>23 April 2010, at 07:04:08</i></small>                    <br/>                . . .                </p>                <p>                1 is the correct answer, htmlspecialchars() needs ENT_QUOTES too for translating the \'\' quotes.                    <br/>                    <small><b>shakedko</b> on <i>5 April 2010, at 05:04:05</i></small>                    <br/>                . . .                </p>",
c164: "<p>            Right order (tested): <br/><br/>1. $dbh->beginTransaction();<br/>2. $stmt->execute();<br/>3. $dbh->rollback(); <br/>4. $dbh->commit();<br/><br/><br/>You MUST include at end the commit and include the rollback into the Exception.  If the transaction fails you must leave the table blank.<br/><br/>Test code (include at end to test):<br/><br/>$sel = $dbh->prepare(\"SELECT * FROM foo\");<br/>$sel->execute();<br/>$result = $sel->fetchAll();<br/>echo \'\';<br/>var_dump($result);<br/>echo \'\';                <br/>                <small><b>oscargascon</b> on <i>2 January 2013, at 03:01:55</i></small>                <br/>            . . .            </p>                <p>                right order would be : $dbh->beginTransaction();<br/>$stmt->execute();<br/>$dbh->commit();<br/>$dbh->rollback();                    <br/>                    <small><b>anonymous</b> on <i>17 September 2012, at 11:09:26</i></small>                    <br/>                . . .                </p>                <p>                $dbh->beginTransaction();<br/> $dbh->commit();<br/> $stmt->execute();<br/> $dbh->rollback();                    <br/>                    <small><b>samsami2um@gmail.com</b> on <i>21 April 2010, at 07:04:02</i></small>                    <br/>                . . .                </p>",
c158: "<p>            i think 4.                <br/>                <small><b>anonymous</b> on <i>13 May 2013, at 04:05:40</i></small>                <br/>            . . .            </p>                <p>                Note mysqli_bind_param is removed as of PHP 5.4. The correct function should be mysqli_stmt_bind_param(). http://php.net/manual/en/function.mysqli-bind-param.php                    <br/>                    <small><b>anonymous</b> on <i>9 April 2013, at 05:04:03</i></small>                    <br/>                . . .                </p>                <p>                #4, see: http://www.php.net/manual/en/mysqli-stmt.bind-param.php#refsect1-mysqli-stmt.bind-param-examples                    <br/>                    <small><b>k</b> on <i>6 October 2012, at 10:10:59</i></small>                    <br/>                . . .                </p>                <p>                YES 4 is korrect                    <br/>                    <small><b>anonymous</b> on <i>22 November 2010, at 01:11:43</i></small>                    <br/>                . . .                </p>                <p>                read the comments, option 4 is correct                    <br/>                    <small><b>shakedko</b> on <i>5 April 2010, at 05:04:42</i></small>                    <br/>                . . .                </p>",
c199: "<p>            Most real applications I know don\'t use constants for storing passwords. They rather use some kind of configuration files, usually not php files, where credentials can be stored. For example xml, yml, ini and so on. Using environment variables for credentials also sounds strange and not flexible for me, so I assume that 1, 2 and 3 are correct ans.                <br/>                <small><b>ignat</b> on <i>17 October 2012, at 09:10:32</i></small>                <br/>            . . .            </p>                <p>                I think 2,3,5 <br/>Moving all database credentials into a single file => no reason at all<br/>Setting creditial information as system environment variables => I dont see what be the porpose of that ? creating globals wont improve security i guess ? right ?<br/>Using PHP constants instead of variables to store credentials => it\'s a best pratice according to what i red on books                    <br/>                    <small><b>anonymous</b> on <i>17 September 2012, at 12:09:31</i></small>                    <br/>                . . .                </p>                <p>                2 3 4                    <br/>                    <small><b>anonymous</b> on <i>22 August 2012, at 07:08:01</i></small>                    <br/>                . . .                </p>                <p>                2,3,4                    <br/>                    <small><b>sveta</b> on <i>26 July 2012, at 11:07:19</i></small>                    <br/>                . . .                </p>                <p>                #1 does do jack shit. #5 also, for answers mentionned below. The best answers are 2,4,5.                    <br/>                    <small><b>anonymous</b> on <i>19 July 2012, at 05:07:45</i></small>                    <br/>                . . .                </p>                <p>                we say 2,3,5                    <br/>                    <small><b>Hitlers PHP Developer Team for SS Framework</b> on <i>17 July 2012, at 08:07:13</i></small>                    <br/>                . . .                </p>                <p>                2,3,4. 5 is bullshit. Malicious user != developer. If the user has access to your variables, then they have access to your constants as well...                    <br/>                    <small><b>kri</b> on <i>8 July 2012, at 11:07:01</i></small>                    <br/>                . . .                </p>                <p>                2,3,5                    <br/>                    <small><b>anonymous</b> on <i>16 August 2011, at 12:08:17</i></small>                    <br/>                . . .                </p>                <p>                1) doesn\'t directly improve security.  2) only works when your PHP install isn\'t restricted to the doc root (e.g. a chrooted PHP install won\'t be able to access the file either!).  3) will work (assuming there\'s no static content on the server), 4) should work, but is clumsy and depends on the system supporting env variables.  5) doesn\'t stop people reading your password details, but it does prevent them overwriting them.  So I\'d suggest 2, 3 and 5 - with the caveats above in mind.                    <br/>                    <small><b>juice</b> on <i>12 April 2011, at 02:04:00</i></small>                    <br/>                . . .                </p>                <p>                2,3,4                    <br/>                    <small><b>anonymous</b> on <i>6 August 2010, at 03:08:43</i></small>                    <br/>                . . .                </p>                <p>                2,3,4                    <br/>                    <small><b>anonymous</b> on <i>6 August 2010, at 03:08:42</i></small>                    <br/>                . . .                </p>                <p>                1,2,3 ?                    <br/>                    <small><b>anonymous</b> on <i>17 July 2010, at 01:07:40</i></small>                    <br/>                . . .                </p>",
c240: "<p>            surely it\'s 95                <br/>                <small><b>saed hassan</b> on <i>18 May 2013, at 09:05:48</i></small>                <br/>            . . .            </p>                <p>                $number = byRef($number); => 95<br/>since $number is reassigned by the return builtin                    <br/>                    <small><b>anonymous</b> on <i>17 September 2012, at 01:09:27</i></small>                    <br/>                . . .                </p>                <p>                95-ref                    <br/>                    <small><b>Sveta</b> on <i>26 July 2012, at 09:07:36</i></small>                    <br/>                . . .                </p>                <p>                Yes, I\'ve tried it - it\'s 3. 95                    <br/>                    <small><b>Steph</b> on <i>20 June 2011, at 07:06:18</i></small>                    <br/>                . . .                </p>                <p>                95 is the answer                    <br/>                    <small><b>anonymous</b> on <i>1 April 2010, at 08:04:58</i></small>                    <br/>                . . .                </p>",
c137: "<p>            #1 is correct                <br/>                <small><b>Vinod Kumar </b> on <i>1 July 2013, at 12:07:34</i></small>                <br/>            . . .            </p>                <p>                The problem is the parentheses around the return statement: http://php.net/manual/en/function.return.php                    <br/>                    <small><b>anonymous</b> on <i>7 August 2012, at 02:08:52</i></small>                    <br/>                . . .                </p>                <p>                I think #1 is a right answer                    <br/>                    <small><b>babs</b> on <i>9 July 2012, at 10:07:49</i></small>                    <br/>                . . .                </p>                <p>                i don\'t care, because php4 wont be asked any more in php 5.3 exam.                    <br/>                    <small><b>anonymous</b> on <i>9 July 2012, at 07:07:12</i></small>                    <br/>                . . .                </p>                <p>                result in php 4.3: string(8) \"MyString\"<br/>string(8) \"MyString\"<br/>NULL<br/>NULL<br/>NULL<br/>NULL<br/>NULL<br/>NULL<br/>NULL<br/>NULL                    <br/>                    <small><b>anonymous</b> on <i>8 June 2011, at 03:06:15</i></small>                    <br/>                . . .                </p>                <p>                results in php 5.3 - string(8) \"MyString\" string(8) \"MyString\" string(8) \"MyString\" string(8) \"MyString\" string(8) \"MyString\" string(8) \"MyString\" string(8) \"MyString\" string(8) \"MyString\" string(8) \"MyString\" string(8) \"MyString\"                    <br/>                    <small><b>pulsar</b> on <i>31 March 2011, at 11:03:54</i></small>                    <br/>                . . .                </p>                <p>                Please add the results that was helpful                    <br/>                    <small><b>anonymous</b> on <i>21 October 2010, at 06:10:06</i></small>                    <br/>                . . .                </p>                <p>                The code works with PHP 5.3 and there are thread on php-dev from 2004 that talk of an error when null is returned by reference. So I assume 5 is correct.                    <br/>                    <small><b>lathspell</b> on <i>14 July 2010, at 08:07:36</i></small>                    <br/>                . . .                </p>                <p>                You can\'t return the result of an expression(in parentheses) by reference in PHP5. I suspect you can\'t do it in php4 either. This question is testing that principle. An uninitialized variable will default to null. I believe that you could pass a null reference in php4. So, that answer is clearly 1, None of the above.                    <br/>                    <small><b>Johnny Appleseed</b> on <i>11 June 2010, at 03:06:55</i></small>                    <br/>                . . .                </p>",
c69: "<p>            An empty Array (no coincidences for values)                <br/>                <small><b>devrsm.net</b> on <i>27 June 2010, at 09:06:03</i></small>                <br/>            . . .            </p>",
c131: "<p>            1,3 and 4 should be the correct answer                <br/>                <small><b>anonymous</b> on <i>29 June 2011, at 09:06:49</i></small>                <br/>            . . .            </p>                <p>                1, 3 & 4 are the right answers.                    <br/>                    <small><b>Faisal</b> on <i>29 October 2010, at 12:10:25</i></small>                    <br/>                . . .                </p>                <p>                \"Encapsulation conceals the functional details of a class from objects that send messages to it.\"                    <br/>                    <small><b>Peter</b> on <i>15 April 2010, at 11:04:31</i></small>                    <br/>                . . .                </p>                <p>                Answer is : 1,3,4                    <br/>                    <small><b>Loo</b> on <i>5 April 2010, at 05:04:31</i></small>                    <br/>                . . .                </p>",
c236: "<p>            Error: Unexpected T_VARIABLE                <br/>                <small><b>Sveta</b> on <i>26 July 2012, at 09:07:36</i></small>                <br/>            . . .            </p>                <p>                no brackets--Error: Unexpected T_VARIABLE                    <br/>                    <small><b>anonymous</b> on <i>11 January 2010, at 06:01:16</i></small>                    <br/>                . . .                </p>",
c75: "<p>            str_compare does not exist                <br/>                <small><b>Peter</b> on <i>14 April 2010, at 02:04:54</i></small>                <br/>            . . .            </p>",
c132: "<p>            4 and 5 is the right answers. PHP itself is the best template engine.                <br/>                <small><b>anonymous</b> on <i>14 August 2011, at 04:08:05</i></small>                <br/>            . . .            </p>                <p>                I think 4 and 5 should be correct answers                    <br/>                    <small><b>anonymous</b> on <i>29 June 2011, at 09:06:00</i></small>                    <br/>                . . .                </p>                <p>                it will php & smarty                    <br/>                    <small><b>anonymous</b> on <i>7 February 2011, at 04:02:47</i></small>                    <br/>                . . .                </p>                <p>                Not 1,2,3,4. Must be Smarty since if is a suite of \"template\' conversion classes. templates are for views. so 5 is corrrect.                    <br/>                    <small><b>Johnny Appleseed</b> on <i>11 June 2010, at 03:06:46</i></small>                    <br/>                . . .                </p>                <p>                5 is true for sure . 1,2 are not an option . imho 4 is the other one since Views in the MVC pattern should contain no logic and be \"stupid\" pages                    <br/>                    <small><b>Loo</b> on <i>5 April 2010, at 06:04:57</i></small>                    <br/>                . . .                </p>",
c31: "<p>            it\'s a trick question. in changeValue the param does nothing.                <br/>                <small><b>webster tarpley</b> on <i>6 July 2012, at 08:07:55</i></small>                <br/>            . . .            </p>                <p>                It\'s definately 3.! a: 30, b: 10                    <br/>                    <small><b>Steph</b> on <i>20 June 2011, at 12:06:39</i></small>                    <br/>                . . .                </p>                <p>                is 4                    <br/>                    <small><b>anonymous</b> on <i>1 June 2011, at 07:06:45</i></small>                    <br/>                . . .                </p>                <p>                Awesome Question Ans 3                    <br/>                    <small><b>Gagan Charaya</b> on <i>21 January 2011, at 09:01:59</i></small>                    <br/>                . . .                </p>                <p>                la reponse est numero \"3\"                    <br/>                    <small><b>amine ismaili alaoui</b> on <i>28 June 2010, at 07:06:06</i></small>                    <br/>                . . .                </p>",
c185: "<p>            5. Options --><br/><br/>Choose 5 answers <br/><br/>nice                <br/>                <small><b>anonymous</b> on <i>29 July 2013, at 06:07:54</i></small>                <br/>            . . .            </p>                <p>                bonus question: Choose 5 answers, there are only 5 selection.                    <br/>                    <small><b>anonymous</b> on <i>22 February 2013, at 09:02:09</i></small>                    <br/>                . . .                </p>                <p>                Iterator extends Traversable {<br/>/* MÃ©thodes */<br/>abstract public mixed current ( void )<br/>abstract public scalar key ( void )<br/>abstract public void next ( void )<br/>abstract public void rewind ( void )<br/>abstract public boolean valid ( void )<br/>}                    <br/>                    <small><b>anonymous</b> on <i>17 September 2012, at 12:09:06</i></small>                    <br/>                . . .                </p>                <p>                select 5 from 5 choices, hmm                    <br/>                    <small><b>anonymous</b> on <i>7 July 2012, at 01:07:02</i></small>                    <br/>                . . .                </p>                <p>                indeed valid exists, so the 5 answers are correct.                    <br/>                    <small><b>samhk222</b> on <i>1 September 2011, at 01:09:08</i></small>                    <br/>                . . .                </p>                <p>                http://en.wikipedia.org/wiki/Iterator#PHP                    <br/>                    <small><b>anonymous</b> on <i>28 October 2010, at 11:10:29</i></small>                    <br/>                . . .                </p>                <p>                Well the link that Dmitry posted in the previous post says it is all 5 :)) valid() is also a metod of Iterator                    <br/>                    <small><b>Diz</b> on <i>30 September 2010, at 09:09:23</i></small>                    <br/>                . . .                </p>                <p>                Right is: choose 4 answers: 1,3,4,5<br/>See: http://php.net/manual/en/class.iterator.php                    <br/>                    <small><b>Dmitry</b> on <i>4 August 2010, at 02:08:50</i></small>                    <br/>                . . .                </p>                <p>                It\'s asking for five (choose 5 answers) so they\'re all correct and they are.                    <br/>                    <small><b>MeerDanGek</b> on <i>28 May 2010, at 01:05:06</i></small>                    <br/>                . . .                </p>",
c32: "<p>            abstract is the correct answer                <br/>                <small><b>amine ismaili alaoui</b> on <i>28 June 2010, at 07:06:39</i></small>                <br/>            . . .            </p>",
c78: "<p>            $string[2] == 3, $string[3] == 0 So S14342                <br/>                <small><b>anonymous</b> on <i>14 September 2012, at 01:09:34</i></small>                <br/>            . . .            </p>                <p>                14342                    <br/>                    <small><b>anonymous</b> on <i>6 July 2012, at 08:07:21</i></small>                    <br/>                . . .                </p>                <p>                $string[2]=3<br/><br/>$string[$string[2]=3]=4<br/><br/>$string[3]=4<br/><br/>string[0]=1;<br/>string[1]=4;<br/>string[2]=3;<br/>string[3]=4;<br/>string[4]=2;<br/><br/>so answer is 14342 - which 2                    <br/>                    <small><b>anonymous</b> on <i>29 June 2011, at 08:06:01</i></small>                    <br/>                . . .                </p>                <p>                2. 14342                    <br/>                    <small><b>Steph</b> on <i>22 June 2011, at 07:06:15</i></small>                    <br/>                . . .                </p>                <p>                correct is 14402                    <br/>                    <small><b>anonymous</b> on <i>6 February 2011, at 06:02:11</i></small>                    <br/>                . . .                </p>                <p>                14342 is correct option                    <br/>                    <small><b>ruminir</b> on <i>19 November 2010, at 02:11:01</i></small>                    <br/>                . . .                </p>                <p>                2. is correct                    <br/>                    <small><b>lathspell</b> on <i>14 July 2010, at 07:07:06</i></small>                    <br/>                . . .                </p>",
c22: "<p>            In fact ... In PHP5 answer would be 20, 20, since objects are automatically passed by reference. In PHP4, since objects are passed by copy, answer would be 10, 10 ^^                <br/>                <small><b>anonymous</b> on <i>13 September 2012, at 01:09:44</i></small>                <br/>            . . .            </p>                <p>                20,20 is the right answer.I have checked it on php-cli.                    <br/>                    <small><b>Mohit Garg</b> on <i>10 July 2012, at 05:07:11</i></small>                    <br/>                . . .                </p>                <p>                3. 20, 20 is correct.                    <br/>                    <small><b>Poonam</b> on <i>17 May 2012, at 06:05:51</i></small>                    <br/>                . . .                </p>                <p>                Running the code will show that 3. is the correct answer. <br/><br/>$obj_one->changeValue(20, $obj_two); changes the value of $obj_two to 20 by reference.<br/><br/>$obj_two->changeValue($obj_two->getValue(), $obj_one); gets the newly assigned value of 20 from $obj_two, and then changes the value of $obj_one to 20 by reference.                    <br/>                    <small><b>anonymous</b> on <i>18 September 2011, at 04:09:41</i></small>                    <br/>                . . .                </p>                <p>                That is it! 20-20                    <br/>                    <small><b>Pedro</b> on <i>14 August 2011, at 10:08:46</i></small>                    <br/>                . . .                </p>                <p>                3\'s right!                    <br/>                    <small><b>anonymous</b> on <i>24 July 2011, at 08:07:17</i></small>                    <br/>                . . .                </p>                <p>                anonymous, the answer to your question is this line from the manual: \"Objects of the same type will have access to each others private and protected members even though they are not the same instances.\"                    <br/>                    <small><b>cw</b> on <i>12 July 2011, at 07:07:14</i></small>                    <br/>                . . .                </p>                <p>                3 (20,20) is the correct answer without doubt.                    <br/>                    <small><b>anonymous</b> on <i>29 June 2011, at 07:06:06</i></small>                    <br/>                . . .                </p>                <p>                I\'ve tried it: 3. 20,20. The object will be passed as reference.                    <br/>                    <small><b>Steph</b> on <i>20 June 2011, at 12:06:21</i></small>                    <br/>                . . .                </p>                <p>                Hey, why \'private\' is not working? I should not be able to access $obj_one->a at all.                    <br/>                    <small><b>anonymous</b> on <i>5 June 2011, at 11:06:26</i></small>                    <br/>                . . .                </p>                <p>                20,20 should be correct                    <br/>                    <small><b>Adham Saad</b> on <i>3 April 2011, at 06:04:37</i></small>                    <br/>                . . .                </p>                <p>                20,20 is correct.                    <br/>                    <small><b>pritisolanki</b> on <i>14 December 2010, at 10:12:43</i></small>                    <br/>                . . .                </p>                <p>                Correct option is 3 (20,20). Objects are always passed as reference.                    <br/>                    <small><b>ruminir</b> on <i>17 November 2010, at 05:11:22</i></small>                    <br/>                . . .                </p>                <p>                Correct answer is 20,20. This is a much straight forward question.                    <br/>                    <small><b>Liju P M</b> on <i>14 July 2010, at 06:07:35</i></small>                    <br/>                . . .                </p>                <p>                solution number 1                    <br/>                    <small><b>amine ismaili alaoui</b> on <i>28 June 2010, at 10:06:43</i></small>                    <br/>                . . .                </p>                <p>                20,20 is correct.                    <br/>                    <small><b>anonymous</b> on <i>12 May 2010, at 06:05:28</i></small>                    <br/>                . . .                </p>                <p>                Solution is 20,20                    <br/>                    <small><b>anonymous</b> on <i>27 January 2010, at 12:01:20</i></small>                    <br/>                . . .                </p>",
c100: "<p>            obvious two                <br/>                <small><b>anonymous</b> on <i>19 November 2010, at 01:11:26</i></small>                <br/>            . . .            </p>                <p>                2. Is correct sure                    <br/>                    <small><b>anonymous</b> on <i>18 November 2010, at 03:11:13</i></small>                    <br/>                . . .                </p>                <p>                number two                    <br/>                    <small><b>anonymous</b> on <i>1 July 2010, at 02:07:32</i></small>                    <br/>                . . .                </p>",
c39: "<p>            The first catch...<br/><br/>} catch(AnotherException $e) {<br/>    $a->somethingElse();<br/>}<br/><br/>...will throw the exception to the outer try / catch block, and not the second nested catch.                <br/>                <small><b>anonymous</b> on <i>18 September 2011, at 06:09:10</i></small>                <br/>            . . .            </p>                <p>                \"$a->somethingElse();\" will trigger an exception that will not get caught by the second catch, those two catch are for $a->something() in the situation $a->something might throw two types of exceptions, either AnotherException or MyException, so controll will go to the first try ... catch block and will display \"Didn\'t catch the Exception!\"                    <br/>                    <small><b>gion</b> on <i>19 January 2011, at 08:01:23</i></small>                    <br/>                . . .                </p>                <p>                Please some one explain in english.                    <br/>                    <small><b>Faisal</b> on <i>22 October 2010, at 10:10:05</i></small>                    <br/>                . . .                </p>                <p>                la bonne reponse est numero 3, puisque l\'exception sera interpreter par le bloc try/catch parent et pas le fils.                    <br/>                    <small><b>amine ismaili alaoui</b> on <i>29 June 2010, at 11:06:11</i></small>                    <br/>                . . .                </p>                <p>                la bonne reponse est numero 3, puisque l\'exception sera interpreter par le bloc try/catch parent et pas le fils.                    <br/>                    <small><b>amine ismaili alaoui</b> on <i>29 June 2010, at 11:06:57</i></small>                    <br/>                . . .                </p>",
c21: "<p>            strpos will check the PHP in $string. If found then it will return its position of first occurance and if not found than it will return false. !==  is identity operator to ensure that if PHP exists on 0 position then it should be treated as integer not boolean. So correct answer is 1.                <br/>                <small><b>Faisal</b> on <i>20 October 2010, at 12:10:16</i></small>                <br/>            . . .            </p>                <p>                answer 1                    <br/>                    <small><b>amine ismaili alaoui</b> on <i>28 June 2010, at 12:06:41</i></small>                    <br/>                . . .                </p>",
c218: "<p>            look at Donia\'s response.                <br/>                <small><b>anonymous</b> on <i>22 August 2012, at 07:08:51</i></small>                <br/>            . . .            </p>                <p>                3 is my answer                    <br/>                    <small><b>anonymous</b> on <i>6 August 2010, at 03:08:21</i></small>                    <br/>                . . .                </p>                <p>                Option 3<br/>compress.zlib://foo.gz<br/>Compression level already specified in fopen statement \'wb9\'.                    <br/>                    <small><b>Donia</b> on <i>19 April 2010, at 04:04:51</i></small>                    <br/>                . . .                </p>",
c36: "<p>            @evil: there is fundamental difference: __get() method won\'t be called in \"non-existing method\" situtaion. Variables \"$variable\" and \"$method\" have symbolic meaning in this example.                <br/>                <small><b>modzias</b> on <i>9 February 2012, at 10:02:55</i></small>                <br/>            . . .            </p>                <p>                Actually, there is no difference between __get($variable) and __get($method)                    <br/>                    <small><b>evll</b> on <i>17 January 2012, at 08:01:35</i></small>                    <br/>                . . .                </p>                <p>                1-2-4                    <br/>                    <small><b>anonymous</b> on <i>21 May 2011, at 01:05:20</i></small>                    <br/>                . . .                </p>                <p>                ÐŸÐ¾ Ð»ÑŽÐ±Ð¾Ð¼Ñƒ 1-2-4                    <br/>                    <small><b>anonymous</b> on <i>23 February 2011, at 04:02:27</i></small>                    <br/>                . . .                </p>                <p>                I don\'t speak French very well but \"1,4 et 5\" sounds wrong. The correct ones are 1,2 and 4 as the method signature for __call according to the docs is:<br/>mixed __call  (  string $name  ,  array $arguments  )                    <br/>                    <small><b>lathspell</b> on <i>11 July 2010, at 09:07:25</i></small>                    <br/>                . . .                </p>                <p>                __call ne concerne que les methodes tandisque set et get concerne les attributs, donc les bonnes reponses sont 1,4 et 5                    <br/>                    <small><b>amine ismaili alaoui</b> on <i>28 June 2010, at 07:06:57</i></small>                    <br/>                . . .                </p>",
c91: "<p>            The question says destroy ONE variable in a PHP session.                <br/>                <small><b>anonymous</b> on <i>6 July 2012, at 11:07:43</i></small>                <br/>            . . .            </p>                <p>                Right correct answer is #4 never #2, the session_destroy destroys session and all datas too                    <br/>                    <small><b>babs</b> on <i>27 June 2012, at 09:06:02</i></small>                    <br/>                . . .                </p>                <p>                session_unset() frees all session variables, so unset() the variable in $_SESSION is the solution.                    <br/>                    <small><b>anonymous</b> on <i>14 June 2012, at 03:06:11</i></small>                    <br/>                . . .                </p>                <p>                Answer 4 because: session_destroy() destroys all data associated with the current session. Not destroy any global variables associated with the session or cookie.                    <br/>                    <small><b>anonymous</b> on <i>19 November 2010, at 12:11:01</i></small>                    <br/>                . . .                </p>                <p>                Answer: 4.                    <br/>                    <small><b>anonymous</b> on <i>15 November 2010, at 01:11:55</i></small>                    <br/>                . . .                </p>                <p>                2 does not destroy just one but all data<br/>4 ist the correct answer. <br/>                    <br/>                    <small><b>lathspell</b> on <i>14 July 2010, at 07:07:36</i></small>                    <br/>                . . .                </p>                <p>                answer 2                    <br/>                    <small><b>amine ismaili alaoui</b> on <i>1 July 2010, at 02:07:04</i></small>                    <br/>                . . .                </p>",
c150: "<p>            linked arguments dont have default value                <br/>                <small><b>WinterSilence</b> on <i>28 March 2013, at 06:03:39</i></small>                <br/>            . . .            </p>                <p>                Right is answer 2 ... PHP4 doesn\'t accept default value for references !                    <br/>                    <small><b>anonymous</b> on <i>17 September 2012, at 10:09:35</i></small>                    <br/>                . . .                </p>                <p>                I don\'t know, ... i don\'t have php4 lol.. ;)                    <br/>                    <small><b>anonymous</b> on <i>16 July 2012, at 06:07:33</i></small>                    <br/>                . . .                </p>                <p>                MeerDanGek is right. Answer is 2.                    <br/>                    <small><b>Faisal</b> on <i>31 October 2010, at 11:10:14</i></small>                    <br/>                . . .                </p>                <p>                Answer is 2 In PHP 4, default values could only be given to parameters which are passed by-value. In PHP 5 this changed.                    <br/>                    <small><b>MeerDanGek</b> on <i>28 May 2010, at 12:05:47</i></small>                    <br/>                . . .                </p>",
c10: "<p>            The correct answer is 1 refer to type hinting in php manual. 5 is not correct because you cant define an user-created object as the parameter.                <br/>                <small><b>Wayne</b> on <i>12 May 2013, at 09:05:49</i></small>                <br/>            . . .            </p>                <p>                The correct answer is 4 but I suspect that is not what was intended, just a badly written question.  Type hinting does not ensure that you are passed an \"object\", it raises a fatal error if you are not passed a \"specific object\".  Answer 3 is incorrect, because by the time we can use this check \"The incorrect type has already been passed\".  Trick question or perhaps badly worded?                    <br/>                    <small><b>Gav</b> on <i>11 April 2013, at 08:04:49</i></small>                    <br/>                . . .                </p>                <p>                Both 1 and 5 are correct. but for best way i will choose option 1                    <br/>                    <small><b>Jenish</b> on <i>13 October 2012, at 08:10:07</i></small>                    <br/>                . . .                </p>                <p>                The answer correct is using the funcion is_object. Option 3.                    <br/>                    <small><b>anonymous</b> on <i>29 September 2012, at 01:09:35</i></small>                    <br/>                . . .                </p>                <p>                1 and 5 are right. But I agree, the question is epic fail.                    <br/>                    <small><b>anonymous</b> on <i>14 July 2012, at 07:07:36</i></small>                    <br/>                . . .                </p>                <p>                Question has no right answer indeed!<br/>answer should be-<br/>function myfunction(MyClassName $obj)<br/><br/>but if i select an answer from the question i will choose answer 1.                    <br/>                    <small><b>Shahriar</b> on <i>28 January 2012, at 11:01:13</i></small>                    <br/>                . . .                </p>                <p>                The only way to ensure it is using is_object function inside user-defined function. Because a user-defined class isn\'t child of stdClass. PHP doesn\'t have a \"Object\" class too.                    <br/>                    <small><b>Rafael M. Salvioni</b> on <i>23 January 2012, at 03:01:06</i></small>                    <br/>                . . .                </p>                <p>                stdClass not a special system class, but some user-defined class (something like Foo). But Object is some user-created object, NOT class name. is_object() may return FALSE even if $a is an object (read manual once again). So the right answer is 1.                    <br/>                    <small><b>anonymous</b> on <i>29 June 2011, at 03:06:30</i></small>                    <br/>                . . .                </p>                <p>                Answer one is type casting, not type hinting. Try<br/>class Foo{}<br/>$foo = new Foo();<br/>echo ($foo instanceof stdClass)?\'Y\':\'N\';<br/>The output is \'N\'.                    <br/>                    <small><b>anonymous</b> on <i>8 June 2011, at 01:06:06</i></small>                    <br/>                . . .                </p>                <p>                the question is about type hinting and the answer is a). For more see http://php.net/manual/en/language.oop5.typehinting.php                    <br/>                    <small><b>seal</b> on <i>16 May 2011, at 12:05:39</i></small>                    <br/>                . . .                </p>                <p>                This is an ambiguous question.  If the question is \"how to check for a specific class\", then 1) or 5) could be used - both refer to a user-defined class.  However, in the general case, Option 3) is the best answer, though it\'s debatable how useful it is to know that the variable is an object if you don\'t actually know what properties and methods it has...                    <br/>                    <small><b>juice</b> on <i>17 January 2011, at 03:01:59</i></small>                    <br/>                . . .                </p>                <p>                answer is 3                    <br/>                    <small><b>anonymous</b> on <i>23 September 2010, at 02:09:00</i></small>                    <br/>                . . .                </p>                <p>                Both 1 and 5 cannot be correct because the only check if the argument is of exactly the one given class. (\"Object\" is a class name like any other and no reserved word like in Java).<br/>2. is a default initializer and no check<br/>3. is possible and at least better than 4.                    <br/>                    <small><b>lathspell</b> on <i>11 July 2010, at 08:07:01</i></small>                    <br/>                . . .                </p>                <p>                Both 1 and 5 are correct.<br/>We can`t overwrite stdClass, so I think the more appropriate answer should be (5), because we can make a class named Object, so such object can be passed to the function.<br/><br/> <br/><br/><br/>                    <br/>                    <small><b>Joro</b> on <i>30 May 2010, at 10:05:47</i></small>                    <br/>                . . .                </p>                <p>                I think it\'s #3, first option only checks if argument is standard php object, not any object                    <br/>                    <small><b>anonymous</b> on <i>12 May 2010, at 06:05:01</i></small>                    <br/>                . . .                </p>",
c65: "<p>            answer 3 <br/>                <br/>                <small><b>anonymous</b> on <i>20 May 2011, at 11:05:31</i></small>                <br/>            . . .            </p>                <p>                answer 3                    <br/>                    <small><b>amine ismaili alaoui</b> on <i>30 June 2010, at 12:06:52</i></small>                    <br/>                . . .                </p>",
c180: "<p>            3333                <br/>                <small><b>anonymous</b> on <i>20 April 2013, at 11:04:34</i></small>                <br/>            . . .            </p>                <p>                3 is right ans                    <br/>                    <small><b>Nur Ahmed</b> on <i>19 March 2011, at 01:03:40</i></small>                    <br/>                . . .                </p>                <p>                3 is correct                    <br/>                    <small><b>shakedko</b> on <i>5 April 2010, at 05:04:04</i></small>                    <br/>                . . .                </p>",
c4: "<p>            3rd answer takes a pointer to the variable that causes the value changes in the iteration.                <br/>                <small><b>Isuru</b> on <i>15 July 2013, at 03:07:52</i></small>                <br/>            . . .            </p>                <p>                if you are using foreach and change the array, then php will use a copy of it. the best way is 2 $array[$i] = 2 if the array keys are numeric                    <br/>                    <small><b>anonymous</b> on <i>1 March 2013, at 06:03:08</i></small>                    <br/>                . . .                </p>                <p>                Why cant be 4, what is wrong with 4?                    <br/>                    <small><b>anonymous</b> on <i>28 January 2013, at 04:01:18</i></small>                    <br/>                . . .                </p>                <p>                Correct answer is 3                    <br/>                    <small><b>pgomes</b> on <i>31 July 2012, at 10:07:27</i></small>                    <br/>                . . .                </p>                <p>                the best answer is 3  because we need to modify the array it self when we retrieve it and the all other answers is just take a copy of the array we ca not modify the array it self .                    <br/>                    <small><b>sherif sakr </b> on <i>3 October 2011, at 08:10:18</i></small>                    <br/>                . . .                </p>                <p>                page58-arrays \"PHP5 also introudces the possibility of modifying the contents of the array directly by assigning the value of each element to the iterated variable by reference rather than by value:\"<br/>answer: 3                    <br/>                    <small><b>thompson</b> on <i>26 January 2011, at 09:01:20</i></small>                    <br/>                . . .                </p>                <p>                The answer is 3).  The solution given for 2) only works if all of the keys in the array are numeric.  4) would also work, but requires the user to explicitly reference the array in the foreach loop\'s body.                    <br/>                    <small><b>juice</b> on <i>17 January 2011, at 02:01:58</i></small>                    <br/>                . . .                </p>                <p>                kkjkj                    <br/>                    <small><b>anonymous</b> on <i>3 January 2011, at 08:01:55</i></small>                    <br/>                . . .                </p>                <p>                The key here is \"best way\" and \"PHP 5\" so obviously, the answer is 3...actually numbers 2, 3 and 5 can be the answer but 3 is the best.                    <br/>                    <small><b>mhor</b> on <i>23 September 2010, at 08:09:51</i></small>                    <br/>                . . .                </p>                <p>                3. sounds best as in PHP5 using &$val you can modify the values while iterating with foreach()                    <br/>                    <small><b>lathspell</b> on <i>11 July 2010, at 08:07:09</i></small>                    <br/>                . . .                </p>                <p>                I think that is bether 2 option because in 3 you can\'t asign any value to $val after foreach!!!!                    <br/>                    <small><b>anonymous</b> on <i>18 June 2010, at 05:06:08</i></small>                    <br/>                . . .                </p>                <p>                Sorry.  The answer is 3.                    <br/>                    <small><b>Jeff</b> on <i>27 April 2010, at 03:04:29</i></small>                    <br/>                . . .                </p>                <p>                Anser is 2                    <br/>                    <small><b>Donia</b> on <i>24 April 2010, at 10:04:49</i></small>                    <br/>                . . .                </p>",
c6: "<p>            Simple:<br/>0xFF is equal to 255<br/>so $d is equal to 257.5<br/>$e is equal to 643.75<br/>$f is equal to 0 because $d + $e is 901.25 and % $a makes is 0<br/>so $f + $e is 0 + 643.75<br/>and that makes the answer 643.75                <br/>                <small><b>Ali</b> on <i>12 May 2012, at 08:05:46</i></small>                <br/>            . . .            </p>                <p>                $f=($d+$e)%$a equal 0. % only consider integer part                    <br/>                    <small><b>anonymous</b> on <i>26 November 2011, at 05:11:48</i></small>                    <br/>                . . .                </p>                <p>                I check code ans is 1                    <br/>                    <small><b>Nur Ahmed</b> on <i>22 March 2011, at 02:03:09</i></small>                    <br/>                . . .                </p>                <p>                Convert Hexadecimal 0xFF into decimal <br/>F=15;<br/>So starting from left 16^0*15+16^1*15=15+240=255                    <br/>                    <small><b>Gagan Charaya</b> on <i>20 January 2011, at 03:01:07</i></small>                    <br/>                . . .                </p>                <p>                0xFF is the hexadecimal representation for 255 (*not* 256).                    <br/>                    <small><b>juice</b> on <i>17 January 2011, at 02:01:02</i></small>                    <br/>                . . .                </p>                <p>                Shortcut: as $a = 1, $f = 0.                    <br/>                    <small><b>ing</b> on <i>14 November 2010, at 09:11:27</i></small>                    <br/>                . . .                </p>                <p>                The answer: A                    <br/>                    <small><b>davidhhuan</b> on <i>28 May 2010, at 03:05:39</i></small>                    <br/>                . . .                </p>",
c11: "<p>            Answer is: 4                <br/>                <small><b>abir</b> on <i>7 May 2013, at 03:05:07</i></small>                <br/>            . . .            </p>                <p>                ans is number 4... and also somehow number 5 .. because when the two numbers are divisible then it shows the GCD .. but if they aren\'t divisible, i.e if they have a modulus then it also calculates the modulus <br/>                    <br/>                    <small><b>anonymous</b> on <i>17 December 2012, at 06:12:56</i></small>                    <br/>                . . .                </p>                <p>                The function doesn\'t return what you\'d expect if you call it with a 0 or negative integer.                    <br/>                    <small><b>anonymous</b> on <i>9 July 2012, at 02:07:25</i></small>                    <br/>                . . .                </p>                <p>                Good Question, please note this is tertiary if condition and in magic() function call $q comes as first argument.                    <br/>                    <small><b>Gagan Charaya</b> on <i>21 January 2011, at 05:01:51</i></small>                    <br/>                . . .                </p>                <p>                yep. it\'s number 4. See http://en.wikipedia.org/wiki/Euclidean_algorithm                    <br/>                    <small><b>anonymous</b> on <i>3 January 2011, at 08:01:41</i></small>                    <br/>                . . .                </p>                <p>                correct answer is number 4                    <br/>                    <small><b>amine ismaili alaoui</b> on <i>27 June 2010, at 06:06:09</i></small>                    <br/>                . . .                </p>                <p>                correct answer is number \"4\";                    <br/>                    <small><b>amine ismaili alaoui</b> on <i>27 June 2010, at 06:06:42</i></small>                    <br/>                . . .                </p>",
c90: "<p>            ereg* functions exist too, why is that answer wrong?                <br/>                <small><b>anonymous</b> on <i>13 May 2013, at 02:05:03</i></small>                <br/>            . . .            </p>                <p>                i only know preg_* which use regex and ereg is deprecated..                    <br/>                    <small><b>anonymous</b> on <i>9 July 2012, at 06:07:56</i></small>                    <br/>                . . .                </p>                <p>                2 is correct<br/>                    <br/>                    <small><b>anonymous</b> on <i>15 November 2010, at 01:11:02</i></small>                    <br/>                . . .                </p>                <p>                answer 2                    <br/>                    <small><b>amine ismaili alaoui</b> on <i>1 July 2010, at 02:07:07</i></small>                    <br/>                . . .                </p>",
c168: "<p>            I agree: 2, 3.                <br/>                <small><b>anur</b> on <i>20 April 2013, at 09:04:20</i></small>                <br/>            . . .            </p>                <p>                2,3                    <br/>                    <small><b>Mahesh</b> on <i>17 December 2011, at 07:12:37</i></small>                    <br/>                . . .                </p>                <p>                2 and 3 are the correct answers.                    <br/>                    <small><b>anonymous</b> on <i>29 June 2011, at 09:06:51</i></small>                    <br/>                . . .                </p>                <p>                2, 3                    <br/>                    <small><b>anonymous</b> on <i>6 August 2010, at 02:08:04</i></small>                    <br/>                . . .                </p>",
c5: "<p>            Since we define FOO with 10. so the answer would be 10. no matter what.                <br/>                <small><b>anonymous</b> on <i>9 May 2013, at 02:05:47</i></small>                <br/>            . . .            </p>                <p>                I solved this task like that:<br/>$array[FOO] --> $array[10] --> FOO --> 10<br/>$array[$array[FOO]] --> $array[10] --> FOO --> 10<br/>$array[\"FOO\"] --> 20<br/>10 * 20 = 200                    <br/>                    <small><b>Lina</b> on <i>26 February 2013, at 03:02:54</i></small>                    <br/>                . . .                </p>                <p>                the best explanation is  $array[$array[FOO]] * $array[\"FOO\"];<br/>$array[10] * $array[20] = 200 result, same as 10 multiply 20 = 200                    <br/>                    <small><b>anonymous</b> on <i>13 September 2012, at 10:09:17</i></small>                    <br/>                . . .                </p>                <p>                Tricky. First the left operand. $array[$array[FOO]] <br/>= $array[$array[10]]<br/>= $array[FOO]<br/>= $array[10]<br/>= FOO<br/>= 10<br/><br/>Then the right operand is much easier, evaluates to 20. So the answer is 200.                    <br/>                    <small><b>anonymous</b> on <i>10 July 2012, at 08:07:42</i></small>                    <br/>                . . .                </p>                <p>                Aswer 3 is right, the value is 200. $array[$array[FOO]] = 10, because FOO is constant with value 10.                    <br/>                    <small><b>Alex</b> on <i>28 August 2011, at 04:08:56</i></small>                    <br/>                . . .                </p>                <p>                I agree and would like to add what SunSparc said.<br/><br/>$array[$array[10]] * $array[\"FOO\"];                    <br/>                    <small><b>seal</b> on <i>16 May 2011, at 12:05:19</i></small>                    <br/>                . . .                </p>                <p>                I check this code ans:200                    <br/>                    <small><b>Nur Ahmed</b> on <i>22 March 2011, at 02:03:57</i></small>                    <br/>                . . .                </p>                <p>                This is tricky, as usual.  Watch the uses of the global constant FOO.  Array key 10 is not assigned the string \"FOO\" but the constant FOO with is 10.                    <br/>                    <small><b>SunSparc</b> on <i>11 January 2011, at 11:01:53</i></small>                    <br/>                . . .                </p>                <p>                200 is correct option                    <br/>                    <small><b>grethz</b> on <i>4 November 2010, at 07:11:38</i></small>                    <br/>                . . .                </p>                <p>                200                    <br/>                    <small><b>anonymous</b> on <i>23 April 2010, at 05:04:15</i></small>                    <br/>                . . .                </p>",
c67: "<p>            array_count_values                <br/>                <small><b>anonymous</b> on <i>8 July 2012, at 04:07:43</i></small>                <br/>            . . .            </p>                <p>                2. - http://php.net/manual/de/function.array-count-values.php                    <br/>                    <small><b>Steph</b> on <i>17 June 2011, at 12:06:13</i></small>                    <br/>                . . .                </p>                <p>                No \"4\" count                    <br/>                    <small><b>anonymous</b> on <i>20 May 2011, at 11:05:19</i></small>                    <br/>                . . .                </p>                <p>                array_count_values                    <br/>                    <small><b>devrsm.net</b> on <i>27 June 2010, at 09:06:06</i></small>                    <br/>                . . .                </p>",
c117: "<p>            I think, in the document root - not in parallel or higher level directory, but in document root, where are all scripts of project. Off course not directly in document root, but in some nested directory.                <br/>                <small><b>anur</b> on <i>19 April 2013, at 02:04:21</i></small>                <br/>            . . .            </p>                <p>                users can easily access files that are in the document root. so, it is safe to place configuration and log files outside of the document roots. and you can use those file by using include/require or better to use include_once/require_once.                    <br/>                    <small><b>Faisal</b> on <i>28 October 2010, at 11:10:41</i></small>                    <br/>                . . .                </p>                <p>                #1 is correct. I can have a private folder with php files next to my document root folder (httpdocs, public_html, etc...)                    <br/>                    <small><b>Martini</b> on <i>29 September 2010, at 03:09:04</i></small>                    <br/>                . . .                </p>                <p>                ANS: b<br/><br/>When include files are to be used,the documents should be in the document root.                    <br/>                    <small><b>krishna</b> on <i>2 September 2010, at 02:09:46</i></small>                    <br/>                . . .                </p>",
c159: "<p>            Option 03                <br/>                <small><b>anonymous</b> on <i>19 November 2010, at 04:11:40</i></small>                <br/>            . . .            </p>                <p>                Answer is 3. <br/><br/>\"mysqli_stmt_bind_result() Binds variables to a prepared statement for result storage\"                    <br/>                    <small><b>Peter</b> on <i>15 April 2010, at 12:04:42</i></small>                    <br/>                . . .                </p>",
c126: "<p>            M.V.C. stands for Model View Controller .. no need to debate i think ^^                <br/>                <small><b>anonymous</b> on <i>17 September 2012, at 10:09:05</i></small>                <br/>            . . .            </p>                <p>                depends on which framework, cakephp for example does not have a front controller. ZF does.                    <br/>                    <small><b>anonymous</b> on <i>14 June 2012, at 03:06:38</i></small>                    <br/>                . . .                </p>                <p>                Correct answer should be 1,2,4,5                    <br/>                    <small><b>Shahriar</b> on <i>28 January 2012, at 10:01:13</i></small>                    <br/>                . . .                </p>                <p>                When you move all requests to index.php file using .htaccess this is called Front Controller.<br/>Or in other words single entry point.<br/><br/>So correct are 1, 2, 4, 5                    <br/>                    <small><b>aubergine</b> on <i>18 January 2012, at 06:01:53</i></small>                    <br/>                . . .                </p>                <p>                1,2,4 Model, View and Controller                    <br/>                    <small><b>anonymous</b> on <i>20 May 2011, at 09:05:21</i></small>                    <br/>                . . .                </p>                <p>                Confusing....                    <br/>                    <small><b>Faisal</b> on <i>29 October 2010, at 12:10:33</i></small>                    <br/>                . . .                </p>                <p>                IMHO there shouldn\'t be a 4. answer at all. Front Controller is a Enterprise Architecture Pattern of its own and Validation is not even mentioned on the Wikipedia MVC page.                    <br/>                    <small><b>lathspell</b> on <i>14 July 2010, at 08:07:49</i></small>                    <br/>                . . .                </p>                <p>                imho Front Controller is more appropriate                    <br/>                    <small><b>Loo</b> on <i>5 April 2010, at 05:04:48</i></small>                    <br/>                . . .                </p>",
c63: "<p>            2 es la respuesa correcta                <br/>                <small><b>anonymous</b> on <i>11 November 2012, at 09:11:00</i></small>                <br/>            . . .            </p>                <p>                read the question and answer below mine very carefully. This is a trick question. Easy to overlook                    <br/>                    <small><b>anonymous</b> on <i>13 July 2012, at 09:07:54</i></small>                    <br/>                . . .                </p>                <p>                Correct answer is 2 because guys just notice,question is which key will not be displayed.                    <br/>                    <small><b>Mohit garg</b> on <i>12 July 2012, at 04:07:14</i></small>                    <br/>                . . .                </p>                <p>                The question is which key ??? Read carefully question before giving a bad answer                    <br/>                    <small><b>babs</b> on <i>9 July 2012, at 09:07:10</i></small>                    <br/>                . . .                </p>                <p>                just put the code in the php compiler... it will show that 2 is the correct answer.                    <br/>                    <small><b>anonymous</b> on <i>8 July 2012, at 04:07:21</i></small>                    <br/>                . . .                </p>                <p>                the key associated an array will never be displayed then \'c\' will not be displayed<br/>Answer: 2                    <br/>                    <small><b>babs</b> on <i>22 June 2012, at 02:06:09</i></small>                    <br/>                . . .                </p>                <p>                Before posting dumb answers like the one below, one could at least read the manual entry, which was given two comments below. Correct answer is 2. RTFM!                    <br/>                    <small><b>evll</b> on <i>18 January 2012, at 07:01:41</i></small>                    <br/>                . . .                </p>                <p>                Answer is 5                    <br/>                    <small><b>anonymous</b> on <i>12 October 2011, at 04:10:47</i></small>                    <br/>                . . .                </p>                <p>                Correct answer is C                    <br/>                    <small><b>anonymous</b> on <i>24 September 2011, at 10:09:38</i></small>                    <br/>                . . .                </p>                <p>                2 is the correct answer.  See... http://us2.php.net/manual/en/function.array-walk-recursive.php - \"Any key that holds an array will not be passed to the function.\"                    <br/>                    <small><b>anonymous</b> on <i>18 September 2011, at 08:09:27</i></small>                    <br/>                . . .                </p>                <p>                this will 2                    <br/>                    <small><b>anonymous</b> on <i>6 February 2011, at 04:02:06</i></small>                    <br/>                . . .                </p>                <p>                The best question!                    <br/>                    <small><b>anonymous</b> on <i>5 February 2011, at 10:02:57</i></small>                    <br/>                . . .                </p>                <p>                Answer is 2.                    <br/>                    <small><b>Faisal</b> on <i>24 October 2010, at 10:10:07</i></small>                    <br/>                . . .                </p>                <p>                Nice trick question... foold me...                    <br/>                    <small><b>anonymous</b> on <i>30 September 2010, at 07:09:31</i></small>                    <br/>                . . .                </p>                <p>                the answer 2 is the correct, ask \'which key\'                    <br/>                    <small><b>anonymous</b> on <i>29 July 2010, at 11:07:29</i></small>                    <br/>                . . .                </p>                <p>                a => John b => Coggeshall d => John e => Smith                    <br/>                    <small><b>anonymous</b> on <i>27 January 2010, at 01:01:37</i></small>                    <br/>                . . .                </p>",
c17: "<p>            anonymous $a is an octal number not a binary number. Numbers starting with 0 are treated as octal numbers.                <br/>                <small><b>anonymous</b> on <i>18 July 2013, at 07:07:08</i></small>                <br/>            . . .            </p>                <p>                There is no correct answer. $a = 2 and $b = 10 and $c = 2. The answer is 14.                    <br/>                    <small><b>anonymous</b> on <i>14 July 2013, at 01:07:36</i></small>                    <br/>                . . .                </p>                <p>                010 //8<br/>0xa //10<br/>2 //2<br/>total 20                    <br/>                    <small><b>anonymous</b> on <i>13 July 2012, at 09:07:15</i></small>                    <br/>                . . .                </p>                <p>                Peter is right, the correct answer is 1. with \"20\".                    <br/>                    <small><b>lathspell</b> on <i>11 July 2010, at 08:07:16</i></small>                    <br/>                . . .                </p>                <p>                response is 2                    <br/>                    <small><b>amine ismaili alaoui</b> on <i>27 June 2010, at 07:06:44</i></small>                    <br/>                . . .                </p>                <p>                $a = 8 (octal)<br/>$b = 10 (hexadecimal)<br/>                    <br/>                    <small><b>Peter</b> on <i>14 April 2010, at 11:04:32</i></small>                    <br/>                . . .                </p>",
c127: "<p>            anonymous#1                <br/>                <small><b>anonymous</b> on <i>10 October 2012, at 06:10:48</i></small>                <br/>            . . .            </p>                <p>                Model, 1st is correct                    <br/>                    <small><b>anonymous</b> on <i>18 October 2010, at 05:10:07</i></small>                    <br/>                . . .                </p>",
c79: "<p>            If you compare a number with a string or the comparison involves numerical strings, then each string is converted to a number and the comparison performed numerically.<br/>http://php.net/manual/en/language.operators.comparison.php                <br/>                <small><b>anonymous</b> on <i>25 December 2012, at 04:12:30</i></small>                <br/>            . . .            </p>                <p>                someone explain clearly how \"top\"==0 o.O<br/>                    <br/>                    <small><b>anonymous</b> on <i>21 December 2012, at 03:12:47</i></small>                    <br/>                . . .                </p>                <p>                #1, #3, #5. #1 populate \"Notice: Use of undefined constant t - assumed \'t\'\" but it also converts undefined constant to string \'t\'.                    <br/>                    <small><b>ignat</b> on <i>17 October 2012, at 06:10:42</i></small>                    <br/>                . . .                </p>                <p>                1,3,5                    <br/>                    <small><b>anonymous</b> on <i>8 July 2012, at 08:07:36</i></small>                    <br/>                . . .                </p>                <p>                Answer 1, 3 and 5 is correct                    <br/>                    <small><b>Carla</b> on <i>13 October 2011, at 06:10:01</i></small>                    <br/>                . . .                </p>                <p>                Answer is 3 and 5.<br/>1 answer is incorrect: Use of undefined constant t - assumed \'t\'                    <br/>                    <small><b>anonymous</b> on <i>6 May 2011, at 10:05:41</i></small>                    <br/>                . . .                </p>                <p>                var_dump(\"top2\" == 2);bool(true) tested for ans 3                    <br/>                    <small><b>Gagan Charaya</b> on <i>21 January 2011, at 06:01:33</i></small>                    <br/>                . . .                </p>                <p>                I have tested for option 3.var_dump(\"top\" == );bool(true) but if var_dump(\"3top\" == 3);bool(true)                    <br/>                    <small><b>Gagan Charaya</b> on <i>21 January 2011, at 06:01:44</i></small>                    <br/>                . . .                </p>                <p>                how to get answer of number 3?                    <br/>                    <small><b>anonymous</b> on <i>20 December 2010, at 09:12:05</i></small>                    <br/>                . . .                </p>                <p>                Answer: 1. 3. and 5                    <br/>                    <small><b>anonymous</b> on <i>15 November 2010, at 01:11:06</i></small>                    <br/>                . . .                </p>",
c116: "<p>            2 and 5 are right but 2 is more secure way so if i should check only 1 answer i would go for 2.                <br/>                <small><b>anonymous</b> on <i>9 July 2012, at 06:07:21</i></small>                <br/>            . . .            </p>                <p>                The correct answer is \"2\" Prepared Statements. Answer \"5\" is tempting but strictly speaking, query escaping is not a database technology.                    <br/>                    <small><b>Adam</b> on <i>23 April 2012, at 02:04:30</i></small>                    <br/>                . . .                </p>                <p>                5 is the answer - http://shiflett.org/articles/sql-injection                    <br/>                    <small><b>anonymous</b> on <i>18 September 2011, at 11:09:39</i></small>                    <br/>                . . .                </p>                <p>                Answer: 2                    <br/>                    <small><b>anonymous</b> on <i>15 November 2010, at 02:11:59</i></small>                    <br/>                . . .                </p>",
c196: "<p>            php.net -> 4, 1, 2                <br/>                <small><b>anonymous</b> on <i>18 July 2013, at 03:07:56</i></small>                <br/>            . . .            </p>                <p>                If we need three answers, then #2 has to be right, it\'s the only key with value 2. If #2 is right, then #5 is automatically wrong. #1 has to be right, because if it is wrong, then #3 and #4 are both right, and that makes no sense, since their messages are the same. Since #1 is right, #3 is automatically wrong since it\'s the same key, that leaves #4. (I\'m just giving you another say to solve these questions on the real exam rather than to only rely on your memory)                    <br/>                    <small><b>anonymous</b> on <i>19 July 2012, at 05:07:46</i></small>                    <br/>                . . .                </p>                <p>                1, 2, 4<br/>http://www.php.net/manual/en/pdostatement.errorinfo.php                    <br/>                    <small><b>anonymous</b> on <i>17 March 2010, at 08:03:14</i></small>                    <br/>                . . .                </p>",
c1000: "",
c1001: ""
};